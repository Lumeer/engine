(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Filter = {}));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    (function (AddressField) {
        AddressField["HouseNumber"] = "houseNumber";
        AddressField["Street"] = "street";
        AddressField["PostalCode"] = "postalCode";
        AddressField["City"] = "city";
        AddressField["County"] = "county";
        AddressField["State"] = "state";
        AddressField["Country"] = "country";
    })(exports.AddressField || (exports.AddressField = {}));

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    (function (EquationOperator) {
        EquationOperator["Or"] = "or";
        EquationOperator["And"] = "and";
    })(exports.EquationOperator || (exports.EquationOperator = {}));
    (function (ConditionType) {
        ConditionType["Equals"] = "eq";
        ConditionType["NotEquals"] = "neq";
        ConditionType["LowerThan"] = "lt";
        ConditionType["LowerThanEquals"] = "lte";
        ConditionType["GreaterThan"] = "gt";
        ConditionType["GreaterThanEquals"] = "gte";
        ConditionType["In"] = "in";
        ConditionType["HasSome"] = "hasSome";
        ConditionType["HasAll"] = "hasAll";
        ConditionType["HasNoneOf"] = "nin";
        ConditionType["Between"] = "between";
        ConditionType["NotBetween"] = "notBetween";
        ConditionType["Contains"] = "contains";
        ConditionType["NotContains"] = "notContains";
        ConditionType["StartsWith"] = "startsWith";
        ConditionType["EndsWith"] = "endsWith";
        ConditionType["IsEmpty"] = "empty";
        ConditionType["NotEmpty"] = "notEmpty";
        ConditionType["Enabled"] = "enabled";
        ConditionType["Disabled"] = "disabled";
    })(exports.ConditionType || (exports.ConditionType = {}));

    (function (AttributesResourceType) {
        AttributesResourceType["Collection"] = "collection";
        AttributesResourceType["LinkType"] = "linkType";
    })(exports.AttributesResourceType || (exports.AttributesResourceType = {}));

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    (function (DateTimeConstraintConditionValue) {
        DateTimeConstraintConditionValue["Today"] = "today";
        DateTimeConstraintConditionValue["Yesterday"] = "yesterday";
        DateTimeConstraintConditionValue["Tomorrow"] = "tomorrow";
        DateTimeConstraintConditionValue["ThisMonth"] = "thisMonth";
        DateTimeConstraintConditionValue["ThisWeek"] = "thisWeek";
        DateTimeConstraintConditionValue["LastMonth"] = "lastMonth";
        DateTimeConstraintConditionValue["LastWeek"] = "lastWeek";
        DateTimeConstraintConditionValue["NextMonth"] = "nextMonth";
        DateTimeConstraintConditionValue["NextWeek"] = "nextWeek";
    })(exports.DateTimeConstraintConditionValue || (exports.DateTimeConstraintConditionValue = {}));
    (function (UserConstraintConditionValue) {
        UserConstraintConditionValue["CurrentUser"] = "currentUser";
    })(exports.UserConstraintConditionValue || (exports.UserConstraintConditionValue = {}));

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    (function (CoordinatesFormat) {
        CoordinatesFormat["DecimalDegrees"] = "DD";
        CoordinatesFormat["DegreesMinutesSeconds"] = "DMS";
    })(exports.CoordinatesFormat || (exports.CoordinatesFormat = {}));
    (function (DurationUnit) {
        DurationUnit["Weeks"] = "w";
        DurationUnit["Days"] = "d";
        DurationUnit["Hours"] = "h";
        DurationUnit["Minutes"] = "m";
        DurationUnit["Seconds"] = "s";
    })(exports.DurationUnit || (exports.DurationUnit = {}));
    (function (DurationType) {
        DurationType["Work"] = "Work";
        DurationType["Classic"] = "Classic";
        DurationType["Custom"] = "Custom";
    })(exports.DurationType || (exports.DurationType = {}));
    (function (CaseStyle) {
        CaseStyle["None"] = "None";
        CaseStyle["LowerCase"] = "LowerCase";
        CaseStyle["UpperCase"] = "UpperCase";
        CaseStyle["TitleCase"] = "TitleCase";
        CaseStyle["SentenceCase"] = "SentenceCase";
    })(exports.CaseStyle || (exports.CaseStyle = {}));

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    (function (ConstraintType) {
        ConstraintType["Unknown"] = "None";
        ConstraintType["Text"] = "Text";
        ConstraintType["Number"] = "Number";
        ConstraintType["Address"] = "Address";
        ConstraintType["Boolean"] = "Boolean";
        ConstraintType["Action"] = "Action";
        ConstraintType["Coordinates"] = "Coordinates";
        ConstraintType["DateTime"] = "DateTime";
        ConstraintType["Duration"] = "Duration";
        ConstraintType["Email"] = "Email";
        ConstraintType["Files"] = "FileAttachment";
        ConstraintType["Image"] = "Image";
        ConstraintType["Link"] = "Link";
        ConstraintType["Percentage"] = "Percentage";
        ConstraintType["Rating"] = "Rating";
        ConstraintType["Select"] = "Select";
        ConstraintType["Tag"] = "Tag";
        ConstraintType["User"] = "User";
        ConstraintType["Color"] = "Color";
    })(exports.ConstraintType || (exports.ConstraintType = {}));

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    (function (LanguageTag) {
        LanguageTag["Denmark"] = "da-DK";
        LanguageTag["Switzerland"] = "de-CH";
        LanguageTag["NewZealand"] = "en-NZ";
        LanguageTag["FrenchCanada"] = "fr-CA";
        LanguageTag["Canada"] = "en-CA";
        LanguageTag["Sweden"] = "sv-SE";
        LanguageTag["Norway"] = "nb-NO";
        LanguageTag["Finland"] = "fi-FI";
        LanguageTag["Israel"] = "he-IL";
        LanguageTag["Spain"] = "es-ES";
        LanguageTag["France"] = "fr-FR";
        LanguageTag["Italy"] = "it-IT";
        LanguageTag["England"] = "en-GB";
        LanguageTag["Portugal"] = "pt-PT";
        LanguageTag["Poland"] = "pl-PL";
        LanguageTag["Czech"] = "cs-CZ";
        LanguageTag["Slovak"] = "sk-SK";
        LanguageTag["Hungary"] = "hu-HU";
        LanguageTag["Austria"] = "de-AT";
        LanguageTag["Germany"] = "de-DE";
        LanguageTag["USA"] = "en-US";
        LanguageTag["Brazil"] = "pt-BR";
        LanguageTag["Taiwan"] = "zh-TW";
        LanguageTag["Netherlands"] = "nl-NL";
        LanguageTag["China"] = "zh-CN";
        LanguageTag["Russia"] = "ru-RU";
        LanguageTag["Japan"] = "ja-JP";
        LanguageTag["Australia"] = "en-AU";
        LanguageTag["Ireland"] = "en-IE";
        LanguageTag["Malta"] = "en-MT";
        LanguageTag["Turkey"] = "tr-TR";
        LanguageTag["Ukraine"] = "uk-UA";
        LanguageTag["India"] = "en-IN";
    })(exports.LanguageTag || (exports.LanguageTag = {}));

    /*
     *  big.js v6.0.3
     *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
     *  Copyright (c) 2020 Michael Mclaughlin
     *  https://github.com/MikeMcl/big.js/LICENCE.md
     */


    /************************************** EDITABLE DEFAULTS *****************************************/


    // The default values below must be integers within the stated ranges.

    /*
       * The maximum number of decimal places (DP) of the results of operations involving division:
       * div and sqrt, and pow with negative exponents.
       */
    var DP = 20,          // 0 to MAX_DP

        /*
       * The rounding mode (RM) used when rounding to the above decimal places.
       *
       *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
       *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
       *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
       *  3  Away from zero.                                  (ROUND_UP)
       */
        RM = 1,             // 0, 1, 2 or 3

        // The maximum value of DP and Big.DP.
        MAX_DP = 1E6,       // 0 to 1000000

        // The maximum magnitude of the exponent argument to the pow method.
        MAX_POWER = 1E6,    // 1 to 1000000

        /*
       * The negative exponent (NE) at and beneath which toString returns exponential notation.
       * (JavaScript numbers: -7)
       * -1000000 is the minimum recommended exponent value of a Big.
       */
        NE = -7,            // 0 to -1000000

        /*
       * The positive exponent (PE) at and above which toString returns exponential notation.
       * (JavaScript numbers: 21)
       * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
       */
        PE = 21,            // 0 to 1000000

        /*
       * When true, an error will be thrown if a primitive number is passed to the Big constructor,
       * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
       * primitive number without a loss of precision.
       */
        STRICT = false,     // true or false


        /**************************************************************************************************/


        // Error messages.
        NAME = '[big.js] ',
        INVALID = NAME + 'Invalid ',
        INVALID_DP = INVALID + 'decimal places',
        INVALID_RM = INVALID + 'rounding mode',
        DIV_BY_ZERO = NAME + 'Division by zero',

        // The shared prototype object.
        P = {},
        UNDEFINED = void 0,
        NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


    /*
     * Create and return a Big constructor.
     */
    function _Big_() {

        /*
       * The Big constructor and exported function.
       * Create and return a new instance of a Big number object.
       *
       * n {number|string|Big} A numeric value.
       */
        function Big(n) {
            var x = this;

            // Enable constructor usage without new.
            if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

            // Duplicate.
            if (n instanceof Big) {
                x.s = n.s;
                x.e = n.e;
                x.c = n.c.slice();
            } else {
                if (typeof n !== 'string') {
                    if (Big.strict === true) {
                        throw TypeError(INVALID + 'number');
                    }

                    // Minus zero?
                    n = n === 0 && 1 / n < 0 ? '-0' : String(n);
                }

                parse(x, n);
            }

            // Retain a reference to this Big constructor.
            // Shadow Big.prototype.constructor which points to Object.
            x.constructor = Big;
        }

        Big.prototype = P;
        Big.DP = DP;
        Big.RM = RM;
        Big.NE = NE;
        Big.PE = PE;
        Big.strict = STRICT;

        return Big;
    }


    /*
     * Parse the number or string value passed to a Big constructor.
     *
     * x {Big} A Big number instance.
     * n {number|string} A numeric value.
     */
    function parse(x, n) {
        var e, i, nl;

        if (!NUMERIC.test(n)) {
            throw Error(INVALID + 'number');
        }

        // Determine sign.
        x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

        // Decimal point?
        if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

        // Exponential form?
        if ((i = n.search(/e/i)) > 0) {

            // Determine exponent.
            if (e < 0) e = i;
            e += +n.slice(i + 1);
            n = n.substring(0, i);
        } else if (e < 0) {

            // Integer.
            e = n.length;
        }

        nl = n.length;

        // Determine leading zeros.
        for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

        if (i == nl) {

            // Zero.
            x.c = [x.e = 0];
        } else {

            // Determine trailing zeros.
            for (; nl > 0 && n.charAt(--nl) == '0';);
            x.e = e - i - 1;
            x.c = [];

            // Convert string to array of digits without leading/trailing zeros.
            for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
        }

        return x;
    }


    /*
     * Round Big x to a maximum of sd significant digits using rounding mode rm.
     *
     * x {Big} The Big to round.
     * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
     * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     * [more] {boolean} Whether the result of division was truncated.
     */
    function round(x, sd, rm, more) {
        var xc = x.c;

        if (rm === UNDEFINED) rm = Big.RM;
        if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
            throw Error(INVALID_RM);
        }

        if (sd < 1) {
            more =
                rm === 3 && (more || !!xc[0]) || sd === 0 && (
                    rm === 1 && xc[0] >= 5 ||
                    rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))
                );

            xc.length = 1;

            if (more) {

                // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                x.e = x.e - sd + 1;
                xc[0] = 1;
            } else {

                // Zero.
                xc[0] = x.e = 0;
            }
        } else if (sd < xc.length) {

            // xc[sd] is the digit after the digit that may be rounded up.
            more =
                rm === 1 && xc[sd] >= 5 ||
                rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&
                (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||
                rm === 3 && (more || !!xc[0]);

            // Remove any digits after the required precision.
            xc.length = sd--;

            // Round up?
            if (more) {

                // Rounding up may mean the previous digit has to be rounded up.
                for (; ++xc[sd] > 9;) {
                    xc[sd] = 0;
                    if (!sd--) {
                        ++x.e;
                        xc.unshift(1);
                    }
                }
            }

            // Remove trailing zeros.
            for (sd = xc.length; !xc[--sd];) xc.pop();
        }

        return x;
    }


    /*
     * Return a string representing the value of Big x in normal or exponential notation.
     * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
     */
    function stringify(x, doExponential, isNonzero) {
        var e = x.e,
            s = x.c.join(''),
            n = s.length;

        // Exponential notation?
        if (doExponential) {
            s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

            // Normal notation.
        } else if (e < 0) {
            for (; ++e;) s = '0' + s;
            s = '0.' + s;
        } else if (e > 0) {
            if (++e > n) {
                for (e -= n; e--;) s += '0';
            } else if (e < n) {
                s = s.slice(0, e) + '.' + s.slice(e);
            }
        } else if (n > 1) {
            s = s.charAt(0) + '.' + s.slice(1);
        }

        return x.s < 0 && isNonzero ? '-' + s : s;
    }


    // Prototype/instance methods


    /*
     * Return a new Big whose value is the absolute value of this Big.
     */
    P.abs = function () {
        var x = new this.constructor(this);
        x.s = 1;
        return x;
    };


    /*
     * Return 1 if the value of this Big is greater than the value of Big y,
     *       -1 if the value of this Big is less than the value of Big y, or
     *        0 if they have the same value.
     */
    P.cmp = function (y) {
        var isneg,
            x = this,
            xc = x.c,
            yc = (y = new x.constructor(y)).c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

        // Either zero?
        if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        isneg = i < 0;

        // Compare exponents.
        if (k != l) return k > l ^ isneg ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = -1; ++i < j;) {
            if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
        }

        // Compare lengths.
        return k == l ? 0 : k > l ^ isneg ? 1 : -1;
    };


    /*
     * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
     * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
     */
    P.div = function (y) {
        var x = this,
            Big = x.constructor,
            a = x.c,                  // dividend
            b = (y = new Big(y)).c,   // divisor
            k = x.s == y.s ? 1 : -1,
            dp = Big.DP;

        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
            throw Error(INVALID_DP);
        }

        // Divisor is zero?
        if (!b[0]) {
            throw Error(DIV_BY_ZERO);
        }

        // Dividend is 0? Return +-0.
        if (!a[0]) {
            y.s = k;
            y.c = [y.e = 0];
            return y;
        }

        var bl, bt, n, cmp, ri,
            bz = b.slice(),
            ai = bl = b.length,
            al = a.length,
            r = a.slice(0, bl),   // remainder
            rl = r.length,
            q = y,                // quotient
            qc = q.c = [],
            qi = 0,
            p = dp + (q.e = x.e - y.e) + 1;    // precision of the result

        q.s = k;
        k = p < 0 ? 0 : p;

        // Create version of divisor with leading zero.
        bz.unshift(0);

        // Add zeros to make remainder as long as divisor.
        for (; rl++ < bl;) r.push(0);

        do {

            // n is how many times the divisor goes into current remainder.
            for (n = 0; n < 10; n++) {

                // Compare divisor and remainder.
                if (bl != (rl = r.length)) {
                    cmp = bl > rl ? 1 : -1;
                } else {
                    for (ri = -1, cmp = 0; ++ri < bl;) {
                        if (b[ri] != r[ri]) {
                            cmp = b[ri] > r[ri] ? 1 : -1;
                            break;
                        }
                    }
                }

                // If divisor < remainder, subtract divisor from remainder.
                if (cmp < 0) {

                    // Remainder can't be more than 1 digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for (bt = rl == bl ? b : bz; rl;) {
                        if (r[--rl] < bt[rl]) {
                            ri = rl;
                            for (; ri && !r[--ri];) r[ri] = 9;
                            --r[ri];
                            r[rl] += 10;
                        }
                        r[rl] -= bt[rl];
                    }

                    for (; !r[0];) r.shift();
                } else {
                    break;
                }
            }

            // Add the digit n to the result array.
            qc[qi++] = cmp ? n : ++n;

            // Update the remainder.
            if (r[0] && cmp) r[rl] = a[ai] || 0;
            else r = [a[ai]];

        } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

        // Leading zero? Do not remove if result is simply zero (qi == 1).
        if (!qc[0] && qi != 1) {

            // There can't be more than one zero.
            qc.shift();
            q.e--;
            p--;
        }

        // Round?
        if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);

        return q;
    };


    /*
     * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
     */
    P.eq = function (y) {
        return this.cmp(y) === 0;
    };


    /*
     * Return true if the value of this Big is greater than the value of Big y, otherwise return
     * false.
     */
    P.gt = function (y) {
        return this.cmp(y) > 0;
    };


    /*
     * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
     * return false.
     */
    P.gte = function (y) {
        return this.cmp(y) > -1;
    };


    /*
     * Return true if the value of this Big is less than the value of Big y, otherwise return false.
     */
    P.lt = function (y) {
        return this.cmp(y) < 0;
    };


    /*
     * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
     * return false.
     */
    P.lte = function (y) {
        return this.cmp(y) < 1;
    };


    /*
     * Return a new Big whose value is the value of this Big minus the value of Big y.
     */
    P.minus = P.sub = function (y) {
        var i, j, t, xlty,
            x = this,
            Big = x.constructor,
            a = x.s,
            b = (y = new Big(y)).s;

        // Signs differ?
        if (a != b) {
            y.s = -b;
            return x.plus(y);
        }

        var xc = x.c.slice(),
            xe = x.e,
            yc = y.c,
            ye = y.e;

        // Either zero?
        if (!xc[0] || !yc[0]) {
            if (yc[0]) {
                y.s = -b;
            } else if (xc[0]) {
                y = new Big(x);
            } else {
                y.s = 1;
            }
            return y;
        }

        // Determine which is the bigger number. Prepend zeros to equalise exponents.
        if (a = xe - ye) {

            if (xlty = a < 0) {
                a = -a;
                t = xc;
            } else {
                ye = xe;
                t = yc;
            }

            t.reverse();
            for (b = a; b--;) t.push(0);
            t.reverse();
        } else {

            // Exponents equal. Check digit by digit.
            j = ((xlty = xc.length < yc.length) ? xc : yc).length;

            for (a = b = 0; b < j; b++) {
                if (xc[b] != yc[b]) {
                    xlty = xc[b] < yc[b];
                    break;
                }
            }
        }

        // x < y? Point xc to the array of the bigger number.
        if (xlty) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
        }

        /*
       * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
       * needs to start at yc.length.
       */
        if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

        // Subtract yc from xc.
        for (b = i; j > a;) {
            if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i];) xc[i] = 9;
                --xc[i];
                xc[j] += 10;
            }

            xc[j] -= yc[j];
        }

        // Remove trailing zeros.
        for (; xc[--b] === 0;) xc.pop();

        // Remove leading zeros and adjust exponent accordingly.
        for (; xc[0] === 0;) {
            xc.shift();
            --ye;
        }

        if (!xc[0]) {

            // n - n = +0
            y.s = 1;

            // Result must be zero.
            xc = [ye = 0];
        }

        y.c = xc;
        y.e = ye;

        return y;
    };


    /*
     * Return a new Big whose value is the value of this Big modulo the value of Big y.
     */
    P.mod = function (y) {
        var ygtx,
            x = this,
            Big = x.constructor,
            a = x.s,
            b = (y = new Big(y)).s;

        if (!y.c[0]) {
            throw Error(DIV_BY_ZERO);
        }

        x.s = y.s = 1;
        ygtx = y.cmp(x) == 1;
        x.s = a;
        y.s = b;

        if (ygtx) return new Big(x);

        a = Big.DP;
        b = Big.RM;
        Big.DP = Big.RM = 0;
        x = x.div(y);
        Big.DP = a;
        Big.RM = b;

        return this.minus(x.times(y));
    };


    /*
     * Return a new Big whose value is the value of this Big plus the value of Big y.
     */
    P.plus = P.add = function (y) {
        var e, k, t,
            x = this,
            Big = x.constructor;

        y = new Big(y);

        // Signs differ?
        if (x.s != y.s) {
            y.s = -y.s;
            return x.minus(y);
        }

        var xe = x.e,
            xc = x.c,
            ye = y.e,
            yc = y.c;

        // Either zero?
        if (!xc[0] || !yc[0]) {
            if (!yc[0]) {
                if (xc[0]) {
                    y = new Big(x);
                } else {
                    y.s = x.s;
                }
            }
            return y;
        }

        xc = xc.slice();

        // Prepend zeros to equalise exponents.
        // Note: reverse faster than unshifts.
        if (e = xe - ye) {
            if (e > 0) {
                ye = xe;
                t = yc;
            } else {
                e = -e;
                t = xc;
            }

            t.reverse();
            for (; e--;) t.push(0);
            t.reverse();
        }

        // Point xc to the longer array.
        if (xc.length - yc.length < 0) {
            t = yc;
            yc = xc;
            xc = t;
        }

        e = yc.length;

        // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
        for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

        // No need to check for zero, as +x + +y != 0 && -x + -y != 0

        if (k) {
            xc.unshift(k);
            ++ye;
        }

        // Remove trailing zeros.
        for (e = xc.length; xc[--e] === 0;) xc.pop();

        y.c = xc;
        y.e = ye;

        return y;
    };


    /*
     * Return a Big whose value is the value of this Big raised to the power n.
     * If n is negative, round to a maximum of Big.DP decimal places using rounding
     * mode Big.RM.
     *
     * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
     */
    P.pow = function (n) {
        var x = this,
            one = new x.constructor('1'),
            y = one,
            isneg = n < 0;

        if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
            throw Error(INVALID + 'exponent');
        }

        if (isneg) n = -n;

        for (;;) {
            if (n & 1) y = y.times(x);
            n >>= 1;
            if (!n) break;
            x = x.times(x);
        }

        return isneg ? one.div(y) : y;
    };


    /*
     * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
     * significant digits using rounding mode rm, or Big.RM if rm is not specified.
     *
     * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P.prec = function (sd, rm) {
        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
            throw Error(INVALID + 'precision');
        }
        return round(new this.constructor(this), sd, rm);
    };


    /*
     * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
     * using rounding mode rm, or Big.RM if rm is not specified.
     * If dp is negative, round to an integer which is a multiple of 10**-dp.
     * If dp is not specified, round to 0 decimal places.
     *
     * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P.round = function (dp, rm) {
        if (dp === UNDEFINED) dp = 0;
        else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
            throw Error(INVALID_DP);
        }
        return round(new this.constructor(this), dp + this.e + 1, rm);
    };


    /*
     * Return a new Big whose value is the square root of the value of this Big, rounded, if
     * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
     */
    P.sqrt = function () {
        var r, c, t,
            x = this,
            Big = x.constructor,
            s = x.s,
            e = x.e,
            half = new Big('0.5');

        // Zero?
        if (!x.c[0]) return new Big(x);

        // Negative?
        if (s < 0) {
            throw Error(NAME + 'No square root');
        }

        // Estimate.
        s = Math.sqrt(x + '');

        // Math.sqrt underflow/overflow?
        // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
        if (s === 0 || s === 1 / 0) {
            c = x.c.join('');
            if (!(c.length + e & 1)) c += '0';
            s = Math.sqrt(c);
            e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
            r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
        } else {
            r = new Big(s + '');
        }

        e = r.e + (Big.DP += 4);

        // Newton-Raphson iteration.
        do {
            t = r;
            r = half.times(t.plus(x.div(t)));
        } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

        return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
    };


    /*
     * Return a new Big whose value is the value of this Big times the value of Big y.
     */
    P.times = P.mul = function (y) {
        var c,
            x = this,
            Big = x.constructor,
            xc = x.c,
            yc = (y = new Big(y)).c,
            a = xc.length,
            b = yc.length,
            i = x.e,
            j = y.e;

        // Determine sign of result.
        y.s = x.s == y.s ? 1 : -1;

        // Return signed 0 if either 0.
        if (!xc[0] || !yc[0]) {
            y.c = [y.e = 0];
            return y;
        }

        // Initialise exponent of result as x.e + y.e.
        y.e = i + j;

        // If array xc has fewer digits than yc, swap xc and yc, and lengths.
        if (a < b) {
            c = xc;
            xc = yc;
            yc = c;
            j = a;
            a = b;
            b = j;
        }

        // Initialise coefficient array of result with zeros.
        for (c = new Array(j = a + b); j--;) c[j] = 0;

        // Multiply.

        // i is initially xc.length.
        for (i = b; i--;) {
            b = 0;

            // a is yc.length.
            for (j = a + i; j > i;) {

                // Current sum of products at this digit position, plus carry.
                b = c[j] + yc[i] * xc[j - i - 1] + b;
                c[j--] = b % 10;

                // carry
                b = b / 10 | 0;
            }

            c[j] = b;
        }

        // Increment result exponent if there is a final carry, otherwise remove leading zero.
        if (b) ++y.e;
        else c.shift();

        // Remove trailing zeros.
        for (i = c.length; !c[--i];) c.pop();
        y.c = c;

        return y;
    };


    /*
     * Return a string representing the value of this Big in exponential notation rounded to dp fixed
     * decimal places using rounding mode rm, or Big.RM if rm is not specified.
     *
     * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P.toExponential = function (dp, rm) {
        var x = this,
            n = x.c[0];

        if (dp !== UNDEFINED) {
            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
            }
            x = round(new x.constructor(x), ++dp, rm);
            for (; x.c.length < dp;) x.c.push(0);
        }

        return stringify(x, true, !!n);
    };


    /*
     * Return a string representing the value of this Big in normal notation rounded to dp fixed
     * decimal places using rounding mode rm, or Big.RM if rm is not specified.
     *
     * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     *
     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
     */
    P.toFixed = function (dp, rm) {
        var x = this,
            n = x.c[0];

        if (dp !== UNDEFINED) {
            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
            }
            x = round(new x.constructor(x), dp + x.e + 1, rm);

            // x.e may have changed if the value is rounded up.
            for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
        }

        return stringify(x, false, !!n);
    };


    /*
     * Return a string representing the value of this Big.
     * Return exponential notation if this Big has a positive exponent equal to or greater than
     * Big.PE, or a negative exponent equal to or less than Big.NE.
     * Omit the sign for negative zero.
     */
    P.toJSON = P.toString = function () {
        var x = this,
            Big = x.constructor;
        return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
    };


    /*
     * Return the value of this Big as a primitve number.
     */
    P.toNumber = function () {
        var n = Number(stringify(this, true, true));
        if (this.constructor.strict === true && !this.eq(n.toString())) {
            throw Error(NAME + 'Imprecise conversion');
        }
        return n;
    };


    /*
     * Return a string representing the value of this Big rounded to sd significant digits using
     * rounding mode rm, or Big.RM if rm is not specified.
     * Use exponential notation if sd is less than the number of digits necessary to represent
     * the integer part of the value in normal notation.
     *
     * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P.toPrecision = function (sd, rm) {
        var x = this,
            Big = x.constructor,
            n = x.c[0];

        if (sd !== UNDEFINED) {
            if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
                throw Error(INVALID + 'precision');
            }
            x = round(new Big(x), sd, rm);
            for (; x.c.length < sd;) x.c.push(0);
        }

        return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
    };


    /*
     * Return a string representing the value of this Big.
     * Return exponential notation if this Big has a positive exponent equal to or greater than
     * Big.PE, or a negative exponent equal to or less than Big.NE.
     * Include the sign for negative zero.
     */
    P.valueOf = function () {
        var x = this,
            Big = x.constructor;
        if (Big.strict === true) {
            throw Error(NAME + 'valueOf disallowed');
        }
        return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
    };


    // Export


    var Big = _Big_();

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
    }

    var _listCacheClear = listCacheClear;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
        return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
            if (eq_1(array[length][0], key)) {
                return length;
            }
        }
        return -1;
    }

    var _assocIndexOf = assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
        var data = this.__data__,
            index = _assocIndexOf(data, key);

        if (index < 0) {
            return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
            data.pop();
        } else {
            splice.call(data, index, 1);
        }
        --this.size;
        return true;
    }

    var _listCacheDelete = listCacheDelete;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
        var data = this.__data__,
            index = _assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
        return _assocIndexOf(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
        var data = this.__data__,
            index = _assocIndexOf(data, key);

        if (index < 0) {
            ++this.size;
            data.push([key, value]);
        } else {
            data[index][1] = value;
        }
        return this;
    }

    var _listCacheSet = listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = _listCacheClear;
    ListCache.prototype['delete'] = _listCacheDelete;
    ListCache.prototype.get = _listCacheGet;
    ListCache.prototype.has = _listCacheHas;
    ListCache.prototype.set = _listCacheSet;

    var _ListCache = ListCache;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
        this.__data__ = new _ListCache;
        this.size = 0;
    }

    var _stackClear = stackClear;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
    }

    var _stackDelete = stackDelete;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
        return this.__data__.get(key);
    }

    var _stackGet = stackGet;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
        return this.__data__.has(key);
    }

    var _stackHas = stackHas;

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
        var module = { exports: {} };
        return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
        throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    /** Detect free variable `global` from Node.js. */

    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = _freeGlobal || freeSelf || Function('return this')();

    var _root = root;

    /** Built-in value references. */
    var Symbol$1 = _root.Symbol;

    var _Symbol = Symbol$1;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Built-in value references. */
    var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
            value[symToStringTag] = undefined;
            var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
            if (isOwn) {
                value[symToStringTag] = tag;
            } else {
                delete value[symToStringTag];
            }
        }
        return result;
    }

    var _getRawTag = getRawTag;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$1.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
        return nativeObjectToString$1.call(value);
    }

    var _objectToString = objectToString;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }
        return (symToStringTag$1 && symToStringTag$1 in Object(value))
            ? _getRawTag(value)
            : _objectToString(value);
    }

    var _baseGetTag = baseGetTag;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
        if (!isObject_1(value)) {
            return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = _baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = _root['__core-js_shared__'];

    var _coreJsData = coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked;

    /** Used for built-in method references. */
    var funcProto = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
        if (func != null) {
            try {
                return funcToString.call(func);
            } catch (e) {}
            try {
                return (func + '');
            } catch (e) {}
        }
        return '';
    }

    var _toSource = toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$2 = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
        funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
        if (!isObject_1(value) || _isMasked(value)) {
            return false;
        }
        var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
        return pattern.test(_toSource(value));
    }

    var _baseIsNative = baseIsNative;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
        return object == null ? undefined : object[key];
    }

    var _getValue = getValue;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
        var value = _getValue(object, key);
        return _baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative;

    /* Built-in method references that are verified to be native. */
    var Map = _getNative(_root, 'Map');

    var _Map = Map;

    /* Built-in method references that are verified to be native. */
    var nativeCreate = _getNative(Object, 'create');

    var _nativeCreate = nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
        this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
        this.size = 0;
    }

    var _hashClear = hashClear;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
    }

    var _hashDelete = hashDelete;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
        var data = this.__data__;
        if (_nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet;

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
        var data = this.__data__;
        return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
    }

    var _hashHas = hashHas;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
        return this;
    }

    var _hashSet = hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = _hashClear;
    Hash.prototype['delete'] = _hashDelete;
    Hash.prototype.get = _hashGet;
    Hash.prototype.has = _hashHas;
    Hash.prototype.set = _hashSet;

    var _Hash = Hash;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
            'hash': new _Hash,
            'map': new (_Map || _ListCache),
            'string': new _Hash
        };
    }

    var _mapCacheClear = mapCacheClear;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
    }

    var _isKeyable = isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
        var data = map.__data__;
        return _isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
    }

    var _getMapData = getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
        var result = _getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
    }

    var _mapCacheDelete = mapCacheDelete;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
        return _getMapData(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
        return _getMapData(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
        var data = _getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
    }

    var _mapCacheSet = mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = _mapCacheClear;
    MapCache.prototype['delete'] = _mapCacheDelete;
    MapCache.prototype.get = _mapCacheGet;
    MapCache.prototype.has = _mapCacheHas;
    MapCache.prototype.set = _mapCacheSet;

    var _MapCache = MapCache;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof _ListCache) {
            var pairs = data.__data__;
            if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
            }
            data = this.__data__ = new _MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
    }

    var _stackSet = stackSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
        var data = this.__data__ = new _ListCache(entries);
        this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = _stackClear;
    Stack.prototype['delete'] = _stackDelete;
    Stack.prototype.get = _stackGet;
    Stack.prototype.has = _stackHas;
    Stack.prototype.set = _stackSet;

    var _Stack = Stack;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED$2);
        return this;
    }

    var _setCacheAdd = setCacheAdd;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
        return this.__data__.has(value);
    }

    var _setCacheHas = setCacheHas;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new _MapCache;
        while (++index < length) {
            this.add(values[index]);
        }
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
    SetCache.prototype.has = _setCacheHas;

    var _SetCache = SetCache;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
            if (predicate(array[index], index, array)) {
                return true;
            }
        }
        return false;
    }

    var _arraySome = arraySome;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
        return cache.has(key);
    }

    var _cacheHas = cacheHas;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
        }
        // Check that cyclic values are equal.
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];

            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
                if (compared) {
                    continue;
                }
                result = false;
                break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
                if (!_arraySome(other, function(othValue, othIndex) {
                    if (!_cacheHas(seen, othIndex) &&
                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                        return seen.push(othIndex);
                    }
                })) {
                    result = false;
                    break;
                }
            } else if (!(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
                result = false;
                break;
            }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
    }

    var _equalArrays = equalArrays;

    /** Built-in value references. */
    var Uint8Array = _root.Uint8Array;

    var _Uint8Array = Uint8Array;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function(value, key) {
            result[++index] = [key, value];
        });
        return result;
    }

    var _mapToArray = mapToArray;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }

    var _setToArray = setToArray;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = _Symbol ? _Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
            case dataViewTag:
                if ((object.byteLength != other.byteLength) ||
                    (object.byteOffset != other.byteOffset)) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;

            case arrayBufferTag:
                if ((object.byteLength != other.byteLength) ||
                    !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
                    return false;
                }
                return true;

            case boolTag:
            case dateTag:
            case numberTag:
                // Coerce booleans to `1` or `0` and dates to milliseconds.
                // Invalid dates are coerced to `NaN`.
                return eq_1(+object, +other);

            case errorTag:
                return object.name == other.name && object.message == other.message;

            case regexpTag:
            case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == (other + '');

            case mapTag:
                var convert = _mapToArray;

            case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
                convert || (convert = _setToArray);

                if (object.size != other.size && !isPartial) {
                    return false;
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG$1;

                // Recursively compare objects (susceptible to call stack limits).
                stack.set(object, other);
                var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack['delete'](object);
                return result;

            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
        }
        return false;
    }

    var _equalByTag = equalByTag;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
            array[offset + index] = values[index];
        }
        return array;
    }

    var _arrayPush = arrayPush;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    var isArray_1 = isArray;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
    }

    var _baseGetAllKeys = baseGetAllKeys;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
                result[resIndex++] = value;
            }
        }
        return result;
    }

    var _arrayFilter = arrayFilter;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
        return [];
    }

    var stubArray_1 = stubArray;

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
        if (object == null) {
            return [];
        }
        object = Object(object);
        return _arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
        });
    };

    var _getSymbols = getSymbols;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }

    var _baseTimes = baseTimes;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
        return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
        return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
    }

    var _baseIsArguments = baseIsArguments;

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$6.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
        return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') &&
            !propertyIsEnumerable$1.call(value, 'callee');
    };

    var isArguments_1 = isArguments;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
        return false;
    }

    var stubFalse_1 = stubFalse;

    var isBuffer_1 = createCommonjsModule(function (module, exports) {
        /** Detect free variable `exports`. */
        var freeExports =  exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? _root.Buffer : undefined;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse_1;

        module.exports = isBuffer;
    });

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;

        return !!length &&
            (type == 'number' ||
                (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
        return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
    }

    var isLength_1 = isLength;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$1 = '[object Map]',
        numberTag$1 = '[object Number]',
        objectTag = '[object Object]',
        regexpTag$1 = '[object RegExp]',
        setTag$1 = '[object Set]',
        stringTag$1 = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
            typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] =
                typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
                    typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] =
                        typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
                            typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] =
                                typedArrayTags[weakMapTag] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
        return isObjectLike_1(value) &&
            isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }

    var _baseUnary = baseUnary;

    var _nodeUtil = createCommonjsModule(function (module, exports) {
        /** Detect free variable `exports`. */
        var freeExports =  exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && _freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function() {
            try {
                // Use `util.types` for Node.js 10+.
                var types = freeModule && freeModule.require && freeModule.require('util').types;

                if (types) {
                    return types;
                }

                // Legacy `process.binding('util')` for Node.js < 10.
                return freeProcess && freeProcess.binding && freeProcess.binding('util');
            } catch (e) {}
        }());

        module.exports = nodeUtil;
    });

    /* Node.js helper references. */
    var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

    var isTypedArray_1 = isTypedArray;

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
        var isArr = isArray_1(value),
            isArg = !isArr && isArguments_1(value),
            isBuff = !isArr && !isArg && isBuffer_1(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? _baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
            if ((inherited || hasOwnProperty$5.call(value, key)) &&
                !(skipIndexes && (
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    key == 'length' ||
                    // Node.js 0.10 has enumerable non-index properties on buffers.
                    (isBuff && (key == 'offset' || key == 'parent')) ||
                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                    // Skip index properties.
                    _isIndex(key, length)
                ))) {
                result.push(key);
            }
        }
        return result;
    }

    var _arrayLikeKeys = arrayLikeKeys;

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

        return value === proto;
    }

    var _isPrototype = isPrototype;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }

    var _overArg = overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = _overArg(Object.keys, Object);

    var _nativeKeys = nativeKeys;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$9.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
        if (!_isPrototype(object)) {
            return _nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
            if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
                result.push(key);
            }
        }
        return result;
    }

    var _baseKeys = baseKeys;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
        return value != null && isLength_1(value.length) && !isFunction_1(value);
    }

    var isArrayLike_1 = isArrayLike;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
        return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
    }

    var keys_1 = keys;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
        return _baseGetAllKeys(object, keys_1, _getSymbols);
    }

    var _getAllKeys = getAllKeys;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$a.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
            objProps = _getAllKeys(object),
            objLength = objProps.length,
            othProps = _getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
            return false;
        }
        var index = objLength;
        while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty$7.call(other, key))) {
                return false;
            }
        }
        // Check that cyclic values are equal.
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];

            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined
                    ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                    : compared
            )) {
                result = false;
                break;
            }
            skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                result = false;
            }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
    }

    var _equalObjects = equalObjects;

    /* Built-in method references that are verified to be native. */
    var DataView = _getNative(_root, 'DataView');

    var _DataView = DataView;

    /* Built-in method references that are verified to be native. */
    var Promise = _getNative(_root, 'Promise');

    var _Promise = Promise;

    /* Built-in method references that are verified to be native. */
    var Set$1 = _getNative(_root, 'Set');

    var _Set = Set$1;

    /* Built-in method references that are verified to be native. */
    var WeakMap = _getNative(_root, 'WeakMap');

    var _WeakMap = WeakMap;

    /** `Object#toString` result references. */
    var mapTag$2 = '[object Map]',
        objectTag$1 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$2 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$2 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = _toSource(_DataView),
        mapCtorString = _toSource(_Map),
        promiseCtorString = _toSource(_Promise),
        setCtorString = _toSource(_Set),
        weakMapCtorString = _toSource(_WeakMap);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = _baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
        (_Map && getTag(new _Map) != mapTag$2) ||
        (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
        (_Set && getTag(new _Set) != setTag$2) ||
        (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
        getTag = function(value) {
            var result = _baseGetTag(value),
                Ctor = result == objectTag$1 ? value.constructor : undefined,
                ctorString = Ctor ? _toSource(Ctor) : '';

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString: return dataViewTag$2;
                    case mapCtorString: return mapTag$2;
                    case promiseCtorString: return promiseTag;
                    case setCtorString: return setTag$2;
                    case weakMapCtorString: return weakMapTag$1;
                }
            }
            return result;
        };
    }

    var _getTag = getTag;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        objectTag$2 = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$b.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray_1(object),
            othIsArr = isArray_1(other),
            objTag = objIsArr ? arrayTag$1 : _getTag(object),
            othTag = othIsArr ? arrayTag$1 : _getTag(other);

        objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
        othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

        var objIsObj = objTag == objectTag$2,
            othIsObj = othTag == objectTag$2,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer_1(object)) {
            if (!isBuffer_1(other)) {
                return false;
            }
            objIsArr = true;
            objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
            stack || (stack = new _Stack);
            return (objIsArr || isTypedArray_1(object))
                ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
            var objIsWrapped = objIsObj && hasOwnProperty$8.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty$8.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                stack || (stack = new _Stack);
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
        }
        if (!isSameTag) {
            return false;
        }
        stack || (stack = new _Stack);
        return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep = baseIsEqualDeep;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
            return true;
        }
        if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
            return value !== value && other !== other;
        }
        return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    var _baseIsEqual = baseIsEqual;

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
        return _baseIsEqual(value, other);
    }

    var isEqual_1 = isEqual;

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }

    var _basePropertyOf = basePropertyOf;

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    };

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = _basePropertyOf(htmlEscapes);

    var _escapeHtmlChar = escapeHtmlChar;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iteratee(array[index], index, array);
        }
        return result;
    }

    var _arrayMap = arrayMap;

    /** `Object#toString` result references. */
    var symbolTag$1 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
        return typeof value == 'symbol' ||
            (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$1);
    }

    var isSymbol_1 = isSymbol;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
        symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
            return value;
        }
        if (isArray_1(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return _arrayMap(value, baseToString) + '';
        }
        if (isSymbol_1(value)) {
            return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    var _baseToString = baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
        return value == null ? '' : _baseToString(value);
    }

    var toString_1 = toString;

    /** Used to match HTML entities and HTML characters. */
    var reUnescapedHtml = /[&<>"']/g,
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
        string = toString_1(string);
        return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, _escapeHtmlChar)
            : string;
    }

    var _escape = escape;

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
    };

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = _basePropertyOf(htmlUnescapes);

    var _unescapeHtmlChar = unescapeHtmlChar;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source);

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
        string = toString_1(string);
        return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, _unescapeHtmlChar)
            : string;
    }

    var _unescape = unescape;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }
        return array;
    }

    var _arrayEach = arrayEach;

    var defineProperty = (function() {
        try {
            var func = _getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
        } catch (e) {}
    }());

    var _defineProperty = defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
        if (key == '__proto__' && _defineProperty) {
            _defineProperty(object, key, {
                'configurable': true,
                'enumerable': true,
                'value': value,
                'writable': true
            });
        } else {
            object[key] = value;
        }
    }

    var _baseAssignValue = baseAssignValue;

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$c.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty$9.call(object, key) && eq_1(objValue, value)) ||
            (value === undefined && !(key in object))) {
            _baseAssignValue(object, key, value);
        }
    }

    var _assignValue = assignValue;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
            var key = props[index];

            var newValue = customizer
                ? customizer(object[key], source[key], key, object, source)
                : undefined;

            if (newValue === undefined) {
                newValue = source[key];
            }
            if (isNew) {
                _baseAssignValue(object, key, newValue);
            } else {
                _assignValue(object, key, newValue);
            }
        }
        return object;
    }

    var _copyObject = copyObject;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
        return object && _copyObject(source, keys_1(source), object);
    }

    var _baseAssign = baseAssign;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
            for (var key in Object(object)) {
                result.push(key);
            }
        }
        return result;
    }

    var _nativeKeysIn = nativeKeysIn;

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$d.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
        if (!isObject_1(object)) {
            return _nativeKeysIn(object);
        }
        var isProto = _isPrototype(object),
            result = [];

        for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty$a.call(object, key)))) {
                result.push(key);
            }
        }
        return result;
    }

    var _baseKeysIn = baseKeysIn;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
        return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
    }

    var keysIn_1 = keysIn;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
        return object && _copyObject(source, keysIn_1(source), object);
    }

    var _baseAssignIn = baseAssignIn;

    var _cloneBuffer = createCommonjsModule(function (module, exports) {
        /** Detect free variable `exports`. */
        var freeExports =  exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? _root.Buffer : undefined,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
                return buffer.slice();
            }
            var length = buffer.length,
                result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

            buffer.copy(result);
            return result;
        }

        module.exports = cloneBuffer;
    });

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
            array[index] = source[index];
        }
        return array;
    }

    var _copyArray = copyArray;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
        return _copyObject(source, _getSymbols(source), object);
    }

    var _copySymbols = copySymbols;

    /** Built-in value references. */
    var getPrototype = _overArg(Object.getPrototypeOf, Object);

    var _getPrototype = getPrototype;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
        var result = [];
        while (object) {
            _arrayPush(result, _getSymbols(object));
            object = _getPrototype(object);
        }
        return result;
    };

    var _getSymbolsIn = getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
        return _copyObject(source, _getSymbolsIn(source), object);
    }

    var _copySymbolsIn = copySymbolsIn;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
        return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
    }

    var _getAllKeysIn = getAllKeysIn;

    /** Used for built-in method references. */
    var objectProto$e = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$e.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty$b.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
        }
        return result;
    }

    var _initCloneArray = initCloneArray;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
        return result;
    }

    var _cloneArrayBuffer = cloneArrayBuffer;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView = cloneDataView;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
    }

    var _cloneRegExp = cloneRegExp;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
        return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    var _cloneSymbol = cloneSymbol;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray = cloneTypedArray;

    /** `Object#toString` result references. */
    var boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        mapTag$3 = '[object Map]',
        numberTag$2 = '[object Number]',
        regexpTag$2 = '[object RegExp]',
        setTag$3 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$2 = '[object Symbol]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$3 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
            case arrayBufferTag$2:
                return _cloneArrayBuffer(object);

            case boolTag$2:
            case dateTag$2:
                return new Ctor(+object);

            case dataViewTag$3:
                return _cloneDataView(object, isDeep);

            case float32Tag$1: case float64Tag$1:
            case int8Tag$1: case int16Tag$1: case int32Tag$1:
            case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
                return _cloneTypedArray(object, isDeep);

            case mapTag$3:
                return new Ctor;

            case numberTag$2:
            case stringTag$2:
                return new Ctor(object);

            case regexpTag$2:
                return _cloneRegExp(object);

            case setTag$3:
                return new Ctor;

            case symbolTag$2:
                return _cloneSymbol(object);
        }
    }

    var _initCloneByTag = initCloneByTag;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
        function object() {}
        return function(proto) {
            if (!isObject_1(proto)) {
                return {};
            }
            if (objectCreate) {
                return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined;
            return result;
        };
    }());

    var _baseCreate = baseCreate;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !_isPrototype(object))
            ? _baseCreate(_getPrototype(object))
            : {};
    }

    var _initCloneObject = initCloneObject;

    /** `Object#toString` result references. */
    var mapTag$4 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
        return isObjectLike_1(value) && _getTag(value) == mapTag$4;
    }

    var _baseIsMap = baseIsMap;

    /* Node.js helper references. */
    var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

    var isMap_1 = isMap;

    /** `Object#toString` result references. */
    var setTag$4 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
        return isObjectLike_1(value) && _getTag(value) == setTag$4;
    }

    var _baseIsSet = baseIsSet;

    /* Node.js helper references. */
    var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

    var isSet_1 = isSet;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        mapTag$5 = '[object Map]',
        numberTag$3 = '[object Number]',
        objectTag$3 = '[object Object]',
        regexpTag$3 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$3 = '[object Symbol]',
        weakMapTag$2 = '[object WeakMap]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] =
        cloneableTags[arrayBufferTag$3] = cloneableTags[dataViewTag$4] =
            cloneableTags[boolTag$3] = cloneableTags[dateTag$3] =
                cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
                    cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
                        cloneableTags[int32Tag$2] = cloneableTags[mapTag$5] =
                            cloneableTags[numberTag$3] = cloneableTags[objectTag$3] =
                                cloneableTags[regexpTag$3] = cloneableTags[setTag$5] =
                                    cloneableTags[stringTag$3] = cloneableTags[symbolTag$3] =
                                        cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
                                            cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
    cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
        cloneableTags[weakMapTag$2] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined) {
            return result;
        }
        if (!isObject_1(value)) {
            return value;
        }
        var isArr = isArray_1(value);
        if (isArr) {
            result = _initCloneArray(value);
            if (!isDeep) {
                return _copyArray(value, result);
            }
        } else {
            var tag = _getTag(value),
                isFunc = tag == funcTag$2 || tag == genTag$1;

            if (isBuffer_1(value)) {
                return _cloneBuffer(value, isDeep);
            }
            if (tag == objectTag$3 || tag == argsTag$3 || (isFunc && !object)) {
                result = (isFlat || isFunc) ? {} : _initCloneObject(value);
                if (!isDeep) {
                    return isFlat
                        ? _copySymbolsIn(value, _baseAssignIn(result, value))
                        : _copySymbols(value, _baseAssign(result, value));
                }
            } else {
                if (!cloneableTags[tag]) {
                    return object ? value : {};
                }
                result = _initCloneByTag(value, tag, isDeep);
            }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new _Stack);
        var stacked = stack.get(value);
        if (stacked) {
            return stacked;
        }
        stack.set(value, result);

        if (isSet_1(value)) {
            value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
        } else if (isMap_1(value)) {
            value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
        }

        var keysFunc = isFull
            ? (isFlat ? _getAllKeysIn : _getAllKeys)
            : (isFlat ? keysIn_1 : keys_1);

        var props = isArr ? undefined : keysFunc(value);
        _arrayEach(props || value, function(subValue, key) {
            if (props) {
                key = subValue;
                subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
    }

    var _baseClone = baseClone;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1,
        CLONE_SYMBOLS_FLAG$1 = 4;

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
        return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
    }

    var cloneDeep_1 = cloneDeep;

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function uniqueValues(array) {
        return Array.from(new Set(array));
    }
    function isArray$1(input) {
        return Array.isArray(input);
    }
    function arrayIntersection(array1, array2) {
        var a = array1 || [];
        var b = array2 || [];
        return a.filter(function (x) { return b.includes(x); });
    }
    function createRange(from, to) {
        var range = [];
        for (var i = from; i < to; i++) {
            range.push(i);
        }
        return range;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function isNullOrUndefined(object) {
        return object === null || object === undefined;
    }
    function isNullOrUndefinedOrEmpty(object) {
        return object === null || object === undefined || object === '';
    }
    function isNotNullOrUndefined(object) {
        return !isNullOrUndefined(object);
    }
    function escapeHtml(value) {
        var unescaped = unescapeHtml(value);
        return ((typeof unescaped === 'number' ? unescaped : isNotNullOrUndefined(unescaped) ? _escape(String(unescaped)) : null));
    }
    function unescapeHtml(value) {
        return (typeof value === 'number' ? value : isNotNullOrUndefined(value) ? _unescape(String(value)) : null);
    }
    function objectValues(object) {
        // Object.values is not supported in older version of js
        return Object.keys(object || {}).map(function (key) { return object[key]; });
    }
    function isObject$1(value) {
        return value !== null && typeof value === 'object';
    }
    function deepObjectCopy(object) {
        return cloneDeep_1(object);
    }
    function deepObjectsEquals(object1, object2) {
        return isEqual_1(removeUndefinedProperties(object1), removeUndefinedProperties(object2));
    }
    function removeUndefinedProperties(value) {
        if (isNullOrUndefined(value)) {
            return value;
        }
        if (isArray$1(value)) {
            return removeUndefinedPropertiesFromArray(value);
        }
        else if (isObject$1(value)) {
            return removeUndefinedPropertiesFromObject(value);
        }
        return value;
    }
    function removeUndefinedPropertiesFromArray(array) {
        var returnArray = [];
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var element = array_1[_i];
            if (isNullOrUndefined(element)) {
                continue;
            }
            if (isArray$1(element)) {
                returnArray.push(removeUndefinedPropertiesFromArray(element));
            }
            else if (isObject$1(element)) {
                returnArray.push(removeUndefinedPropertiesFromObject(element));
            }
            else {
                returnArray.push(element);
            }
        }
        return returnArray;
    }
    function removeUndefinedPropertiesFromObject(object) {
        var returnObj = {};
        Object.keys(object).forEach(function (key) {
            var val = object[key];
            if (isNotNullOrUndefined(val)) {
                if (isArray$1(val)) {
                    returnObj[key] = removeUndefinedPropertiesFromArray(val);
                }
                else if (isObject$1(val)) {
                    returnObj[key] = removeUndefinedPropertiesFromObject(val);
                }
                else {
                    returnObj[key] = val;
                }
            }
        });
        return returnObj;
    }
    function objectsByIdMap(objects) {
        return (objects || []).reduce(function (map, object) {
            var _a;
            return (__assign(__assign({}, map), (_a = {}, _a[object.id] = object, _a)));
        }, {});
    }

    var unorm = createCommonjsModule(function (module) {
        (function (root) {

            /***** unorm.js *****/

            /*
     * UnicodeNormalizer 1.0.0
     * Copyright (c) 2008 Matsuza
     * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
     * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
     * $Rev: 13309 $
     */

            var DEFAULT_FEATURE = [null, 0, {}];
            var CACHE_THRESHOLD = 10;
            var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
            var NCount = VCount * TCount; // 588
            var SCount = LCount * NCount; // 11172

            var UChar = function(cp, feature){
                this.codepoint = cp;
                this.feature = feature;
            };

            // Strategies
            var cache = {};
            var cacheCounter = [];
            for (var i = 0; i <= 0xFF; ++i){
                cacheCounter[i] = 0;
            }

            function fromCache(next, cp, needFeature){
                var ret = cache[cp];
                if(!ret){
                    ret = next(cp, needFeature);
                    if(!!ret.feature && ++cacheCounter[(cp >> 8) & 0xFF] > CACHE_THRESHOLD){
                        cache[cp] = ret;
                    }
                }
                return ret;
            }

            function fromData(next, cp, needFeature){
                var hash = cp & 0xFF00;
                var dunit = UChar.udata[hash] || {};
                var f = dunit[cp];
                return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
            }
            function fromCpOnly(next, cp, needFeature){
                return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
            }
            function fromRuleBasedJamo(next, cp, needFeature){
                var j;
                if(cp < LBase || (LBase + LCount <= cp && cp < SBase) || (SBase + SCount < cp)){
                    return next(cp, needFeature);
                }
                if(LBase <= cp && cp < LBase + LCount){
                    var c = {};
                    var base = (cp - LBase) * VCount;
                    for (j = 0; j < VCount; ++j){
                        c[VBase + j] = SBase + TCount * (j + base);
                    }
                    return new UChar(cp, [,,c]);
                }

                var SIndex = cp - SBase;
                var TIndex = SIndex % TCount;
                var feature = [];
                if(TIndex !== 0){
                    feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];
                } else {
                    feature[0] = [LBase + Math.floor(SIndex / NCount), VBase + Math.floor((SIndex % NCount) / TCount)];
                    feature[2] = {};
                    for (j = 1; j < TCount; ++j){
                        feature[2][TBase + j] = cp + j;
                    }
                }
                return new UChar(cp, feature);
            }
            function fromCpFilter(next, cp, needFeature){
                return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
            }

            var strategies = [fromCpFilter, fromCache, fromCpOnly, fromRuleBasedJamo, fromData];

            UChar.fromCharCode = strategies.reduceRight(function (next, strategy) {
                return function (cp, needFeature) {
                    return strategy(next, cp, needFeature);
                };
            }, null);

            UChar.isHighSurrogate = function(cp){
                return cp >= 0xD800 && cp <= 0xDBFF;
            };
            UChar.isLowSurrogate = function(cp){
                return cp >= 0xDC00 && cp <= 0xDFFF;
            };

            UChar.prototype.prepFeature = function(){
                if(!this.feature){
                    this.feature = UChar.fromCharCode(this.codepoint, true).feature;
                }
            };

            UChar.prototype.toString = function(){
                if(this.codepoint < 0x10000){
                    return String.fromCharCode(this.codepoint);
                } else {
                    var x = this.codepoint - 0x10000;
                    return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
                }
            };

            UChar.prototype.getDecomp = function(){
                this.prepFeature();
                return this.feature[0] || null;
            };

            UChar.prototype.isCompatibility = function(){
                this.prepFeature();
                return !!this.feature[1] && (this.feature[1] & (1 << 8));
            };
            UChar.prototype.isExclude = function(){
                this.prepFeature();
                return !!this.feature[1] && (this.feature[1] & (1 << 9));
            };
            UChar.prototype.getCanonicalClass = function(){
                this.prepFeature();
                return !!this.feature[1] ? (this.feature[1] & 0xff) : 0;
            };
            UChar.prototype.getComposite = function(following){
                this.prepFeature();
                if(!this.feature[2]){
                    return null;
                }
                var cp = this.feature[2][following.codepoint];
                return cp ? UChar.fromCharCode(cp) : null;
            };

            var UCharIterator = function(str){
                this.str = str;
                this.cursor = 0;
            };
            UCharIterator.prototype.next = function(){
                if(!!this.str && this.cursor < this.str.length){
                    var cp = this.str.charCodeAt(this.cursor++);
                    var d;
                    if(UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate((d = this.str.charCodeAt(this.cursor)))){
                        cp = (cp - 0xD800) * 0x400 + (d -0xDC00) + 0x10000;
                        ++this.cursor;
                    }
                    return UChar.fromCharCode(cp);
                } else {
                    this.str = null;
                    return null;
                }
            };

            var RecursDecompIterator = function(it, cano){
                this.it = it;
                this.canonical = cano;
                this.resBuf = [];
            };

            RecursDecompIterator.prototype.next = function(){
                function recursiveDecomp(cano, uchar){
                    var decomp = uchar.getDecomp();
                    if(!!decomp && !(cano && uchar.isCompatibility())){
                        var ret = [];
                        for(var i = 0; i < decomp.length; ++i){
                            var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
                            ret = ret.concat(a);
                        }
                        return ret;
                    } else {
                        return [uchar];
                    }
                }
                if(this.resBuf.length === 0){
                    var uchar = this.it.next();
                    if(!uchar){
                        return null;
                    }
                    this.resBuf = recursiveDecomp(this.canonical, uchar);
                }
                return this.resBuf.shift();
            };

            var DecompIterator = function(it){
                this.it = it;
                this.resBuf = [];
            };

            DecompIterator.prototype.next = function(){
                var cc;
                if(this.resBuf.length === 0){
                    do{
                        var uchar = this.it.next();
                        if(!uchar){
                            break;
                        }
                        cc = uchar.getCanonicalClass();
                        var inspt = this.resBuf.length;
                        if(cc !== 0){
                            for(; inspt > 0; --inspt){
                                var uchar2 = this.resBuf[inspt - 1];
                                var cc2 = uchar2.getCanonicalClass();
                                if(cc2 <= cc){
                                    break;
                                }
                            }
                        }
                        this.resBuf.splice(inspt, 0, uchar);
                    } while(cc !== 0);
                }
                return this.resBuf.shift();
            };

            var CompIterator = function(it){
                this.it = it;
                this.procBuf = [];
                this.resBuf = [];
                this.lastClass = null;
            };

            CompIterator.prototype.next = function(){
                while(this.resBuf.length === 0){
                    var uchar = this.it.next();
                    if(!uchar){
                        this.resBuf = this.procBuf;
                        this.procBuf = [];
                        break;
                    }
                    if(this.procBuf.length === 0){
                        this.lastClass = uchar.getCanonicalClass();
                        this.procBuf.push(uchar);
                    } else {
                        var starter = this.procBuf[0];
                        var composite = starter.getComposite(uchar);
                        var cc = uchar.getCanonicalClass();
                        if(!!composite && (this.lastClass < cc || this.lastClass === 0)){
                            this.procBuf[0] = composite;
                        } else {
                            if(cc === 0){
                                this.resBuf = this.procBuf;
                                this.procBuf = [];
                            }
                            this.lastClass = cc;
                            this.procBuf.push(uchar);
                        }
                    }
                }
                return this.resBuf.shift();
            };

            var createIterator = function(mode, str){
                switch(mode){
                    case "NFD":
                        return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
                    case "NFKD":
                        return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
                    case "NFC":
                        return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
                    case "NFKC":
                        return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
                }
                throw mode + " is invalid";
            };
            var normalize = function(mode, str){
                var it = createIterator(mode, str);
                var ret = "";
                var uchar;
                while(!!(uchar = it.next())){
                    ret += uchar.toString();
                }
                return ret;
            };

            /* API functions */
            function nfd(str){
                return normalize("NFD", str);
            }

            function nfkd(str){
                return normalize("NFKD", str);
            }

            function nfc(str){
                return normalize("NFC", str);
            }

            function nfkc(str){
                return normalize("NFKC", str);
            }

            /* Unicode data */
            UChar.udata={
                0:{60:[,,{824:8814}],61:[,,{824:8800}],62:[,,{824:8815}],65:[,,{768:192,769:193,770:194,771:195,772:256,774:258,775:550,776:196,777:7842,778:197,780:461,783:512,785:514,803:7840,805:7680,808:260}],66:[,,{775:7682,803:7684,817:7686}],67:[,,{769:262,770:264,775:266,780:268,807:199}],68:[,,{775:7690,780:270,803:7692,807:7696,813:7698,817:7694}],69:[,,{768:200,769:201,770:202,771:7868,772:274,774:276,775:278,776:203,777:7866,780:282,783:516,785:518,803:7864,807:552,808:280,813:7704,816:7706}],70:[,,{775:7710}],71:[,,{769:500,770:284,772:7712,774:286,775:288,780:486,807:290}],72:[,,{770:292,775:7714,776:7718,780:542,803:7716,807:7720,814:7722}],73:[,,{768:204,769:205,770:206,771:296,772:298,774:300,775:304,776:207,777:7880,780:463,783:520,785:522,803:7882,808:302,816:7724}],74:[,,{770:308}],75:[,,{769:7728,780:488,803:7730,807:310,817:7732}],76:[,,{769:313,780:317,803:7734,807:315,813:7740,817:7738}],77:[,,{769:7742,775:7744,803:7746}],78:[,,{768:504,769:323,771:209,775:7748,780:327,803:7750,807:325,813:7754,817:7752}],79:[,,{768:210,769:211,770:212,771:213,772:332,774:334,775:558,776:214,777:7886,779:336,780:465,783:524,785:526,795:416,803:7884,808:490}],80:[,,{769:7764,775:7766}],82:[,,{769:340,775:7768,780:344,783:528,785:530,803:7770,807:342,817:7774}],83:[,,{769:346,770:348,775:7776,780:352,803:7778,806:536,807:350}],84:[,,{775:7786,780:356,803:7788,806:538,807:354,813:7792,817:7790}],85:[,,{768:217,769:218,770:219,771:360,772:362,774:364,776:220,777:7910,778:366,779:368,780:467,783:532,785:534,795:431,803:7908,804:7794,808:370,813:7798,816:7796}],86:[,,{771:7804,803:7806}],87:[,,{768:7808,769:7810,770:372,775:7814,776:7812,803:7816}],88:[,,{775:7818,776:7820}],89:[,,{768:7922,769:221,770:374,771:7928,772:562,775:7822,776:376,777:7926,803:7924}],90:[,,{769:377,770:7824,775:379,780:381,803:7826,817:7828}],97:[,,{768:224,769:225,770:226,771:227,772:257,774:259,775:551,776:228,777:7843,778:229,780:462,783:513,785:515,803:7841,805:7681,808:261}],98:[,,{775:7683,803:7685,817:7687}],99:[,,{769:263,770:265,775:267,780:269,807:231}],100:[,,{775:7691,780:271,803:7693,807:7697,813:7699,817:7695}],101:[,,{768:232,769:233,770:234,771:7869,772:275,774:277,775:279,776:235,777:7867,780:283,783:517,785:519,803:7865,807:553,808:281,813:7705,816:7707}],102:[,,{775:7711}],103:[,,{769:501,770:285,772:7713,774:287,775:289,780:487,807:291}],104:[,,{770:293,775:7715,776:7719,780:543,803:7717,807:7721,814:7723,817:7830}],105:[,,{768:236,769:237,770:238,771:297,772:299,774:301,776:239,777:7881,780:464,783:521,785:523,803:7883,808:303,816:7725}],106:[,,{770:309,780:496}],107:[,,{769:7729,780:489,803:7731,807:311,817:7733}],108:[,,{769:314,780:318,803:7735,807:316,813:7741,817:7739}],109:[,,{769:7743,775:7745,803:7747}],110:[,,{768:505,769:324,771:241,775:7749,780:328,803:7751,807:326,813:7755,817:7753}],111:[,,{768:242,769:243,770:244,771:245,772:333,774:335,775:559,776:246,777:7887,779:337,780:466,783:525,785:527,795:417,803:7885,808:491}],112:[,,{769:7765,775:7767}],114:[,,{769:341,775:7769,780:345,783:529,785:531,803:7771,807:343,817:7775}],115:[,,{769:347,770:349,775:7777,780:353,803:7779,806:537,807:351}],116:[,,{775:7787,776:7831,780:357,803:7789,806:539,807:355,813:7793,817:7791}],117:[,,{768:249,769:250,770:251,771:361,772:363,774:365,776:252,777:7911,778:367,779:369,780:468,783:533,785:535,795:432,803:7909,804:7795,808:371,813:7799,816:7797}],118:[,,{771:7805,803:7807}],119:[,,{768:7809,769:7811,770:373,775:7815,776:7813,778:7832,803:7817}],120:[,,{775:7819,776:7821}],121:[,,{768:7923,769:253,770:375,771:7929,772:563,775:7823,776:255,777:7927,778:7833,803:7925}],122:[,,{769:378,770:7825,775:380,780:382,803:7827,817:7829}],160:[[32],256],168:[[32,776],256,{768:8173,769:901,834:8129}],170:[[97],256],175:[[32,772],256],178:[[50],256],179:[[51],256],180:[[32,769],256],181:[[956],256],184:[[32,807],256],185:[[49],256],186:[[111],256],188:[[49,8260,52],256],189:[[49,8260,50],256],190:[[51,8260,52],256],192:[[65,768]],193:[[65,769]],194:[[65,770],,{768:7846,769:7844,771:7850,777:7848}],195:[[65,771]],196:[[65,776],,{772:478}],197:[[65,778],,{769:506}],198:[,,{769:508,772:482}],199:[[67,807],,{769:7688}],200:[[69,768]],201:[[69,769]],202:[[69,770],,{768:7872,769:7870,771:7876,777:7874}],203:[[69,776]],204:[[73,768]],205:[[73,769]],206:[[73,770]],207:[[73,776],,{769:7726}],209:[[78,771]],210:[[79,768]],211:[[79,769]],212:[[79,770],,{768:7890,769:7888,771:7894,777:7892}],213:[[79,771],,{769:7756,772:556,776:7758}],214:[[79,776],,{772:554}],216:[,,{769:510}],217:[[85,768]],218:[[85,769]],219:[[85,770]],220:[[85,776],,{768:475,769:471,772:469,780:473}],221:[[89,769]],224:[[97,768]],225:[[97,769]],226:[[97,770],,{768:7847,769:7845,771:7851,777:7849}],227:[[97,771]],228:[[97,776],,{772:479}],229:[[97,778],,{769:507}],230:[,,{769:509,772:483}],231:[[99,807],,{769:7689}],232:[[101,768]],233:[[101,769]],234:[[101,770],,{768:7873,769:7871,771:7877,777:7875}],235:[[101,776]],236:[[105,768]],237:[[105,769]],238:[[105,770]],239:[[105,776],,{769:7727}],241:[[110,771]],242:[[111,768]],243:[[111,769]],244:[[111,770],,{768:7891,769:7889,771:7895,777:7893}],245:[[111,771],,{769:7757,772:557,776:7759}],246:[[111,776],,{772:555}],248:[,,{769:511}],249:[[117,768]],250:[[117,769]],251:[[117,770]],252:[[117,776],,{768:476,769:472,772:470,780:474}],253:[[121,769]],255:[[121,776]]},
                256:{256:[[65,772]],257:[[97,772]],258:[[65,774],,{768:7856,769:7854,771:7860,777:7858}],259:[[97,774],,{768:7857,769:7855,771:7861,777:7859}],260:[[65,808]],261:[[97,808]],262:[[67,769]],263:[[99,769]],264:[[67,770]],265:[[99,770]],266:[[67,775]],267:[[99,775]],268:[[67,780]],269:[[99,780]],270:[[68,780]],271:[[100,780]],274:[[69,772],,{768:7700,769:7702}],275:[[101,772],,{768:7701,769:7703}],276:[[69,774]],277:[[101,774]],278:[[69,775]],279:[[101,775]],280:[[69,808]],281:[[101,808]],282:[[69,780]],283:[[101,780]],284:[[71,770]],285:[[103,770]],286:[[71,774]],287:[[103,774]],288:[[71,775]],289:[[103,775]],290:[[71,807]],291:[[103,807]],292:[[72,770]],293:[[104,770]],296:[[73,771]],297:[[105,771]],298:[[73,772]],299:[[105,772]],300:[[73,774]],301:[[105,774]],302:[[73,808]],303:[[105,808]],304:[[73,775]],306:[[73,74],256],307:[[105,106],256],308:[[74,770]],309:[[106,770]],310:[[75,807]],311:[[107,807]],313:[[76,769]],314:[[108,769]],315:[[76,807]],316:[[108,807]],317:[[76,780]],318:[[108,780]],319:[[76,183],256],320:[[108,183],256],323:[[78,769]],324:[[110,769]],325:[[78,807]],326:[[110,807]],327:[[78,780]],328:[[110,780]],329:[[700,110],256],332:[[79,772],,{768:7760,769:7762}],333:[[111,772],,{768:7761,769:7763}],334:[[79,774]],335:[[111,774]],336:[[79,779]],337:[[111,779]],340:[[82,769]],341:[[114,769]],342:[[82,807]],343:[[114,807]],344:[[82,780]],345:[[114,780]],346:[[83,769],,{775:7780}],347:[[115,769],,{775:7781}],348:[[83,770]],349:[[115,770]],350:[[83,807]],351:[[115,807]],352:[[83,780],,{775:7782}],353:[[115,780],,{775:7783}],354:[[84,807]],355:[[116,807]],356:[[84,780]],357:[[116,780]],360:[[85,771],,{769:7800}],361:[[117,771],,{769:7801}],362:[[85,772],,{776:7802}],363:[[117,772],,{776:7803}],364:[[85,774]],365:[[117,774]],366:[[85,778]],367:[[117,778]],368:[[85,779]],369:[[117,779]],370:[[85,808]],371:[[117,808]],372:[[87,770]],373:[[119,770]],374:[[89,770]],375:[[121,770]],376:[[89,776]],377:[[90,769]],378:[[122,769]],379:[[90,775]],380:[[122,775]],381:[[90,780]],382:[[122,780]],383:[[115],256,{775:7835}],416:[[79,795],,{768:7900,769:7898,771:7904,777:7902,803:7906}],417:[[111,795],,{768:7901,769:7899,771:7905,777:7903,803:7907}],431:[[85,795],,{768:7914,769:7912,771:7918,777:7916,803:7920}],432:[[117,795],,{768:7915,769:7913,771:7919,777:7917,803:7921}],439:[,,{780:494}],452:[[68,381],256],453:[[68,382],256],454:[[100,382],256],455:[[76,74],256],456:[[76,106],256],457:[[108,106],256],458:[[78,74],256],459:[[78,106],256],460:[[110,106],256],461:[[65,780]],462:[[97,780]],463:[[73,780]],464:[[105,780]],465:[[79,780]],466:[[111,780]],467:[[85,780]],468:[[117,780]],469:[[220,772]],470:[[252,772]],471:[[220,769]],472:[[252,769]],473:[[220,780]],474:[[252,780]],475:[[220,768]],476:[[252,768]],478:[[196,772]],479:[[228,772]],480:[[550,772]],481:[[551,772]],482:[[198,772]],483:[[230,772]],486:[[71,780]],487:[[103,780]],488:[[75,780]],489:[[107,780]],490:[[79,808],,{772:492}],491:[[111,808],,{772:493}],492:[[490,772]],493:[[491,772]],494:[[439,780]],495:[[658,780]],496:[[106,780]],497:[[68,90],256],498:[[68,122],256],499:[[100,122],256],500:[[71,769]],501:[[103,769]],504:[[78,768]],505:[[110,768]],506:[[197,769]],507:[[229,769]],508:[[198,769]],509:[[230,769]],510:[[216,769]],511:[[248,769]],66045:[,220]},
                512:{512:[[65,783]],513:[[97,783]],514:[[65,785]],515:[[97,785]],516:[[69,783]],517:[[101,783]],518:[[69,785]],519:[[101,785]],520:[[73,783]],521:[[105,783]],522:[[73,785]],523:[[105,785]],524:[[79,783]],525:[[111,783]],526:[[79,785]],527:[[111,785]],528:[[82,783]],529:[[114,783]],530:[[82,785]],531:[[114,785]],532:[[85,783]],533:[[117,783]],534:[[85,785]],535:[[117,785]],536:[[83,806]],537:[[115,806]],538:[[84,806]],539:[[116,806]],542:[[72,780]],543:[[104,780]],550:[[65,775],,{772:480}],551:[[97,775],,{772:481}],552:[[69,807],,{774:7708}],553:[[101,807],,{774:7709}],554:[[214,772]],555:[[246,772]],556:[[213,772]],557:[[245,772]],558:[[79,775],,{772:560}],559:[[111,775],,{772:561}],560:[[558,772]],561:[[559,772]],562:[[89,772]],563:[[121,772]],658:[,,{780:495}],688:[[104],256],689:[[614],256],690:[[106],256],691:[[114],256],692:[[633],256],693:[[635],256],694:[[641],256],695:[[119],256],696:[[121],256],728:[[32,774],256],729:[[32,775],256],730:[[32,778],256],731:[[32,808],256],732:[[32,771],256],733:[[32,779],256],736:[[611],256],737:[[108],256],738:[[115],256],739:[[120],256],740:[[661],256],66272:[,220]},
                768:{768:[,230],769:[,230],770:[,230],771:[,230],772:[,230],773:[,230],774:[,230],775:[,230],776:[,230,{769:836}],777:[,230],778:[,230],779:[,230],780:[,230],781:[,230],782:[,230],783:[,230],784:[,230],785:[,230],786:[,230],787:[,230],788:[,230],789:[,232],790:[,220],791:[,220],792:[,220],793:[,220],794:[,232],795:[,216],796:[,220],797:[,220],798:[,220],799:[,220],800:[,220],801:[,202],802:[,202],803:[,220],804:[,220],805:[,220],806:[,220],807:[,202],808:[,202],809:[,220],810:[,220],811:[,220],812:[,220],813:[,220],814:[,220],815:[,220],816:[,220],817:[,220],818:[,220],819:[,220],820:[,1],821:[,1],822:[,1],823:[,1],824:[,1],825:[,220],826:[,220],827:[,220],828:[,220],829:[,230],830:[,230],831:[,230],832:[[768],230],833:[[769],230],834:[,230],835:[[787],230],836:[[776,769],230],837:[,240],838:[,230],839:[,220],840:[,220],841:[,220],842:[,230],843:[,230],844:[,230],845:[,220],846:[,220],848:[,230],849:[,230],850:[,230],851:[,220],852:[,220],853:[,220],854:[,220],855:[,230],856:[,232],857:[,220],858:[,220],859:[,230],860:[,233],861:[,234],862:[,234],863:[,233],864:[,234],865:[,234],866:[,233],867:[,230],868:[,230],869:[,230],870:[,230],871:[,230],872:[,230],873:[,230],874:[,230],875:[,230],876:[,230],877:[,230],878:[,230],879:[,230],884:[[697]],890:[[32,837],256],894:[[59]],900:[[32,769],256],901:[[168,769]],902:[[913,769]],903:[[183]],904:[[917,769]],905:[[919,769]],906:[[921,769]],908:[[927,769]],910:[[933,769]],911:[[937,769]],912:[[970,769]],913:[,,{768:8122,769:902,772:8121,774:8120,787:7944,788:7945,837:8124}],917:[,,{768:8136,769:904,787:7960,788:7961}],919:[,,{768:8138,769:905,787:7976,788:7977,837:8140}],921:[,,{768:8154,769:906,772:8153,774:8152,776:938,787:7992,788:7993}],927:[,,{768:8184,769:908,787:8008,788:8009}],929:[,,{788:8172}],933:[,,{768:8170,769:910,772:8169,774:8168,776:939,788:8025}],937:[,,{768:8186,769:911,787:8040,788:8041,837:8188}],938:[[921,776]],939:[[933,776]],940:[[945,769],,{837:8116}],941:[[949,769]],942:[[951,769],,{837:8132}],943:[[953,769]],944:[[971,769]],945:[,,{768:8048,769:940,772:8113,774:8112,787:7936,788:7937,834:8118,837:8115}],949:[,,{768:8050,769:941,787:7952,788:7953}],951:[,,{768:8052,769:942,787:7968,788:7969,834:8134,837:8131}],953:[,,{768:8054,769:943,772:8145,774:8144,776:970,787:7984,788:7985,834:8150}],959:[,,{768:8056,769:972,787:8000,788:8001}],961:[,,{787:8164,788:8165}],965:[,,{768:8058,769:973,772:8161,774:8160,776:971,787:8016,788:8017,834:8166}],969:[,,{768:8060,769:974,787:8032,788:8033,834:8182,837:8179}],970:[[953,776],,{768:8146,769:912,834:8151}],971:[[965,776],,{768:8162,769:944,834:8167}],972:[[959,769]],973:[[965,769]],974:[[969,769],,{837:8180}],976:[[946],256],977:[[952],256],978:[[933],256,{769:979,776:980}],979:[[978,769]],980:[[978,776]],981:[[966],256],982:[[960],256],1008:[[954],256],1009:[[961],256],1010:[[962],256],1012:[[920],256],1013:[[949],256],1017:[[931],256],66422:[,230],66423:[,230],66424:[,230],66425:[,230],66426:[,230]},
                1024:{1024:[[1045,768]],1025:[[1045,776]],1027:[[1043,769]],1030:[,,{776:1031}],1031:[[1030,776]],1036:[[1050,769]],1037:[[1048,768]],1038:[[1059,774]],1040:[,,{774:1232,776:1234}],1043:[,,{769:1027}],1045:[,,{768:1024,774:1238,776:1025}],1046:[,,{774:1217,776:1244}],1047:[,,{776:1246}],1048:[,,{768:1037,772:1250,774:1049,776:1252}],1049:[[1048,774]],1050:[,,{769:1036}],1054:[,,{776:1254}],1059:[,,{772:1262,774:1038,776:1264,779:1266}],1063:[,,{776:1268}],1067:[,,{776:1272}],1069:[,,{776:1260}],1072:[,,{774:1233,776:1235}],1075:[,,{769:1107}],1077:[,,{768:1104,774:1239,776:1105}],1078:[,,{774:1218,776:1245}],1079:[,,{776:1247}],1080:[,,{768:1117,772:1251,774:1081,776:1253}],1081:[[1080,774]],1082:[,,{769:1116}],1086:[,,{776:1255}],1091:[,,{772:1263,774:1118,776:1265,779:1267}],1095:[,,{776:1269}],1099:[,,{776:1273}],1101:[,,{776:1261}],1104:[[1077,768]],1105:[[1077,776]],1107:[[1075,769]],1110:[,,{776:1111}],1111:[[1110,776]],1116:[[1082,769]],1117:[[1080,768]],1118:[[1091,774]],1140:[,,{783:1142}],1141:[,,{783:1143}],1142:[[1140,783]],1143:[[1141,783]],1155:[,230],1156:[,230],1157:[,230],1158:[,230],1159:[,230],1217:[[1046,774]],1218:[[1078,774]],1232:[[1040,774]],1233:[[1072,774]],1234:[[1040,776]],1235:[[1072,776]],1238:[[1045,774]],1239:[[1077,774]],1240:[,,{776:1242}],1241:[,,{776:1243}],1242:[[1240,776]],1243:[[1241,776]],1244:[[1046,776]],1245:[[1078,776]],1246:[[1047,776]],1247:[[1079,776]],1250:[[1048,772]],1251:[[1080,772]],1252:[[1048,776]],1253:[[1080,776]],1254:[[1054,776]],1255:[[1086,776]],1256:[,,{776:1258}],1257:[,,{776:1259}],1258:[[1256,776]],1259:[[1257,776]],1260:[[1069,776]],1261:[[1101,776]],1262:[[1059,772]],1263:[[1091,772]],1264:[[1059,776]],1265:[[1091,776]],1266:[[1059,779]],1267:[[1091,779]],1268:[[1063,776]],1269:[[1095,776]],1272:[[1067,776]],1273:[[1099,776]]},
                1280:{1415:[[1381,1410],256],1425:[,220],1426:[,230],1427:[,230],1428:[,230],1429:[,230],1430:[,220],1431:[,230],1432:[,230],1433:[,230],1434:[,222],1435:[,220],1436:[,230],1437:[,230],1438:[,230],1439:[,230],1440:[,230],1441:[,230],1442:[,220],1443:[,220],1444:[,220],1445:[,220],1446:[,220],1447:[,220],1448:[,230],1449:[,230],1450:[,220],1451:[,230],1452:[,230],1453:[,222],1454:[,228],1455:[,230],1456:[,10],1457:[,11],1458:[,12],1459:[,13],1460:[,14],1461:[,15],1462:[,16],1463:[,17],1464:[,18],1465:[,19],1466:[,19],1467:[,20],1468:[,21],1469:[,22],1471:[,23],1473:[,24],1474:[,25],1476:[,230],1477:[,220],1479:[,18]},
                1536:{1552:[,230],1553:[,230],1554:[,230],1555:[,230],1556:[,230],1557:[,230],1558:[,230],1559:[,230],1560:[,30],1561:[,31],1562:[,32],1570:[[1575,1619]],1571:[[1575,1620]],1572:[[1608,1620]],1573:[[1575,1621]],1574:[[1610,1620]],1575:[,,{1619:1570,1620:1571,1621:1573}],1608:[,,{1620:1572}],1610:[,,{1620:1574}],1611:[,27],1612:[,28],1613:[,29],1614:[,30],1615:[,31],1616:[,32],1617:[,33],1618:[,34],1619:[,230],1620:[,230],1621:[,220],1622:[,220],1623:[,230],1624:[,230],1625:[,230],1626:[,230],1627:[,230],1628:[,220],1629:[,230],1630:[,230],1631:[,220],1648:[,35],1653:[[1575,1652],256],1654:[[1608,1652],256],1655:[[1735,1652],256],1656:[[1610,1652],256],1728:[[1749,1620]],1729:[,,{1620:1730}],1730:[[1729,1620]],1746:[,,{1620:1747}],1747:[[1746,1620]],1749:[,,{1620:1728}],1750:[,230],1751:[,230],1752:[,230],1753:[,230],1754:[,230],1755:[,230],1756:[,230],1759:[,230],1760:[,230],1761:[,230],1762:[,230],1763:[,220],1764:[,230],1767:[,230],1768:[,230],1770:[,220],1771:[,230],1772:[,230],1773:[,220]},
                1792:{1809:[,36],1840:[,230],1841:[,220],1842:[,230],1843:[,230],1844:[,220],1845:[,230],1846:[,230],1847:[,220],1848:[,220],1849:[,220],1850:[,230],1851:[,220],1852:[,220],1853:[,230],1854:[,220],1855:[,230],1856:[,230],1857:[,230],1858:[,220],1859:[,230],1860:[,220],1861:[,230],1862:[,220],1863:[,230],1864:[,220],1865:[,230],1866:[,230],2027:[,230],2028:[,230],2029:[,230],2030:[,230],2031:[,230],2032:[,230],2033:[,230],2034:[,220],2035:[,230]},
                2048:{2070:[,230],2071:[,230],2072:[,230],2073:[,230],2075:[,230],2076:[,230],2077:[,230],2078:[,230],2079:[,230],2080:[,230],2081:[,230],2082:[,230],2083:[,230],2085:[,230],2086:[,230],2087:[,230],2089:[,230],2090:[,230],2091:[,230],2092:[,230],2093:[,230],2137:[,220],2138:[,220],2139:[,220],2276:[,230],2277:[,230],2278:[,220],2279:[,230],2280:[,230],2281:[,220],2282:[,230],2283:[,230],2284:[,230],2285:[,220],2286:[,220],2287:[,220],2288:[,27],2289:[,28],2290:[,29],2291:[,230],2292:[,230],2293:[,230],2294:[,220],2295:[,230],2296:[,230],2297:[,220],2298:[,220],2299:[,230],2300:[,230],2301:[,230],2302:[,230],2303:[,230]},
                2304:{2344:[,,{2364:2345}],2345:[[2344,2364]],2352:[,,{2364:2353}],2353:[[2352,2364]],2355:[,,{2364:2356}],2356:[[2355,2364]],2364:[,7],2381:[,9],2385:[,230],2386:[,220],2387:[,230],2388:[,230],2392:[[2325,2364],512],2393:[[2326,2364],512],2394:[[2327,2364],512],2395:[[2332,2364],512],2396:[[2337,2364],512],2397:[[2338,2364],512],2398:[[2347,2364],512],2399:[[2351,2364],512],2492:[,7],2503:[,,{2494:2507,2519:2508}],2507:[[2503,2494]],2508:[[2503,2519]],2509:[,9],2524:[[2465,2492],512],2525:[[2466,2492],512],2527:[[2479,2492],512]},
                2560:{2611:[[2610,2620],512],2614:[[2616,2620],512],2620:[,7],2637:[,9],2649:[[2582,2620],512],2650:[[2583,2620],512],2651:[[2588,2620],512],2654:[[2603,2620],512],2748:[,7],2765:[,9],68109:[,220],68111:[,230],68152:[,230],68153:[,1],68154:[,220],68159:[,9],68325:[,230],68326:[,220]},
                2816:{2876:[,7],2887:[,,{2878:2891,2902:2888,2903:2892}],2888:[[2887,2902]],2891:[[2887,2878]],2892:[[2887,2903]],2893:[,9],2908:[[2849,2876],512],2909:[[2850,2876],512],2962:[,,{3031:2964}],2964:[[2962,3031]],3014:[,,{3006:3018,3031:3020}],3015:[,,{3006:3019}],3018:[[3014,3006]],3019:[[3015,3006]],3020:[[3014,3031]],3021:[,9]},
                3072:{3142:[,,{3158:3144}],3144:[[3142,3158]],3149:[,9],3157:[,84],3158:[,91],3260:[,7],3263:[,,{3285:3264}],3264:[[3263,3285]],3270:[,,{3266:3274,3285:3271,3286:3272}],3271:[[3270,3285]],3272:[[3270,3286]],3274:[[3270,3266],,{3285:3275}],3275:[[3274,3285]],3277:[,9]},
                3328:{3398:[,,{3390:3402,3415:3404}],3399:[,,{3390:3403}],3402:[[3398,3390]],3403:[[3399,3390]],3404:[[3398,3415]],3405:[,9],3530:[,9],3545:[,,{3530:3546,3535:3548,3551:3550}],3546:[[3545,3530]],3548:[[3545,3535],,{3530:3549}],3549:[[3548,3530]],3550:[[3545,3551]]},
                3584:{3635:[[3661,3634],256],3640:[,103],3641:[,103],3642:[,9],3656:[,107],3657:[,107],3658:[,107],3659:[,107],3763:[[3789,3762],256],3768:[,118],3769:[,118],3784:[,122],3785:[,122],3786:[,122],3787:[,122],3804:[[3755,3737],256],3805:[[3755,3745],256]},
                3840:{3852:[[3851],256],3864:[,220],3865:[,220],3893:[,220],3895:[,220],3897:[,216],3907:[[3906,4023],512],3917:[[3916,4023],512],3922:[[3921,4023],512],3927:[[3926,4023],512],3932:[[3931,4023],512],3945:[[3904,4021],512],3953:[,129],3954:[,130],3955:[[3953,3954],512],3956:[,132],3957:[[3953,3956],512],3958:[[4018,3968],512],3959:[[4018,3969],256],3960:[[4019,3968],512],3961:[[4019,3969],256],3962:[,130],3963:[,130],3964:[,130],3965:[,130],3968:[,130],3969:[[3953,3968],512],3970:[,230],3971:[,230],3972:[,9],3974:[,230],3975:[,230],3987:[[3986,4023],512],3997:[[3996,4023],512],4002:[[4001,4023],512],4007:[[4006,4023],512],4012:[[4011,4023],512],4025:[[3984,4021],512],4038:[,220]},
                4096:{4133:[,,{4142:4134}],4134:[[4133,4142]],4151:[,7],4153:[,9],4154:[,9],4237:[,220],4348:[[4316],256],69702:[,9],69759:[,9],69785:[,,{69818:69786}],69786:[[69785,69818]],69787:[,,{69818:69788}],69788:[[69787,69818]],69797:[,,{69818:69803}],69803:[[69797,69818]],69817:[,9],69818:[,7]},
                4352:{69888:[,230],69889:[,230],69890:[,230],69934:[[69937,69927]],69935:[[69938,69927]],69937:[,,{69927:69934}],69938:[,,{69927:69935}],69939:[,9],69940:[,9],70003:[,7],70080:[,9]},
                4608:{70197:[,9],70198:[,7],70377:[,7],70378:[,9]},
                4864:{4957:[,230],4958:[,230],4959:[,230],70460:[,7],70471:[,,{70462:70475,70487:70476}],70475:[[70471,70462]],70476:[[70471,70487]],70477:[,9],70502:[,230],70503:[,230],70504:[,230],70505:[,230],70506:[,230],70507:[,230],70508:[,230],70512:[,230],70513:[,230],70514:[,230],70515:[,230],70516:[,230]},
                5120:{70841:[,,{70832:70844,70842:70843,70845:70846}],70843:[[70841,70842]],70844:[[70841,70832]],70846:[[70841,70845]],70850:[,9],70851:[,7]},
                5376:{71096:[,,{71087:71098}],71097:[,,{71087:71099}],71098:[[71096,71087]],71099:[[71097,71087]],71103:[,9],71104:[,7]},
                5632:{71231:[,9],71350:[,9],71351:[,7]},
                5888:{5908:[,9],5940:[,9],6098:[,9],6109:[,230]},
                6144:{6313:[,228]},
                6400:{6457:[,222],6458:[,230],6459:[,220]},
                6656:{6679:[,230],6680:[,220],6752:[,9],6773:[,230],6774:[,230],6775:[,230],6776:[,230],6777:[,230],6778:[,230],6779:[,230],6780:[,230],6783:[,220],6832:[,230],6833:[,230],6834:[,230],6835:[,230],6836:[,230],6837:[,220],6838:[,220],6839:[,220],6840:[,220],6841:[,220],6842:[,220],6843:[,230],6844:[,230],6845:[,220]},
                6912:{6917:[,,{6965:6918}],6918:[[6917,6965]],6919:[,,{6965:6920}],6920:[[6919,6965]],6921:[,,{6965:6922}],6922:[[6921,6965]],6923:[,,{6965:6924}],6924:[[6923,6965]],6925:[,,{6965:6926}],6926:[[6925,6965]],6929:[,,{6965:6930}],6930:[[6929,6965]],6964:[,7],6970:[,,{6965:6971}],6971:[[6970,6965]],6972:[,,{6965:6973}],6973:[[6972,6965]],6974:[,,{6965:6976}],6975:[,,{6965:6977}],6976:[[6974,6965]],6977:[[6975,6965]],6978:[,,{6965:6979}],6979:[[6978,6965]],6980:[,9],7019:[,230],7020:[,220],7021:[,230],7022:[,230],7023:[,230],7024:[,230],7025:[,230],7026:[,230],7027:[,230],7082:[,9],7083:[,9],7142:[,7],7154:[,9],7155:[,9]},
                7168:{7223:[,7],7376:[,230],7377:[,230],7378:[,230],7380:[,1],7381:[,220],7382:[,220],7383:[,220],7384:[,220],7385:[,220],7386:[,230],7387:[,230],7388:[,220],7389:[,220],7390:[,220],7391:[,220],7392:[,230],7394:[,1],7395:[,1],7396:[,1],7397:[,1],7398:[,1],7399:[,1],7400:[,1],7405:[,220],7412:[,230],7416:[,230],7417:[,230]},
                7424:{7468:[[65],256],7469:[[198],256],7470:[[66],256],7472:[[68],256],7473:[[69],256],7474:[[398],256],7475:[[71],256],7476:[[72],256],7477:[[73],256],7478:[[74],256],7479:[[75],256],7480:[[76],256],7481:[[77],256],7482:[[78],256],7484:[[79],256],7485:[[546],256],7486:[[80],256],7487:[[82],256],7488:[[84],256],7489:[[85],256],7490:[[87],256],7491:[[97],256],7492:[[592],256],7493:[[593],256],7494:[[7426],256],7495:[[98],256],7496:[[100],256],7497:[[101],256],7498:[[601],256],7499:[[603],256],7500:[[604],256],7501:[[103],256],7503:[[107],256],7504:[[109],256],7505:[[331],256],7506:[[111],256],7507:[[596],256],7508:[[7446],256],7509:[[7447],256],7510:[[112],256],7511:[[116],256],7512:[[117],256],7513:[[7453],256],7514:[[623],256],7515:[[118],256],7516:[[7461],256],7517:[[946],256],7518:[[947],256],7519:[[948],256],7520:[[966],256],7521:[[967],256],7522:[[105],256],7523:[[114],256],7524:[[117],256],7525:[[118],256],7526:[[946],256],7527:[[947],256],7528:[[961],256],7529:[[966],256],7530:[[967],256],7544:[[1085],256],7579:[[594],256],7580:[[99],256],7581:[[597],256],7582:[[240],256],7583:[[604],256],7584:[[102],256],7585:[[607],256],7586:[[609],256],7587:[[613],256],7588:[[616],256],7589:[[617],256],7590:[[618],256],7591:[[7547],256],7592:[[669],256],7593:[[621],256],7594:[[7557],256],7595:[[671],256],7596:[[625],256],7597:[[624],256],7598:[[626],256],7599:[[627],256],7600:[[628],256],7601:[[629],256],7602:[[632],256],7603:[[642],256],7604:[[643],256],7605:[[427],256],7606:[[649],256],7607:[[650],256],7608:[[7452],256],7609:[[651],256],7610:[[652],256],7611:[[122],256],7612:[[656],256],7613:[[657],256],7614:[[658],256],7615:[[952],256],7616:[,230],7617:[,230],7618:[,220],7619:[,230],7620:[,230],7621:[,230],7622:[,230],7623:[,230],7624:[,230],7625:[,230],7626:[,220],7627:[,230],7628:[,230],7629:[,234],7630:[,214],7631:[,220],7632:[,202],7633:[,230],7634:[,230],7635:[,230],7636:[,230],7637:[,230],7638:[,230],7639:[,230],7640:[,230],7641:[,230],7642:[,230],7643:[,230],7644:[,230],7645:[,230],7646:[,230],7647:[,230],7648:[,230],7649:[,230],7650:[,230],7651:[,230],7652:[,230],7653:[,230],7654:[,230],7655:[,230],7656:[,230],7657:[,230],7658:[,230],7659:[,230],7660:[,230],7661:[,230],7662:[,230],7663:[,230],7664:[,230],7665:[,230],7666:[,230],7667:[,230],7668:[,230],7669:[,230],7676:[,233],7677:[,220],7678:[,230],7679:[,220]},
                7680:{7680:[[65,805]],7681:[[97,805]],7682:[[66,775]],7683:[[98,775]],7684:[[66,803]],7685:[[98,803]],7686:[[66,817]],7687:[[98,817]],7688:[[199,769]],7689:[[231,769]],7690:[[68,775]],7691:[[100,775]],7692:[[68,803]],7693:[[100,803]],7694:[[68,817]],7695:[[100,817]],7696:[[68,807]],7697:[[100,807]],7698:[[68,813]],7699:[[100,813]],7700:[[274,768]],7701:[[275,768]],7702:[[274,769]],7703:[[275,769]],7704:[[69,813]],7705:[[101,813]],7706:[[69,816]],7707:[[101,816]],7708:[[552,774]],7709:[[553,774]],7710:[[70,775]],7711:[[102,775]],7712:[[71,772]],7713:[[103,772]],7714:[[72,775]],7715:[[104,775]],7716:[[72,803]],7717:[[104,803]],7718:[[72,776]],7719:[[104,776]],7720:[[72,807]],7721:[[104,807]],7722:[[72,814]],7723:[[104,814]],7724:[[73,816]],7725:[[105,816]],7726:[[207,769]],7727:[[239,769]],7728:[[75,769]],7729:[[107,769]],7730:[[75,803]],7731:[[107,803]],7732:[[75,817]],7733:[[107,817]],7734:[[76,803],,{772:7736}],7735:[[108,803],,{772:7737}],7736:[[7734,772]],7737:[[7735,772]],7738:[[76,817]],7739:[[108,817]],7740:[[76,813]],7741:[[108,813]],7742:[[77,769]],7743:[[109,769]],7744:[[77,775]],7745:[[109,775]],7746:[[77,803]],7747:[[109,803]],7748:[[78,775]],7749:[[110,775]],7750:[[78,803]],7751:[[110,803]],7752:[[78,817]],7753:[[110,817]],7754:[[78,813]],7755:[[110,813]],7756:[[213,769]],7757:[[245,769]],7758:[[213,776]],7759:[[245,776]],7760:[[332,768]],7761:[[333,768]],7762:[[332,769]],7763:[[333,769]],7764:[[80,769]],7765:[[112,769]],7766:[[80,775]],7767:[[112,775]],7768:[[82,775]],7769:[[114,775]],7770:[[82,803],,{772:7772}],7771:[[114,803],,{772:7773}],7772:[[7770,772]],7773:[[7771,772]],7774:[[82,817]],7775:[[114,817]],7776:[[83,775]],7777:[[115,775]],7778:[[83,803],,{775:7784}],7779:[[115,803],,{775:7785}],7780:[[346,775]],7781:[[347,775]],7782:[[352,775]],7783:[[353,775]],7784:[[7778,775]],7785:[[7779,775]],7786:[[84,775]],7787:[[116,775]],7788:[[84,803]],7789:[[116,803]],7790:[[84,817]],7791:[[116,817]],7792:[[84,813]],7793:[[116,813]],7794:[[85,804]],7795:[[117,804]],7796:[[85,816]],7797:[[117,816]],7798:[[85,813]],7799:[[117,813]],7800:[[360,769]],7801:[[361,769]],7802:[[362,776]],7803:[[363,776]],7804:[[86,771]],7805:[[118,771]],7806:[[86,803]],7807:[[118,803]],7808:[[87,768]],7809:[[119,768]],7810:[[87,769]],7811:[[119,769]],7812:[[87,776]],7813:[[119,776]],7814:[[87,775]],7815:[[119,775]],7816:[[87,803]],7817:[[119,803]],7818:[[88,775]],7819:[[120,775]],7820:[[88,776]],7821:[[120,776]],7822:[[89,775]],7823:[[121,775]],7824:[[90,770]],7825:[[122,770]],7826:[[90,803]],7827:[[122,803]],7828:[[90,817]],7829:[[122,817]],7830:[[104,817]],7831:[[116,776]],7832:[[119,778]],7833:[[121,778]],7834:[[97,702],256],7835:[[383,775]],7840:[[65,803],,{770:7852,774:7862}],7841:[[97,803],,{770:7853,774:7863}],7842:[[65,777]],7843:[[97,777]],7844:[[194,769]],7845:[[226,769]],7846:[[194,768]],7847:[[226,768]],7848:[[194,777]],7849:[[226,777]],7850:[[194,771]],7851:[[226,771]],7852:[[7840,770]],7853:[[7841,770]],7854:[[258,769]],7855:[[259,769]],7856:[[258,768]],7857:[[259,768]],7858:[[258,777]],7859:[[259,777]],7860:[[258,771]],7861:[[259,771]],7862:[[7840,774]],7863:[[7841,774]],7864:[[69,803],,{770:7878}],7865:[[101,803],,{770:7879}],7866:[[69,777]],7867:[[101,777]],7868:[[69,771]],7869:[[101,771]],7870:[[202,769]],7871:[[234,769]],7872:[[202,768]],7873:[[234,768]],7874:[[202,777]],7875:[[234,777]],7876:[[202,771]],7877:[[234,771]],7878:[[7864,770]],7879:[[7865,770]],7880:[[73,777]],7881:[[105,777]],7882:[[73,803]],7883:[[105,803]],7884:[[79,803],,{770:7896}],7885:[[111,803],,{770:7897}],7886:[[79,777]],7887:[[111,777]],7888:[[212,769]],7889:[[244,769]],7890:[[212,768]],7891:[[244,768]],7892:[[212,777]],7893:[[244,777]],7894:[[212,771]],7895:[[244,771]],7896:[[7884,770]],7897:[[7885,770]],7898:[[416,769]],7899:[[417,769]],7900:[[416,768]],7901:[[417,768]],7902:[[416,777]],7903:[[417,777]],7904:[[416,771]],7905:[[417,771]],7906:[[416,803]],7907:[[417,803]],7908:[[85,803]],7909:[[117,803]],7910:[[85,777]],7911:[[117,777]],7912:[[431,769]],7913:[[432,769]],7914:[[431,768]],7915:[[432,768]],7916:[[431,777]],7917:[[432,777]],7918:[[431,771]],7919:[[432,771]],7920:[[431,803]],7921:[[432,803]],7922:[[89,768]],7923:[[121,768]],7924:[[89,803]],7925:[[121,803]],7926:[[89,777]],7927:[[121,777]],7928:[[89,771]],7929:[[121,771]]},
                7936:{7936:[[945,787],,{768:7938,769:7940,834:7942,837:8064}],7937:[[945,788],,{768:7939,769:7941,834:7943,837:8065}],7938:[[7936,768],,{837:8066}],7939:[[7937,768],,{837:8067}],7940:[[7936,769],,{837:8068}],7941:[[7937,769],,{837:8069}],7942:[[7936,834],,{837:8070}],7943:[[7937,834],,{837:8071}],7944:[[913,787],,{768:7946,769:7948,834:7950,837:8072}],7945:[[913,788],,{768:7947,769:7949,834:7951,837:8073}],7946:[[7944,768],,{837:8074}],7947:[[7945,768],,{837:8075}],7948:[[7944,769],,{837:8076}],7949:[[7945,769],,{837:8077}],7950:[[7944,834],,{837:8078}],7951:[[7945,834],,{837:8079}],7952:[[949,787],,{768:7954,769:7956}],7953:[[949,788],,{768:7955,769:7957}],7954:[[7952,768]],7955:[[7953,768]],7956:[[7952,769]],7957:[[7953,769]],7960:[[917,787],,{768:7962,769:7964}],7961:[[917,788],,{768:7963,769:7965}],7962:[[7960,768]],7963:[[7961,768]],7964:[[7960,769]],7965:[[7961,769]],7968:[[951,787],,{768:7970,769:7972,834:7974,837:8080}],7969:[[951,788],,{768:7971,769:7973,834:7975,837:8081}],7970:[[7968,768],,{837:8082}],7971:[[7969,768],,{837:8083}],7972:[[7968,769],,{837:8084}],7973:[[7969,769],,{837:8085}],7974:[[7968,834],,{837:8086}],7975:[[7969,834],,{837:8087}],7976:[[919,787],,{768:7978,769:7980,834:7982,837:8088}],7977:[[919,788],,{768:7979,769:7981,834:7983,837:8089}],7978:[[7976,768],,{837:8090}],7979:[[7977,768],,{837:8091}],7980:[[7976,769],,{837:8092}],7981:[[7977,769],,{837:8093}],7982:[[7976,834],,{837:8094}],7983:[[7977,834],,{837:8095}],7984:[[953,787],,{768:7986,769:7988,834:7990}],7985:[[953,788],,{768:7987,769:7989,834:7991}],7986:[[7984,768]],7987:[[7985,768]],7988:[[7984,769]],7989:[[7985,769]],7990:[[7984,834]],7991:[[7985,834]],7992:[[921,787],,{768:7994,769:7996,834:7998}],7993:[[921,788],,{768:7995,769:7997,834:7999}],7994:[[7992,768]],7995:[[7993,768]],7996:[[7992,769]],7997:[[7993,769]],7998:[[7992,834]],7999:[[7993,834]],8000:[[959,787],,{768:8002,769:8004}],8001:[[959,788],,{768:8003,769:8005}],8002:[[8000,768]],8003:[[8001,768]],8004:[[8000,769]],8005:[[8001,769]],8008:[[927,787],,{768:8010,769:8012}],8009:[[927,788],,{768:8011,769:8013}],8010:[[8008,768]],8011:[[8009,768]],8012:[[8008,769]],8013:[[8009,769]],8016:[[965,787],,{768:8018,769:8020,834:8022}],8017:[[965,788],,{768:8019,769:8021,834:8023}],8018:[[8016,768]],8019:[[8017,768]],8020:[[8016,769]],8021:[[8017,769]],8022:[[8016,834]],8023:[[8017,834]],8025:[[933,788],,{768:8027,769:8029,834:8031}],8027:[[8025,768]],8029:[[8025,769]],8031:[[8025,834]],8032:[[969,787],,{768:8034,769:8036,834:8038,837:8096}],8033:[[969,788],,{768:8035,769:8037,834:8039,837:8097}],8034:[[8032,768],,{837:8098}],8035:[[8033,768],,{837:8099}],8036:[[8032,769],,{837:8100}],8037:[[8033,769],,{837:8101}],8038:[[8032,834],,{837:8102}],8039:[[8033,834],,{837:8103}],8040:[[937,787],,{768:8042,769:8044,834:8046,837:8104}],8041:[[937,788],,{768:8043,769:8045,834:8047,837:8105}],8042:[[8040,768],,{837:8106}],8043:[[8041,768],,{837:8107}],8044:[[8040,769],,{837:8108}],8045:[[8041,769],,{837:8109}],8046:[[8040,834],,{837:8110}],8047:[[8041,834],,{837:8111}],8048:[[945,768],,{837:8114}],8049:[[940]],8050:[[949,768]],8051:[[941]],8052:[[951,768],,{837:8130}],8053:[[942]],8054:[[953,768]],8055:[[943]],8056:[[959,768]],8057:[[972]],8058:[[965,768]],8059:[[973]],8060:[[969,768],,{837:8178}],8061:[[974]],8064:[[7936,837]],8065:[[7937,837]],8066:[[7938,837]],8067:[[7939,837]],8068:[[7940,837]],8069:[[7941,837]],8070:[[7942,837]],8071:[[7943,837]],8072:[[7944,837]],8073:[[7945,837]],8074:[[7946,837]],8075:[[7947,837]],8076:[[7948,837]],8077:[[7949,837]],8078:[[7950,837]],8079:[[7951,837]],8080:[[7968,837]],8081:[[7969,837]],8082:[[7970,837]],8083:[[7971,837]],8084:[[7972,837]],8085:[[7973,837]],8086:[[7974,837]],8087:[[7975,837]],8088:[[7976,837]],8089:[[7977,837]],8090:[[7978,837]],8091:[[7979,837]],8092:[[7980,837]],8093:[[7981,837]],8094:[[7982,837]],8095:[[7983,837]],8096:[[8032,837]],8097:[[8033,837]],8098:[[8034,837]],8099:[[8035,837]],8100:[[8036,837]],8101:[[8037,837]],8102:[[8038,837]],8103:[[8039,837]],8104:[[8040,837]],8105:[[8041,837]],8106:[[8042,837]],8107:[[8043,837]],8108:[[8044,837]],8109:[[8045,837]],8110:[[8046,837]],8111:[[8047,837]],8112:[[945,774]],8113:[[945,772]],8114:[[8048,837]],8115:[[945,837]],8116:[[940,837]],8118:[[945,834],,{837:8119}],8119:[[8118,837]],8120:[[913,774]],8121:[[913,772]],8122:[[913,768]],8123:[[902]],8124:[[913,837]],8125:[[32,787],256],8126:[[953]],8127:[[32,787],256,{768:8141,769:8142,834:8143}],8128:[[32,834],256],8129:[[168,834]],8130:[[8052,837]],8131:[[951,837]],8132:[[942,837]],8134:[[951,834],,{837:8135}],8135:[[8134,837]],8136:[[917,768]],8137:[[904]],8138:[[919,768]],8139:[[905]],8140:[[919,837]],8141:[[8127,768]],8142:[[8127,769]],8143:[[8127,834]],8144:[[953,774]],8145:[[953,772]],8146:[[970,768]],8147:[[912]],8150:[[953,834]],8151:[[970,834]],8152:[[921,774]],8153:[[921,772]],8154:[[921,768]],8155:[[906]],8157:[[8190,768]],8158:[[8190,769]],8159:[[8190,834]],8160:[[965,774]],8161:[[965,772]],8162:[[971,768]],8163:[[944]],8164:[[961,787]],8165:[[961,788]],8166:[[965,834]],8167:[[971,834]],8168:[[933,774]],8169:[[933,772]],8170:[[933,768]],8171:[[910]],8172:[[929,788]],8173:[[168,768]],8174:[[901]],8175:[[96]],8178:[[8060,837]],8179:[[969,837]],8180:[[974,837]],8182:[[969,834],,{837:8183}],8183:[[8182,837]],8184:[[927,768]],8185:[[908]],8186:[[937,768]],8187:[[911]],8188:[[937,837]],8189:[[180]],8190:[[32,788],256,{768:8157,769:8158,834:8159}]},
                8192:{8192:[[8194]],8193:[[8195]],8194:[[32],256],8195:[[32],256],8196:[[32],256],8197:[[32],256],8198:[[32],256],8199:[[32],256],8200:[[32],256],8201:[[32],256],8202:[[32],256],8209:[[8208],256],8215:[[32,819],256],8228:[[46],256],8229:[[46,46],256],8230:[[46,46,46],256],8239:[[32],256],8243:[[8242,8242],256],8244:[[8242,8242,8242],256],8246:[[8245,8245],256],8247:[[8245,8245,8245],256],8252:[[33,33],256],8254:[[32,773],256],8263:[[63,63],256],8264:[[63,33],256],8265:[[33,63],256],8279:[[8242,8242,8242,8242],256],8287:[[32],256],8304:[[48],256],8305:[[105],256],8308:[[52],256],8309:[[53],256],8310:[[54],256],8311:[[55],256],8312:[[56],256],8313:[[57],256],8314:[[43],256],8315:[[8722],256],8316:[[61],256],8317:[[40],256],8318:[[41],256],8319:[[110],256],8320:[[48],256],8321:[[49],256],8322:[[50],256],8323:[[51],256],8324:[[52],256],8325:[[53],256],8326:[[54],256],8327:[[55],256],8328:[[56],256],8329:[[57],256],8330:[[43],256],8331:[[8722],256],8332:[[61],256],8333:[[40],256],8334:[[41],256],8336:[[97],256],8337:[[101],256],8338:[[111],256],8339:[[120],256],8340:[[601],256],8341:[[104],256],8342:[[107],256],8343:[[108],256],8344:[[109],256],8345:[[110],256],8346:[[112],256],8347:[[115],256],8348:[[116],256],8360:[[82,115],256],8400:[,230],8401:[,230],8402:[,1],8403:[,1],8404:[,230],8405:[,230],8406:[,230],8407:[,230],8408:[,1],8409:[,1],8410:[,1],8411:[,230],8412:[,230],8417:[,230],8421:[,1],8422:[,1],8423:[,230],8424:[,220],8425:[,230],8426:[,1],8427:[,1],8428:[,220],8429:[,220],8430:[,220],8431:[,220],8432:[,230]},
                8448:{8448:[[97,47,99],256],8449:[[97,47,115],256],8450:[[67],256],8451:[[176,67],256],8453:[[99,47,111],256],8454:[[99,47,117],256],8455:[[400],256],8457:[[176,70],256],8458:[[103],256],8459:[[72],256],8460:[[72],256],8461:[[72],256],8462:[[104],256],8463:[[295],256],8464:[[73],256],8465:[[73],256],8466:[[76],256],8467:[[108],256],8469:[[78],256],8470:[[78,111],256],8473:[[80],256],8474:[[81],256],8475:[[82],256],8476:[[82],256],8477:[[82],256],8480:[[83,77],256],8481:[[84,69,76],256],8482:[[84,77],256],8484:[[90],256],8486:[[937]],8488:[[90],256],8490:[[75]],8491:[[197]],8492:[[66],256],8493:[[67],256],8495:[[101],256],8496:[[69],256],8497:[[70],256],8499:[[77],256],8500:[[111],256],8501:[[1488],256],8502:[[1489],256],8503:[[1490],256],8504:[[1491],256],8505:[[105],256],8507:[[70,65,88],256],8508:[[960],256],8509:[[947],256],8510:[[915],256],8511:[[928],256],8512:[[8721],256],8517:[[68],256],8518:[[100],256],8519:[[101],256],8520:[[105],256],8521:[[106],256],8528:[[49,8260,55],256],8529:[[49,8260,57],256],8530:[[49,8260,49,48],256],8531:[[49,8260,51],256],8532:[[50,8260,51],256],8533:[[49,8260,53],256],8534:[[50,8260,53],256],8535:[[51,8260,53],256],8536:[[52,8260,53],256],8537:[[49,8260,54],256],8538:[[53,8260,54],256],8539:[[49,8260,56],256],8540:[[51,8260,56],256],8541:[[53,8260,56],256],8542:[[55,8260,56],256],8543:[[49,8260],256],8544:[[73],256],8545:[[73,73],256],8546:[[73,73,73],256],8547:[[73,86],256],8548:[[86],256],8549:[[86,73],256],8550:[[86,73,73],256],8551:[[86,73,73,73],256],8552:[[73,88],256],8553:[[88],256],8554:[[88,73],256],8555:[[88,73,73],256],8556:[[76],256],8557:[[67],256],8558:[[68],256],8559:[[77],256],8560:[[105],256],8561:[[105,105],256],8562:[[105,105,105],256],8563:[[105,118],256],8564:[[118],256],8565:[[118,105],256],8566:[[118,105,105],256],8567:[[118,105,105,105],256],8568:[[105,120],256],8569:[[120],256],8570:[[120,105],256],8571:[[120,105,105],256],8572:[[108],256],8573:[[99],256],8574:[[100],256],8575:[[109],256],8585:[[48,8260,51],256],8592:[,,{824:8602}],8594:[,,{824:8603}],8596:[,,{824:8622}],8602:[[8592,824]],8603:[[8594,824]],8622:[[8596,824]],8653:[[8656,824]],8654:[[8660,824]],8655:[[8658,824]],8656:[,,{824:8653}],8658:[,,{824:8655}],8660:[,,{824:8654}]},
                8704:{8707:[,,{824:8708}],8708:[[8707,824]],8712:[,,{824:8713}],8713:[[8712,824]],8715:[,,{824:8716}],8716:[[8715,824]],8739:[,,{824:8740}],8740:[[8739,824]],8741:[,,{824:8742}],8742:[[8741,824]],8748:[[8747,8747],256],8749:[[8747,8747,8747],256],8751:[[8750,8750],256],8752:[[8750,8750,8750],256],8764:[,,{824:8769}],8769:[[8764,824]],8771:[,,{824:8772}],8772:[[8771,824]],8773:[,,{824:8775}],8775:[[8773,824]],8776:[,,{824:8777}],8777:[[8776,824]],8781:[,,{824:8813}],8800:[[61,824]],8801:[,,{824:8802}],8802:[[8801,824]],8804:[,,{824:8816}],8805:[,,{824:8817}],8813:[[8781,824]],8814:[[60,824]],8815:[[62,824]],8816:[[8804,824]],8817:[[8805,824]],8818:[,,{824:8820}],8819:[,,{824:8821}],8820:[[8818,824]],8821:[[8819,824]],8822:[,,{824:8824}],8823:[,,{824:8825}],8824:[[8822,824]],8825:[[8823,824]],8826:[,,{824:8832}],8827:[,,{824:8833}],8828:[,,{824:8928}],8829:[,,{824:8929}],8832:[[8826,824]],8833:[[8827,824]],8834:[,,{824:8836}],8835:[,,{824:8837}],8836:[[8834,824]],8837:[[8835,824]],8838:[,,{824:8840}],8839:[,,{824:8841}],8840:[[8838,824]],8841:[[8839,824]],8849:[,,{824:8930}],8850:[,,{824:8931}],8866:[,,{824:8876}],8872:[,,{824:8877}],8873:[,,{824:8878}],8875:[,,{824:8879}],8876:[[8866,824]],8877:[[8872,824]],8878:[[8873,824]],8879:[[8875,824]],8882:[,,{824:8938}],8883:[,,{824:8939}],8884:[,,{824:8940}],8885:[,,{824:8941}],8928:[[8828,824]],8929:[[8829,824]],8930:[[8849,824]],8931:[[8850,824]],8938:[[8882,824]],8939:[[8883,824]],8940:[[8884,824]],8941:[[8885,824]]},
                8960:{9001:[[12296]],9002:[[12297]]},
                9216:{9312:[[49],256],9313:[[50],256],9314:[[51],256],9315:[[52],256],9316:[[53],256],9317:[[54],256],9318:[[55],256],9319:[[56],256],9320:[[57],256],9321:[[49,48],256],9322:[[49,49],256],9323:[[49,50],256],9324:[[49,51],256],9325:[[49,52],256],9326:[[49,53],256],9327:[[49,54],256],9328:[[49,55],256],9329:[[49,56],256],9330:[[49,57],256],9331:[[50,48],256],9332:[[40,49,41],256],9333:[[40,50,41],256],9334:[[40,51,41],256],9335:[[40,52,41],256],9336:[[40,53,41],256],9337:[[40,54,41],256],9338:[[40,55,41],256],9339:[[40,56,41],256],9340:[[40,57,41],256],9341:[[40,49,48,41],256],9342:[[40,49,49,41],256],9343:[[40,49,50,41],256],9344:[[40,49,51,41],256],9345:[[40,49,52,41],256],9346:[[40,49,53,41],256],9347:[[40,49,54,41],256],9348:[[40,49,55,41],256],9349:[[40,49,56,41],256],9350:[[40,49,57,41],256],9351:[[40,50,48,41],256],9352:[[49,46],256],9353:[[50,46],256],9354:[[51,46],256],9355:[[52,46],256],9356:[[53,46],256],9357:[[54,46],256],9358:[[55,46],256],9359:[[56,46],256],9360:[[57,46],256],9361:[[49,48,46],256],9362:[[49,49,46],256],9363:[[49,50,46],256],9364:[[49,51,46],256],9365:[[49,52,46],256],9366:[[49,53,46],256],9367:[[49,54,46],256],9368:[[49,55,46],256],9369:[[49,56,46],256],9370:[[49,57,46],256],9371:[[50,48,46],256],9372:[[40,97,41],256],9373:[[40,98,41],256],9374:[[40,99,41],256],9375:[[40,100,41],256],9376:[[40,101,41],256],9377:[[40,102,41],256],9378:[[40,103,41],256],9379:[[40,104,41],256],9380:[[40,105,41],256],9381:[[40,106,41],256],9382:[[40,107,41],256],9383:[[40,108,41],256],9384:[[40,109,41],256],9385:[[40,110,41],256],9386:[[40,111,41],256],9387:[[40,112,41],256],9388:[[40,113,41],256],9389:[[40,114,41],256],9390:[[40,115,41],256],9391:[[40,116,41],256],9392:[[40,117,41],256],9393:[[40,118,41],256],9394:[[40,119,41],256],9395:[[40,120,41],256],9396:[[40,121,41],256],9397:[[40,122,41],256],9398:[[65],256],9399:[[66],256],9400:[[67],256],9401:[[68],256],9402:[[69],256],9403:[[70],256],9404:[[71],256],9405:[[72],256],9406:[[73],256],9407:[[74],256],9408:[[75],256],9409:[[76],256],9410:[[77],256],9411:[[78],256],9412:[[79],256],9413:[[80],256],9414:[[81],256],9415:[[82],256],9416:[[83],256],9417:[[84],256],9418:[[85],256],9419:[[86],256],9420:[[87],256],9421:[[88],256],9422:[[89],256],9423:[[90],256],9424:[[97],256],9425:[[98],256],9426:[[99],256],9427:[[100],256],9428:[[101],256],9429:[[102],256],9430:[[103],256],9431:[[104],256],9432:[[105],256],9433:[[106],256],9434:[[107],256],9435:[[108],256],9436:[[109],256],9437:[[110],256],9438:[[111],256],9439:[[112],256],9440:[[113],256],9441:[[114],256],9442:[[115],256],9443:[[116],256],9444:[[117],256],9445:[[118],256],9446:[[119],256],9447:[[120],256],9448:[[121],256],9449:[[122],256],9450:[[48],256]},
                10752:{10764:[[8747,8747,8747,8747],256],10868:[[58,58,61],256],10869:[[61,61],256],10870:[[61,61,61],256],10972:[[10973,824],512]},
                11264:{11388:[[106],256],11389:[[86],256],11503:[,230],11504:[,230],11505:[,230]},
                11520:{11631:[[11617],256],11647:[,9],11744:[,230],11745:[,230],11746:[,230],11747:[,230],11748:[,230],11749:[,230],11750:[,230],11751:[,230],11752:[,230],11753:[,230],11754:[,230],11755:[,230],11756:[,230],11757:[,230],11758:[,230],11759:[,230],11760:[,230],11761:[,230],11762:[,230],11763:[,230],11764:[,230],11765:[,230],11766:[,230],11767:[,230],11768:[,230],11769:[,230],11770:[,230],11771:[,230],11772:[,230],11773:[,230],11774:[,230],11775:[,230]},
                11776:{11935:[[27597],256],12019:[[40863],256]},
                12032:{12032:[[19968],256],12033:[[20008],256],12034:[[20022],256],12035:[[20031],256],12036:[[20057],256],12037:[[20101],256],12038:[[20108],256],12039:[[20128],256],12040:[[20154],256],12041:[[20799],256],12042:[[20837],256],12043:[[20843],256],12044:[[20866],256],12045:[[20886],256],12046:[[20907],256],12047:[[20960],256],12048:[[20981],256],12049:[[20992],256],12050:[[21147],256],12051:[[21241],256],12052:[[21269],256],12053:[[21274],256],12054:[[21304],256],12055:[[21313],256],12056:[[21340],256],12057:[[21353],256],12058:[[21378],256],12059:[[21430],256],12060:[[21448],256],12061:[[21475],256],12062:[[22231],256],12063:[[22303],256],12064:[[22763],256],12065:[[22786],256],12066:[[22794],256],12067:[[22805],256],12068:[[22823],256],12069:[[22899],256],12070:[[23376],256],12071:[[23424],256],12072:[[23544],256],12073:[[23567],256],12074:[[23586],256],12075:[[23608],256],12076:[[23662],256],12077:[[23665],256],12078:[[24027],256],12079:[[24037],256],12080:[[24049],256],12081:[[24062],256],12082:[[24178],256],12083:[[24186],256],12084:[[24191],256],12085:[[24308],256],12086:[[24318],256],12087:[[24331],256],12088:[[24339],256],12089:[[24400],256],12090:[[24417],256],12091:[[24435],256],12092:[[24515],256],12093:[[25096],256],12094:[[25142],256],12095:[[25163],256],12096:[[25903],256],12097:[[25908],256],12098:[[25991],256],12099:[[26007],256],12100:[[26020],256],12101:[[26041],256],12102:[[26080],256],12103:[[26085],256],12104:[[26352],256],12105:[[26376],256],12106:[[26408],256],12107:[[27424],256],12108:[[27490],256],12109:[[27513],256],12110:[[27571],256],12111:[[27595],256],12112:[[27604],256],12113:[[27611],256],12114:[[27663],256],12115:[[27668],256],12116:[[27700],256],12117:[[28779],256],12118:[[29226],256],12119:[[29238],256],12120:[[29243],256],12121:[[29247],256],12122:[[29255],256],12123:[[29273],256],12124:[[29275],256],12125:[[29356],256],12126:[[29572],256],12127:[[29577],256],12128:[[29916],256],12129:[[29926],256],12130:[[29976],256],12131:[[29983],256],12132:[[29992],256],12133:[[30000],256],12134:[[30091],256],12135:[[30098],256],12136:[[30326],256],12137:[[30333],256],12138:[[30382],256],12139:[[30399],256],12140:[[30446],256],12141:[[30683],256],12142:[[30690],256],12143:[[30707],256],12144:[[31034],256],12145:[[31160],256],12146:[[31166],256],12147:[[31348],256],12148:[[31435],256],12149:[[31481],256],12150:[[31859],256],12151:[[31992],256],12152:[[32566],256],12153:[[32593],256],12154:[[32650],256],12155:[[32701],256],12156:[[32769],256],12157:[[32780],256],12158:[[32786],256],12159:[[32819],256],12160:[[32895],256],12161:[[32905],256],12162:[[33251],256],12163:[[33258],256],12164:[[33267],256],12165:[[33276],256],12166:[[33292],256],12167:[[33307],256],12168:[[33311],256],12169:[[33390],256],12170:[[33394],256],12171:[[33400],256],12172:[[34381],256],12173:[[34411],256],12174:[[34880],256],12175:[[34892],256],12176:[[34915],256],12177:[[35198],256],12178:[[35211],256],12179:[[35282],256],12180:[[35328],256],12181:[[35895],256],12182:[[35910],256],12183:[[35925],256],12184:[[35960],256],12185:[[35997],256],12186:[[36196],256],12187:[[36208],256],12188:[[36275],256],12189:[[36523],256],12190:[[36554],256],12191:[[36763],256],12192:[[36784],256],12193:[[36789],256],12194:[[37009],256],12195:[[37193],256],12196:[[37318],256],12197:[[37324],256],12198:[[37329],256],12199:[[38263],256],12200:[[38272],256],12201:[[38428],256],12202:[[38582],256],12203:[[38585],256],12204:[[38632],256],12205:[[38737],256],12206:[[38750],256],12207:[[38754],256],12208:[[38761],256],12209:[[38859],256],12210:[[38893],256],12211:[[38899],256],12212:[[38913],256],12213:[[39080],256],12214:[[39131],256],12215:[[39135],256],12216:[[39318],256],12217:[[39321],256],12218:[[39340],256],12219:[[39592],256],12220:[[39640],256],12221:[[39647],256],12222:[[39717],256],12223:[[39727],256],12224:[[39730],256],12225:[[39740],256],12226:[[39770],256],12227:[[40165],256],12228:[[40565],256],12229:[[40575],256],12230:[[40613],256],12231:[[40635],256],12232:[[40643],256],12233:[[40653],256],12234:[[40657],256],12235:[[40697],256],12236:[[40701],256],12237:[[40718],256],12238:[[40723],256],12239:[[40736],256],12240:[[40763],256],12241:[[40778],256],12242:[[40786],256],12243:[[40845],256],12244:[[40860],256],12245:[[40864],256]},
                12288:{12288:[[32],256],12330:[,218],12331:[,228],12332:[,232],12333:[,222],12334:[,224],12335:[,224],12342:[[12306],256],12344:[[21313],256],12345:[[21316],256],12346:[[21317],256],12358:[,,{12441:12436}],12363:[,,{12441:12364}],12364:[[12363,12441]],12365:[,,{12441:12366}],12366:[[12365,12441]],12367:[,,{12441:12368}],12368:[[12367,12441]],12369:[,,{12441:12370}],12370:[[12369,12441]],12371:[,,{12441:12372}],12372:[[12371,12441]],12373:[,,{12441:12374}],12374:[[12373,12441]],12375:[,,{12441:12376}],12376:[[12375,12441]],12377:[,,{12441:12378}],12378:[[12377,12441]],12379:[,,{12441:12380}],12380:[[12379,12441]],12381:[,,{12441:12382}],12382:[[12381,12441]],12383:[,,{12441:12384}],12384:[[12383,12441]],12385:[,,{12441:12386}],12386:[[12385,12441]],12388:[,,{12441:12389}],12389:[[12388,12441]],12390:[,,{12441:12391}],12391:[[12390,12441]],12392:[,,{12441:12393}],12393:[[12392,12441]],12399:[,,{12441:12400,12442:12401}],12400:[[12399,12441]],12401:[[12399,12442]],12402:[,,{12441:12403,12442:12404}],12403:[[12402,12441]],12404:[[12402,12442]],12405:[,,{12441:12406,12442:12407}],12406:[[12405,12441]],12407:[[12405,12442]],12408:[,,{12441:12409,12442:12410}],12409:[[12408,12441]],12410:[[12408,12442]],12411:[,,{12441:12412,12442:12413}],12412:[[12411,12441]],12413:[[12411,12442]],12436:[[12358,12441]],12441:[,8],12442:[,8],12443:[[32,12441],256],12444:[[32,12442],256],12445:[,,{12441:12446}],12446:[[12445,12441]],12447:[[12424,12426],256],12454:[,,{12441:12532}],12459:[,,{12441:12460}],12460:[[12459,12441]],12461:[,,{12441:12462}],12462:[[12461,12441]],12463:[,,{12441:12464}],12464:[[12463,12441]],12465:[,,{12441:12466}],12466:[[12465,12441]],12467:[,,{12441:12468}],12468:[[12467,12441]],12469:[,,{12441:12470}],12470:[[12469,12441]],12471:[,,{12441:12472}],12472:[[12471,12441]],12473:[,,{12441:12474}],12474:[[12473,12441]],12475:[,,{12441:12476}],12476:[[12475,12441]],12477:[,,{12441:12478}],12478:[[12477,12441]],12479:[,,{12441:12480}],12480:[[12479,12441]],12481:[,,{12441:12482}],12482:[[12481,12441]],12484:[,,{12441:12485}],12485:[[12484,12441]],12486:[,,{12441:12487}],12487:[[12486,12441]],12488:[,,{12441:12489}],12489:[[12488,12441]],12495:[,,{12441:12496,12442:12497}],12496:[[12495,12441]],12497:[[12495,12442]],12498:[,,{12441:12499,12442:12500}],12499:[[12498,12441]],12500:[[12498,12442]],12501:[,,{12441:12502,12442:12503}],12502:[[12501,12441]],12503:[[12501,12442]],12504:[,,{12441:12505,12442:12506}],12505:[[12504,12441]],12506:[[12504,12442]],12507:[,,{12441:12508,12442:12509}],12508:[[12507,12441]],12509:[[12507,12442]],12527:[,,{12441:12535}],12528:[,,{12441:12536}],12529:[,,{12441:12537}],12530:[,,{12441:12538}],12532:[[12454,12441]],12535:[[12527,12441]],12536:[[12528,12441]],12537:[[12529,12441]],12538:[[12530,12441]],12541:[,,{12441:12542}],12542:[[12541,12441]],12543:[[12467,12488],256]},
                12544:{12593:[[4352],256],12594:[[4353],256],12595:[[4522],256],12596:[[4354],256],12597:[[4524],256],12598:[[4525],256],12599:[[4355],256],12600:[[4356],256],12601:[[4357],256],12602:[[4528],256],12603:[[4529],256],12604:[[4530],256],12605:[[4531],256],12606:[[4532],256],12607:[[4533],256],12608:[[4378],256],12609:[[4358],256],12610:[[4359],256],12611:[[4360],256],12612:[[4385],256],12613:[[4361],256],12614:[[4362],256],12615:[[4363],256],12616:[[4364],256],12617:[[4365],256],12618:[[4366],256],12619:[[4367],256],12620:[[4368],256],12621:[[4369],256],12622:[[4370],256],12623:[[4449],256],12624:[[4450],256],12625:[[4451],256],12626:[[4452],256],12627:[[4453],256],12628:[[4454],256],12629:[[4455],256],12630:[[4456],256],12631:[[4457],256],12632:[[4458],256],12633:[[4459],256],12634:[[4460],256],12635:[[4461],256],12636:[[4462],256],12637:[[4463],256],12638:[[4464],256],12639:[[4465],256],12640:[[4466],256],12641:[[4467],256],12642:[[4468],256],12643:[[4469],256],12644:[[4448],256],12645:[[4372],256],12646:[[4373],256],12647:[[4551],256],12648:[[4552],256],12649:[[4556],256],12650:[[4558],256],12651:[[4563],256],12652:[[4567],256],12653:[[4569],256],12654:[[4380],256],12655:[[4573],256],12656:[[4575],256],12657:[[4381],256],12658:[[4382],256],12659:[[4384],256],12660:[[4386],256],12661:[[4387],256],12662:[[4391],256],12663:[[4393],256],12664:[[4395],256],12665:[[4396],256],12666:[[4397],256],12667:[[4398],256],12668:[[4399],256],12669:[[4402],256],12670:[[4406],256],12671:[[4416],256],12672:[[4423],256],12673:[[4428],256],12674:[[4593],256],12675:[[4594],256],12676:[[4439],256],12677:[[4440],256],12678:[[4441],256],12679:[[4484],256],12680:[[4485],256],12681:[[4488],256],12682:[[4497],256],12683:[[4498],256],12684:[[4500],256],12685:[[4510],256],12686:[[4513],256],12690:[[19968],256],12691:[[20108],256],12692:[[19977],256],12693:[[22235],256],12694:[[19978],256],12695:[[20013],256],12696:[[19979],256],12697:[[30002],256],12698:[[20057],256],12699:[[19993],256],12700:[[19969],256],12701:[[22825],256],12702:[[22320],256],12703:[[20154],256]},
                12800:{12800:[[40,4352,41],256],12801:[[40,4354,41],256],12802:[[40,4355,41],256],12803:[[40,4357,41],256],12804:[[40,4358,41],256],12805:[[40,4359,41],256],12806:[[40,4361,41],256],12807:[[40,4363,41],256],12808:[[40,4364,41],256],12809:[[40,4366,41],256],12810:[[40,4367,41],256],12811:[[40,4368,41],256],12812:[[40,4369,41],256],12813:[[40,4370,41],256],12814:[[40,4352,4449,41],256],12815:[[40,4354,4449,41],256],12816:[[40,4355,4449,41],256],12817:[[40,4357,4449,41],256],12818:[[40,4358,4449,41],256],12819:[[40,4359,4449,41],256],12820:[[40,4361,4449,41],256],12821:[[40,4363,4449,41],256],12822:[[40,4364,4449,41],256],12823:[[40,4366,4449,41],256],12824:[[40,4367,4449,41],256],12825:[[40,4368,4449,41],256],12826:[[40,4369,4449,41],256],12827:[[40,4370,4449,41],256],12828:[[40,4364,4462,41],256],12829:[[40,4363,4457,4364,4453,4523,41],256],12830:[[40,4363,4457,4370,4462,41],256],12832:[[40,19968,41],256],12833:[[40,20108,41],256],12834:[[40,19977,41],256],12835:[[40,22235,41],256],12836:[[40,20116,41],256],12837:[[40,20845,41],256],12838:[[40,19971,41],256],12839:[[40,20843,41],256],12840:[[40,20061,41],256],12841:[[40,21313,41],256],12842:[[40,26376,41],256],12843:[[40,28779,41],256],12844:[[40,27700,41],256],12845:[[40,26408,41],256],12846:[[40,37329,41],256],12847:[[40,22303,41],256],12848:[[40,26085,41],256],12849:[[40,26666,41],256],12850:[[40,26377,41],256],12851:[[40,31038,41],256],12852:[[40,21517,41],256],12853:[[40,29305,41],256],12854:[[40,36001,41],256],12855:[[40,31069,41],256],12856:[[40,21172,41],256],12857:[[40,20195,41],256],12858:[[40,21628,41],256],12859:[[40,23398,41],256],12860:[[40,30435,41],256],12861:[[40,20225,41],256],12862:[[40,36039,41],256],12863:[[40,21332,41],256],12864:[[40,31085,41],256],12865:[[40,20241,41],256],12866:[[40,33258,41],256],12867:[[40,33267,41],256],12868:[[21839],256],12869:[[24188],256],12870:[[25991],256],12871:[[31631],256],12880:[[80,84,69],256],12881:[[50,49],256],12882:[[50,50],256],12883:[[50,51],256],12884:[[50,52],256],12885:[[50,53],256],12886:[[50,54],256],12887:[[50,55],256],12888:[[50,56],256],12889:[[50,57],256],12890:[[51,48],256],12891:[[51,49],256],12892:[[51,50],256],12893:[[51,51],256],12894:[[51,52],256],12895:[[51,53],256],12896:[[4352],256],12897:[[4354],256],12898:[[4355],256],12899:[[4357],256],12900:[[4358],256],12901:[[4359],256],12902:[[4361],256],12903:[[4363],256],12904:[[4364],256],12905:[[4366],256],12906:[[4367],256],12907:[[4368],256],12908:[[4369],256],12909:[[4370],256],12910:[[4352,4449],256],12911:[[4354,4449],256],12912:[[4355,4449],256],12913:[[4357,4449],256],12914:[[4358,4449],256],12915:[[4359,4449],256],12916:[[4361,4449],256],12917:[[4363,4449],256],12918:[[4364,4449],256],12919:[[4366,4449],256],12920:[[4367,4449],256],12921:[[4368,4449],256],12922:[[4369,4449],256],12923:[[4370,4449],256],12924:[[4366,4449,4535,4352,4457],256],12925:[[4364,4462,4363,4468],256],12926:[[4363,4462],256],12928:[[19968],256],12929:[[20108],256],12930:[[19977],256],12931:[[22235],256],12932:[[20116],256],12933:[[20845],256],12934:[[19971],256],12935:[[20843],256],12936:[[20061],256],12937:[[21313],256],12938:[[26376],256],12939:[[28779],256],12940:[[27700],256],12941:[[26408],256],12942:[[37329],256],12943:[[22303],256],12944:[[26085],256],12945:[[26666],256],12946:[[26377],256],12947:[[31038],256],12948:[[21517],256],12949:[[29305],256],12950:[[36001],256],12951:[[31069],256],12952:[[21172],256],12953:[[31192],256],12954:[[30007],256],12955:[[22899],256],12956:[[36969],256],12957:[[20778],256],12958:[[21360],256],12959:[[27880],256],12960:[[38917],256],12961:[[20241],256],12962:[[20889],256],12963:[[27491],256],12964:[[19978],256],12965:[[20013],256],12966:[[19979],256],12967:[[24038],256],12968:[[21491],256],12969:[[21307],256],12970:[[23447],256],12971:[[23398],256],12972:[[30435],256],12973:[[20225],256],12974:[[36039],256],12975:[[21332],256],12976:[[22812],256],12977:[[51,54],256],12978:[[51,55],256],12979:[[51,56],256],12980:[[51,57],256],12981:[[52,48],256],12982:[[52,49],256],12983:[[52,50],256],12984:[[52,51],256],12985:[[52,52],256],12986:[[52,53],256],12987:[[52,54],256],12988:[[52,55],256],12989:[[52,56],256],12990:[[52,57],256],12991:[[53,48],256],12992:[[49,26376],256],12993:[[50,26376],256],12994:[[51,26376],256],12995:[[52,26376],256],12996:[[53,26376],256],12997:[[54,26376],256],12998:[[55,26376],256],12999:[[56,26376],256],13000:[[57,26376],256],13001:[[49,48,26376],256],13002:[[49,49,26376],256],13003:[[49,50,26376],256],13004:[[72,103],256],13005:[[101,114,103],256],13006:[[101,86],256],13007:[[76,84,68],256],13008:[[12450],256],13009:[[12452],256],13010:[[12454],256],13011:[[12456],256],13012:[[12458],256],13013:[[12459],256],13014:[[12461],256],13015:[[12463],256],13016:[[12465],256],13017:[[12467],256],13018:[[12469],256],13019:[[12471],256],13020:[[12473],256],13021:[[12475],256],13022:[[12477],256],13023:[[12479],256],13024:[[12481],256],13025:[[12484],256],13026:[[12486],256],13027:[[12488],256],13028:[[12490],256],13029:[[12491],256],13030:[[12492],256],13031:[[12493],256],13032:[[12494],256],13033:[[12495],256],13034:[[12498],256],13035:[[12501],256],13036:[[12504],256],13037:[[12507],256],13038:[[12510],256],13039:[[12511],256],13040:[[12512],256],13041:[[12513],256],13042:[[12514],256],13043:[[12516],256],13044:[[12518],256],13045:[[12520],256],13046:[[12521],256],13047:[[12522],256],13048:[[12523],256],13049:[[12524],256],13050:[[12525],256],13051:[[12527],256],13052:[[12528],256],13053:[[12529],256],13054:[[12530],256]},
                13056:{13056:[[12450,12497,12540,12488],256],13057:[[12450,12523,12501,12449],256],13058:[[12450,12531,12506,12450],256],13059:[[12450,12540,12523],256],13060:[[12452,12491,12531,12464],256],13061:[[12452,12531,12481],256],13062:[[12454,12457,12531],256],13063:[[12456,12473,12463,12540,12489],256],13064:[[12456,12540,12459,12540],256],13065:[[12458,12531,12473],256],13066:[[12458,12540,12512],256],13067:[[12459,12452,12522],256],13068:[[12459,12521,12483,12488],256],13069:[[12459,12525,12522,12540],256],13070:[[12460,12525,12531],256],13071:[[12460,12531,12510],256],13072:[[12462,12460],256],13073:[[12462,12491,12540],256],13074:[[12461,12517,12522,12540],256],13075:[[12462,12523,12480,12540],256],13076:[[12461,12525],256],13077:[[12461,12525,12464,12521,12512],256],13078:[[12461,12525,12513,12540,12488,12523],256],13079:[[12461,12525,12527,12483,12488],256],13080:[[12464,12521,12512],256],13081:[[12464,12521,12512,12488,12531],256],13082:[[12463,12523,12476,12452,12525],256],13083:[[12463,12525,12540,12493],256],13084:[[12465,12540,12473],256],13085:[[12467,12523,12490],256],13086:[[12467,12540,12509],256],13087:[[12469,12452,12463,12523],256],13088:[[12469,12531,12481,12540,12512],256],13089:[[12471,12522,12531,12464],256],13090:[[12475,12531,12481],256],13091:[[12475,12531,12488],256],13092:[[12480,12540,12473],256],13093:[[12487,12471],256],13094:[[12489,12523],256],13095:[[12488,12531],256],13096:[[12490,12494],256],13097:[[12494,12483,12488],256],13098:[[12495,12452,12484],256],13099:[[12497,12540,12475,12531,12488],256],13100:[[12497,12540,12484],256],13101:[[12496,12540,12524,12523],256],13102:[[12500,12450,12473,12488,12523],256],13103:[[12500,12463,12523],256],13104:[[12500,12467],256],13105:[[12499,12523],256],13106:[[12501,12449,12521,12483,12489],256],13107:[[12501,12451,12540,12488],256],13108:[[12502,12483,12471,12455,12523],256],13109:[[12501,12521,12531],256],13110:[[12504,12463,12479,12540,12523],256],13111:[[12506,12477],256],13112:[[12506,12491,12498],256],13113:[[12504,12523,12484],256],13114:[[12506,12531,12473],256],13115:[[12506,12540,12472],256],13116:[[12505,12540,12479],256],13117:[[12509,12452,12531,12488],256],13118:[[12508,12523,12488],256],13119:[[12507,12531],256],13120:[[12509,12531,12489],256],13121:[[12507,12540,12523],256],13122:[[12507,12540,12531],256],13123:[[12510,12452,12463,12525],256],13124:[[12510,12452,12523],256],13125:[[12510,12483,12495],256],13126:[[12510,12523,12463],256],13127:[[12510,12531,12471,12519,12531],256],13128:[[12511,12463,12525,12531],256],13129:[[12511,12522],256],13130:[[12511,12522,12496,12540,12523],256],13131:[[12513,12460],256],13132:[[12513,12460,12488,12531],256],13133:[[12513,12540,12488,12523],256],13134:[[12516,12540,12489],256],13135:[[12516,12540,12523],256],13136:[[12518,12450,12531],256],13137:[[12522,12483,12488,12523],256],13138:[[12522,12521],256],13139:[[12523,12500,12540],256],13140:[[12523,12540,12502,12523],256],13141:[[12524,12512],256],13142:[[12524,12531,12488,12466,12531],256],13143:[[12527,12483,12488],256],13144:[[48,28857],256],13145:[[49,28857],256],13146:[[50,28857],256],13147:[[51,28857],256],13148:[[52,28857],256],13149:[[53,28857],256],13150:[[54,28857],256],13151:[[55,28857],256],13152:[[56,28857],256],13153:[[57,28857],256],13154:[[49,48,28857],256],13155:[[49,49,28857],256],13156:[[49,50,28857],256],13157:[[49,51,28857],256],13158:[[49,52,28857],256],13159:[[49,53,28857],256],13160:[[49,54,28857],256],13161:[[49,55,28857],256],13162:[[49,56,28857],256],13163:[[49,57,28857],256],13164:[[50,48,28857],256],13165:[[50,49,28857],256],13166:[[50,50,28857],256],13167:[[50,51,28857],256],13168:[[50,52,28857],256],13169:[[104,80,97],256],13170:[[100,97],256],13171:[[65,85],256],13172:[[98,97,114],256],13173:[[111,86],256],13174:[[112,99],256],13175:[[100,109],256],13176:[[100,109,178],256],13177:[[100,109,179],256],13178:[[73,85],256],13179:[[24179,25104],256],13180:[[26157,21644],256],13181:[[22823,27491],256],13182:[[26126,27835],256],13183:[[26666,24335,20250,31038],256],13184:[[112,65],256],13185:[[110,65],256],13186:[[956,65],256],13187:[[109,65],256],13188:[[107,65],256],13189:[[75,66],256],13190:[[77,66],256],13191:[[71,66],256],13192:[[99,97,108],256],13193:[[107,99,97,108],256],13194:[[112,70],256],13195:[[110,70],256],13196:[[956,70],256],13197:[[956,103],256],13198:[[109,103],256],13199:[[107,103],256],13200:[[72,122],256],13201:[[107,72,122],256],13202:[[77,72,122],256],13203:[[71,72,122],256],13204:[[84,72,122],256],13205:[[956,8467],256],13206:[[109,8467],256],13207:[[100,8467],256],13208:[[107,8467],256],13209:[[102,109],256],13210:[[110,109],256],13211:[[956,109],256],13212:[[109,109],256],13213:[[99,109],256],13214:[[107,109],256],13215:[[109,109,178],256],13216:[[99,109,178],256],13217:[[109,178],256],13218:[[107,109,178],256],13219:[[109,109,179],256],13220:[[99,109,179],256],13221:[[109,179],256],13222:[[107,109,179],256],13223:[[109,8725,115],256],13224:[[109,8725,115,178],256],13225:[[80,97],256],13226:[[107,80,97],256],13227:[[77,80,97],256],13228:[[71,80,97],256],13229:[[114,97,100],256],13230:[[114,97,100,8725,115],256],13231:[[114,97,100,8725,115,178],256],13232:[[112,115],256],13233:[[110,115],256],13234:[[956,115],256],13235:[[109,115],256],13236:[[112,86],256],13237:[[110,86],256],13238:[[956,86],256],13239:[[109,86],256],13240:[[107,86],256],13241:[[77,86],256],13242:[[112,87],256],13243:[[110,87],256],13244:[[956,87],256],13245:[[109,87],256],13246:[[107,87],256],13247:[[77,87],256],13248:[[107,937],256],13249:[[77,937],256],13250:[[97,46,109,46],256],13251:[[66,113],256],13252:[[99,99],256],13253:[[99,100],256],13254:[[67,8725,107,103],256],13255:[[67,111,46],256],13256:[[100,66],256],13257:[[71,121],256],13258:[[104,97],256],13259:[[72,80],256],13260:[[105,110],256],13261:[[75,75],256],13262:[[75,77],256],13263:[[107,116],256],13264:[[108,109],256],13265:[[108,110],256],13266:[[108,111,103],256],13267:[[108,120],256],13268:[[109,98],256],13269:[[109,105,108],256],13270:[[109,111,108],256],13271:[[80,72],256],13272:[[112,46,109,46],256],13273:[[80,80,77],256],13274:[[80,82],256],13275:[[115,114],256],13276:[[83,118],256],13277:[[87,98],256],13278:[[86,8725,109],256],13279:[[65,8725,109],256],13280:[[49,26085],256],13281:[[50,26085],256],13282:[[51,26085],256],13283:[[52,26085],256],13284:[[53,26085],256],13285:[[54,26085],256],13286:[[55,26085],256],13287:[[56,26085],256],13288:[[57,26085],256],13289:[[49,48,26085],256],13290:[[49,49,26085],256],13291:[[49,50,26085],256],13292:[[49,51,26085],256],13293:[[49,52,26085],256],13294:[[49,53,26085],256],13295:[[49,54,26085],256],13296:[[49,55,26085],256],13297:[[49,56,26085],256],13298:[[49,57,26085],256],13299:[[50,48,26085],256],13300:[[50,49,26085],256],13301:[[50,50,26085],256],13302:[[50,51,26085],256],13303:[[50,52,26085],256],13304:[[50,53,26085],256],13305:[[50,54,26085],256],13306:[[50,55,26085],256],13307:[[50,56,26085],256],13308:[[50,57,26085],256],13309:[[51,48,26085],256],13310:[[51,49,26085],256],13311:[[103,97,108],256]},
                27136:{92912:[,1],92913:[,1],92914:[,1],92915:[,1],92916:[,1]},
                27392:{92976:[,230],92977:[,230],92978:[,230],92979:[,230],92980:[,230],92981:[,230],92982:[,230]},
                42496:{42607:[,230],42612:[,230],42613:[,230],42614:[,230],42615:[,230],42616:[,230],42617:[,230],42618:[,230],42619:[,230],42620:[,230],42621:[,230],42652:[[1098],256],42653:[[1100],256],42655:[,230],42736:[,230],42737:[,230]},
                42752:{42864:[[42863],256],43000:[[294],256],43001:[[339],256]},
                43008:{43014:[,9],43204:[,9],43232:[,230],43233:[,230],43234:[,230],43235:[,230],43236:[,230],43237:[,230],43238:[,230],43239:[,230],43240:[,230],43241:[,230],43242:[,230],43243:[,230],43244:[,230],43245:[,230],43246:[,230],43247:[,230],43248:[,230],43249:[,230]},
                43264:{43307:[,220],43308:[,220],43309:[,220],43347:[,9],43443:[,7],43456:[,9]},
                43520:{43696:[,230],43698:[,230],43699:[,230],43700:[,220],43703:[,230],43704:[,230],43710:[,230],43711:[,230],43713:[,230],43766:[,9]},
                43776:{43868:[[42791],256],43869:[[43831],256],43870:[[619],256],43871:[[43858],256],44013:[,9]},
                48128:{113822:[,1]},
                53504:{119134:[[119127,119141],512],119135:[[119128,119141],512],119136:[[119135,119150],512],119137:[[119135,119151],512],119138:[[119135,119152],512],119139:[[119135,119153],512],119140:[[119135,119154],512],119141:[,216],119142:[,216],119143:[,1],119144:[,1],119145:[,1],119149:[,226],119150:[,216],119151:[,216],119152:[,216],119153:[,216],119154:[,216],119163:[,220],119164:[,220],119165:[,220],119166:[,220],119167:[,220],119168:[,220],119169:[,220],119170:[,220],119173:[,230],119174:[,230],119175:[,230],119176:[,230],119177:[,230],119178:[,220],119179:[,220],119210:[,230],119211:[,230],119212:[,230],119213:[,230],119227:[[119225,119141],512],119228:[[119226,119141],512],119229:[[119227,119150],512],119230:[[119228,119150],512],119231:[[119227,119151],512],119232:[[119228,119151],512]},
                53760:{119362:[,230],119363:[,230],119364:[,230]},
                54272:{119808:[[65],256],119809:[[66],256],119810:[[67],256],119811:[[68],256],119812:[[69],256],119813:[[70],256],119814:[[71],256],119815:[[72],256],119816:[[73],256],119817:[[74],256],119818:[[75],256],119819:[[76],256],119820:[[77],256],119821:[[78],256],119822:[[79],256],119823:[[80],256],119824:[[81],256],119825:[[82],256],119826:[[83],256],119827:[[84],256],119828:[[85],256],119829:[[86],256],119830:[[87],256],119831:[[88],256],119832:[[89],256],119833:[[90],256],119834:[[97],256],119835:[[98],256],119836:[[99],256],119837:[[100],256],119838:[[101],256],119839:[[102],256],119840:[[103],256],119841:[[104],256],119842:[[105],256],119843:[[106],256],119844:[[107],256],119845:[[108],256],119846:[[109],256],119847:[[110],256],119848:[[111],256],119849:[[112],256],119850:[[113],256],119851:[[114],256],119852:[[115],256],119853:[[116],256],119854:[[117],256],119855:[[118],256],119856:[[119],256],119857:[[120],256],119858:[[121],256],119859:[[122],256],119860:[[65],256],119861:[[66],256],119862:[[67],256],119863:[[68],256],119864:[[69],256],119865:[[70],256],119866:[[71],256],119867:[[72],256],119868:[[73],256],119869:[[74],256],119870:[[75],256],119871:[[76],256],119872:[[77],256],119873:[[78],256],119874:[[79],256],119875:[[80],256],119876:[[81],256],119877:[[82],256],119878:[[83],256],119879:[[84],256],119880:[[85],256],119881:[[86],256],119882:[[87],256],119883:[[88],256],119884:[[89],256],119885:[[90],256],119886:[[97],256],119887:[[98],256],119888:[[99],256],119889:[[100],256],119890:[[101],256],119891:[[102],256],119892:[[103],256],119894:[[105],256],119895:[[106],256],119896:[[107],256],119897:[[108],256],119898:[[109],256],119899:[[110],256],119900:[[111],256],119901:[[112],256],119902:[[113],256],119903:[[114],256],119904:[[115],256],119905:[[116],256],119906:[[117],256],119907:[[118],256],119908:[[119],256],119909:[[120],256],119910:[[121],256],119911:[[122],256],119912:[[65],256],119913:[[66],256],119914:[[67],256],119915:[[68],256],119916:[[69],256],119917:[[70],256],119918:[[71],256],119919:[[72],256],119920:[[73],256],119921:[[74],256],119922:[[75],256],119923:[[76],256],119924:[[77],256],119925:[[78],256],119926:[[79],256],119927:[[80],256],119928:[[81],256],119929:[[82],256],119930:[[83],256],119931:[[84],256],119932:[[85],256],119933:[[86],256],119934:[[87],256],119935:[[88],256],119936:[[89],256],119937:[[90],256],119938:[[97],256],119939:[[98],256],119940:[[99],256],119941:[[100],256],119942:[[101],256],119943:[[102],256],119944:[[103],256],119945:[[104],256],119946:[[105],256],119947:[[106],256],119948:[[107],256],119949:[[108],256],119950:[[109],256],119951:[[110],256],119952:[[111],256],119953:[[112],256],119954:[[113],256],119955:[[114],256],119956:[[115],256],119957:[[116],256],119958:[[117],256],119959:[[118],256],119960:[[119],256],119961:[[120],256],119962:[[121],256],119963:[[122],256],119964:[[65],256],119966:[[67],256],119967:[[68],256],119970:[[71],256],119973:[[74],256],119974:[[75],256],119977:[[78],256],119978:[[79],256],119979:[[80],256],119980:[[81],256],119982:[[83],256],119983:[[84],256],119984:[[85],256],119985:[[86],256],119986:[[87],256],119987:[[88],256],119988:[[89],256],119989:[[90],256],119990:[[97],256],119991:[[98],256],119992:[[99],256],119993:[[100],256],119995:[[102],256],119997:[[104],256],119998:[[105],256],119999:[[106],256],120000:[[107],256],120001:[[108],256],120002:[[109],256],120003:[[110],256],120005:[[112],256],120006:[[113],256],120007:[[114],256],120008:[[115],256],120009:[[116],256],120010:[[117],256],120011:[[118],256],120012:[[119],256],120013:[[120],256],120014:[[121],256],120015:[[122],256],120016:[[65],256],120017:[[66],256],120018:[[67],256],120019:[[68],256],120020:[[69],256],120021:[[70],256],120022:[[71],256],120023:[[72],256],120024:[[73],256],120025:[[74],256],120026:[[75],256],120027:[[76],256],120028:[[77],256],120029:[[78],256],120030:[[79],256],120031:[[80],256],120032:[[81],256],120033:[[82],256],120034:[[83],256],120035:[[84],256],120036:[[85],256],120037:[[86],256],120038:[[87],256],120039:[[88],256],120040:[[89],256],120041:[[90],256],120042:[[97],256],120043:[[98],256],120044:[[99],256],120045:[[100],256],120046:[[101],256],120047:[[102],256],120048:[[103],256],120049:[[104],256],120050:[[105],256],120051:[[106],256],120052:[[107],256],120053:[[108],256],120054:[[109],256],120055:[[110],256],120056:[[111],256],120057:[[112],256],120058:[[113],256],120059:[[114],256],120060:[[115],256],120061:[[116],256],120062:[[117],256],120063:[[118],256]},
                54528:{120064:[[119],256],120065:[[120],256],120066:[[121],256],120067:[[122],256],120068:[[65],256],120069:[[66],256],120071:[[68],256],120072:[[69],256],120073:[[70],256],120074:[[71],256],120077:[[74],256],120078:[[75],256],120079:[[76],256],120080:[[77],256],120081:[[78],256],120082:[[79],256],120083:[[80],256],120084:[[81],256],120086:[[83],256],120087:[[84],256],120088:[[85],256],120089:[[86],256],120090:[[87],256],120091:[[88],256],120092:[[89],256],120094:[[97],256],120095:[[98],256],120096:[[99],256],120097:[[100],256],120098:[[101],256],120099:[[102],256],120100:[[103],256],120101:[[104],256],120102:[[105],256],120103:[[106],256],120104:[[107],256],120105:[[108],256],120106:[[109],256],120107:[[110],256],120108:[[111],256],120109:[[112],256],120110:[[113],256],120111:[[114],256],120112:[[115],256],120113:[[116],256],120114:[[117],256],120115:[[118],256],120116:[[119],256],120117:[[120],256],120118:[[121],256],120119:[[122],256],120120:[[65],256],120121:[[66],256],120123:[[68],256],120124:[[69],256],120125:[[70],256],120126:[[71],256],120128:[[73],256],120129:[[74],256],120130:[[75],256],120131:[[76],256],120132:[[77],256],120134:[[79],256],120138:[[83],256],120139:[[84],256],120140:[[85],256],120141:[[86],256],120142:[[87],256],120143:[[88],256],120144:[[89],256],120146:[[97],256],120147:[[98],256],120148:[[99],256],120149:[[100],256],120150:[[101],256],120151:[[102],256],120152:[[103],256],120153:[[104],256],120154:[[105],256],120155:[[106],256],120156:[[107],256],120157:[[108],256],120158:[[109],256],120159:[[110],256],120160:[[111],256],120161:[[112],256],120162:[[113],256],120163:[[114],256],120164:[[115],256],120165:[[116],256],120166:[[117],256],120167:[[118],256],120168:[[119],256],120169:[[120],256],120170:[[121],256],120171:[[122],256],120172:[[65],256],120173:[[66],256],120174:[[67],256],120175:[[68],256],120176:[[69],256],120177:[[70],256],120178:[[71],256],120179:[[72],256],120180:[[73],256],120181:[[74],256],120182:[[75],256],120183:[[76],256],120184:[[77],256],120185:[[78],256],120186:[[79],256],120187:[[80],256],120188:[[81],256],120189:[[82],256],120190:[[83],256],120191:[[84],256],120192:[[85],256],120193:[[86],256],120194:[[87],256],120195:[[88],256],120196:[[89],256],120197:[[90],256],120198:[[97],256],120199:[[98],256],120200:[[99],256],120201:[[100],256],120202:[[101],256],120203:[[102],256],120204:[[103],256],120205:[[104],256],120206:[[105],256],120207:[[106],256],120208:[[107],256],120209:[[108],256],120210:[[109],256],120211:[[110],256],120212:[[111],256],120213:[[112],256],120214:[[113],256],120215:[[114],256],120216:[[115],256],120217:[[116],256],120218:[[117],256],120219:[[118],256],120220:[[119],256],120221:[[120],256],120222:[[121],256],120223:[[122],256],120224:[[65],256],120225:[[66],256],120226:[[67],256],120227:[[68],256],120228:[[69],256],120229:[[70],256],120230:[[71],256],120231:[[72],256],120232:[[73],256],120233:[[74],256],120234:[[75],256],120235:[[76],256],120236:[[77],256],120237:[[78],256],120238:[[79],256],120239:[[80],256],120240:[[81],256],120241:[[82],256],120242:[[83],256],120243:[[84],256],120244:[[85],256],120245:[[86],256],120246:[[87],256],120247:[[88],256],120248:[[89],256],120249:[[90],256],120250:[[97],256],120251:[[98],256],120252:[[99],256],120253:[[100],256],120254:[[101],256],120255:[[102],256],120256:[[103],256],120257:[[104],256],120258:[[105],256],120259:[[106],256],120260:[[107],256],120261:[[108],256],120262:[[109],256],120263:[[110],256],120264:[[111],256],120265:[[112],256],120266:[[113],256],120267:[[114],256],120268:[[115],256],120269:[[116],256],120270:[[117],256],120271:[[118],256],120272:[[119],256],120273:[[120],256],120274:[[121],256],120275:[[122],256],120276:[[65],256],120277:[[66],256],120278:[[67],256],120279:[[68],256],120280:[[69],256],120281:[[70],256],120282:[[71],256],120283:[[72],256],120284:[[73],256],120285:[[74],256],120286:[[75],256],120287:[[76],256],120288:[[77],256],120289:[[78],256],120290:[[79],256],120291:[[80],256],120292:[[81],256],120293:[[82],256],120294:[[83],256],120295:[[84],256],120296:[[85],256],120297:[[86],256],120298:[[87],256],120299:[[88],256],120300:[[89],256],120301:[[90],256],120302:[[97],256],120303:[[98],256],120304:[[99],256],120305:[[100],256],120306:[[101],256],120307:[[102],256],120308:[[103],256],120309:[[104],256],120310:[[105],256],120311:[[106],256],120312:[[107],256],120313:[[108],256],120314:[[109],256],120315:[[110],256],120316:[[111],256],120317:[[112],256],120318:[[113],256],120319:[[114],256]},
                54784:{120320:[[115],256],120321:[[116],256],120322:[[117],256],120323:[[118],256],120324:[[119],256],120325:[[120],256],120326:[[121],256],120327:[[122],256],120328:[[65],256],120329:[[66],256],120330:[[67],256],120331:[[68],256],120332:[[69],256],120333:[[70],256],120334:[[71],256],120335:[[72],256],120336:[[73],256],120337:[[74],256],120338:[[75],256],120339:[[76],256],120340:[[77],256],120341:[[78],256],120342:[[79],256],120343:[[80],256],120344:[[81],256],120345:[[82],256],120346:[[83],256],120347:[[84],256],120348:[[85],256],120349:[[86],256],120350:[[87],256],120351:[[88],256],120352:[[89],256],120353:[[90],256],120354:[[97],256],120355:[[98],256],120356:[[99],256],120357:[[100],256],120358:[[101],256],120359:[[102],256],120360:[[103],256],120361:[[104],256],120362:[[105],256],120363:[[106],256],120364:[[107],256],120365:[[108],256],120366:[[109],256],120367:[[110],256],120368:[[111],256],120369:[[112],256],120370:[[113],256],120371:[[114],256],120372:[[115],256],120373:[[116],256],120374:[[117],256],120375:[[118],256],120376:[[119],256],120377:[[120],256],120378:[[121],256],120379:[[122],256],120380:[[65],256],120381:[[66],256],120382:[[67],256],120383:[[68],256],120384:[[69],256],120385:[[70],256],120386:[[71],256],120387:[[72],256],120388:[[73],256],120389:[[74],256],120390:[[75],256],120391:[[76],256],120392:[[77],256],120393:[[78],256],120394:[[79],256],120395:[[80],256],120396:[[81],256],120397:[[82],256],120398:[[83],256],120399:[[84],256],120400:[[85],256],120401:[[86],256],120402:[[87],256],120403:[[88],256],120404:[[89],256],120405:[[90],256],120406:[[97],256],120407:[[98],256],120408:[[99],256],120409:[[100],256],120410:[[101],256],120411:[[102],256],120412:[[103],256],120413:[[104],256],120414:[[105],256],120415:[[106],256],120416:[[107],256],120417:[[108],256],120418:[[109],256],120419:[[110],256],120420:[[111],256],120421:[[112],256],120422:[[113],256],120423:[[114],256],120424:[[115],256],120425:[[116],256],120426:[[117],256],120427:[[118],256],120428:[[119],256],120429:[[120],256],120430:[[121],256],120431:[[122],256],120432:[[65],256],120433:[[66],256],120434:[[67],256],120435:[[68],256],120436:[[69],256],120437:[[70],256],120438:[[71],256],120439:[[72],256],120440:[[73],256],120441:[[74],256],120442:[[75],256],120443:[[76],256],120444:[[77],256],120445:[[78],256],120446:[[79],256],120447:[[80],256],120448:[[81],256],120449:[[82],256],120450:[[83],256],120451:[[84],256],120452:[[85],256],120453:[[86],256],120454:[[87],256],120455:[[88],256],120456:[[89],256],120457:[[90],256],120458:[[97],256],120459:[[98],256],120460:[[99],256],120461:[[100],256],120462:[[101],256],120463:[[102],256],120464:[[103],256],120465:[[104],256],120466:[[105],256],120467:[[106],256],120468:[[107],256],120469:[[108],256],120470:[[109],256],120471:[[110],256],120472:[[111],256],120473:[[112],256],120474:[[113],256],120475:[[114],256],120476:[[115],256],120477:[[116],256],120478:[[117],256],120479:[[118],256],120480:[[119],256],120481:[[120],256],120482:[[121],256],120483:[[122],256],120484:[[305],256],120485:[[567],256],120488:[[913],256],120489:[[914],256],120490:[[915],256],120491:[[916],256],120492:[[917],256],120493:[[918],256],120494:[[919],256],120495:[[920],256],120496:[[921],256],120497:[[922],256],120498:[[923],256],120499:[[924],256],120500:[[925],256],120501:[[926],256],120502:[[927],256],120503:[[928],256],120504:[[929],256],120505:[[1012],256],120506:[[931],256],120507:[[932],256],120508:[[933],256],120509:[[934],256],120510:[[935],256],120511:[[936],256],120512:[[937],256],120513:[[8711],256],120514:[[945],256],120515:[[946],256],120516:[[947],256],120517:[[948],256],120518:[[949],256],120519:[[950],256],120520:[[951],256],120521:[[952],256],120522:[[953],256],120523:[[954],256],120524:[[955],256],120525:[[956],256],120526:[[957],256],120527:[[958],256],120528:[[959],256],120529:[[960],256],120530:[[961],256],120531:[[962],256],120532:[[963],256],120533:[[964],256],120534:[[965],256],120535:[[966],256],120536:[[967],256],120537:[[968],256],120538:[[969],256],120539:[[8706],256],120540:[[1013],256],120541:[[977],256],120542:[[1008],256],120543:[[981],256],120544:[[1009],256],120545:[[982],256],120546:[[913],256],120547:[[914],256],120548:[[915],256],120549:[[916],256],120550:[[917],256],120551:[[918],256],120552:[[919],256],120553:[[920],256],120554:[[921],256],120555:[[922],256],120556:[[923],256],120557:[[924],256],120558:[[925],256],120559:[[926],256],120560:[[927],256],120561:[[928],256],120562:[[929],256],120563:[[1012],256],120564:[[931],256],120565:[[932],256],120566:[[933],256],120567:[[934],256],120568:[[935],256],120569:[[936],256],120570:[[937],256],120571:[[8711],256],120572:[[945],256],120573:[[946],256],120574:[[947],256],120575:[[948],256]},
                55040:{120576:[[949],256],120577:[[950],256],120578:[[951],256],120579:[[952],256],120580:[[953],256],120581:[[954],256],120582:[[955],256],120583:[[956],256],120584:[[957],256],120585:[[958],256],120586:[[959],256],120587:[[960],256],120588:[[961],256],120589:[[962],256],120590:[[963],256],120591:[[964],256],120592:[[965],256],120593:[[966],256],120594:[[967],256],120595:[[968],256],120596:[[969],256],120597:[[8706],256],120598:[[1013],256],120599:[[977],256],120600:[[1008],256],120601:[[981],256],120602:[[1009],256],120603:[[982],256],120604:[[913],256],120605:[[914],256],120606:[[915],256],120607:[[916],256],120608:[[917],256],120609:[[918],256],120610:[[919],256],120611:[[920],256],120612:[[921],256],120613:[[922],256],120614:[[923],256],120615:[[924],256],120616:[[925],256],120617:[[926],256],120618:[[927],256],120619:[[928],256],120620:[[929],256],120621:[[1012],256],120622:[[931],256],120623:[[932],256],120624:[[933],256],120625:[[934],256],120626:[[935],256],120627:[[936],256],120628:[[937],256],120629:[[8711],256],120630:[[945],256],120631:[[946],256],120632:[[947],256],120633:[[948],256],120634:[[949],256],120635:[[950],256],120636:[[951],256],120637:[[952],256],120638:[[953],256],120639:[[954],256],120640:[[955],256],120641:[[956],256],120642:[[957],256],120643:[[958],256],120644:[[959],256],120645:[[960],256],120646:[[961],256],120647:[[962],256],120648:[[963],256],120649:[[964],256],120650:[[965],256],120651:[[966],256],120652:[[967],256],120653:[[968],256],120654:[[969],256],120655:[[8706],256],120656:[[1013],256],120657:[[977],256],120658:[[1008],256],120659:[[981],256],120660:[[1009],256],120661:[[982],256],120662:[[913],256],120663:[[914],256],120664:[[915],256],120665:[[916],256],120666:[[917],256],120667:[[918],256],120668:[[919],256],120669:[[920],256],120670:[[921],256],120671:[[922],256],120672:[[923],256],120673:[[924],256],120674:[[925],256],120675:[[926],256],120676:[[927],256],120677:[[928],256],120678:[[929],256],120679:[[1012],256],120680:[[931],256],120681:[[932],256],120682:[[933],256],120683:[[934],256],120684:[[935],256],120685:[[936],256],120686:[[937],256],120687:[[8711],256],120688:[[945],256],120689:[[946],256],120690:[[947],256],120691:[[948],256],120692:[[949],256],120693:[[950],256],120694:[[951],256],120695:[[952],256],120696:[[953],256],120697:[[954],256],120698:[[955],256],120699:[[956],256],120700:[[957],256],120701:[[958],256],120702:[[959],256],120703:[[960],256],120704:[[961],256],120705:[[962],256],120706:[[963],256],120707:[[964],256],120708:[[965],256],120709:[[966],256],120710:[[967],256],120711:[[968],256],120712:[[969],256],120713:[[8706],256],120714:[[1013],256],120715:[[977],256],120716:[[1008],256],120717:[[981],256],120718:[[1009],256],120719:[[982],256],120720:[[913],256],120721:[[914],256],120722:[[915],256],120723:[[916],256],120724:[[917],256],120725:[[918],256],120726:[[919],256],120727:[[920],256],120728:[[921],256],120729:[[922],256],120730:[[923],256],120731:[[924],256],120732:[[925],256],120733:[[926],256],120734:[[927],256],120735:[[928],256],120736:[[929],256],120737:[[1012],256],120738:[[931],256],120739:[[932],256],120740:[[933],256],120741:[[934],256],120742:[[935],256],120743:[[936],256],120744:[[937],256],120745:[[8711],256],120746:[[945],256],120747:[[946],256],120748:[[947],256],120749:[[948],256],120750:[[949],256],120751:[[950],256],120752:[[951],256],120753:[[952],256],120754:[[953],256],120755:[[954],256],120756:[[955],256],120757:[[956],256],120758:[[957],256],120759:[[958],256],120760:[[959],256],120761:[[960],256],120762:[[961],256],120763:[[962],256],120764:[[963],256],120765:[[964],256],120766:[[965],256],120767:[[966],256],120768:[[967],256],120769:[[968],256],120770:[[969],256],120771:[[8706],256],120772:[[1013],256],120773:[[977],256],120774:[[1008],256],120775:[[981],256],120776:[[1009],256],120777:[[982],256],120778:[[988],256],120779:[[989],256],120782:[[48],256],120783:[[49],256],120784:[[50],256],120785:[[51],256],120786:[[52],256],120787:[[53],256],120788:[[54],256],120789:[[55],256],120790:[[56],256],120791:[[57],256],120792:[[48],256],120793:[[49],256],120794:[[50],256],120795:[[51],256],120796:[[52],256],120797:[[53],256],120798:[[54],256],120799:[[55],256],120800:[[56],256],120801:[[57],256],120802:[[48],256],120803:[[49],256],120804:[[50],256],120805:[[51],256],120806:[[52],256],120807:[[53],256],120808:[[54],256],120809:[[55],256],120810:[[56],256],120811:[[57],256],120812:[[48],256],120813:[[49],256],120814:[[50],256],120815:[[51],256],120816:[[52],256],120817:[[53],256],120818:[[54],256],120819:[[55],256],120820:[[56],256],120821:[[57],256],120822:[[48],256],120823:[[49],256],120824:[[50],256],120825:[[51],256],120826:[[52],256],120827:[[53],256],120828:[[54],256],120829:[[55],256],120830:[[56],256],120831:[[57],256]},
                59392:{125136:[,220],125137:[,220],125138:[,220],125139:[,220],125140:[,220],125141:[,220],125142:[,220]},
                60928:{126464:[[1575],256],126465:[[1576],256],126466:[[1580],256],126467:[[1583],256],126469:[[1608],256],126470:[[1586],256],126471:[[1581],256],126472:[[1591],256],126473:[[1610],256],126474:[[1603],256],126475:[[1604],256],126476:[[1605],256],126477:[[1606],256],126478:[[1587],256],126479:[[1593],256],126480:[[1601],256],126481:[[1589],256],126482:[[1602],256],126483:[[1585],256],126484:[[1588],256],126485:[[1578],256],126486:[[1579],256],126487:[[1582],256],126488:[[1584],256],126489:[[1590],256],126490:[[1592],256],126491:[[1594],256],126492:[[1646],256],126493:[[1722],256],126494:[[1697],256],126495:[[1647],256],126497:[[1576],256],126498:[[1580],256],126500:[[1607],256],126503:[[1581],256],126505:[[1610],256],126506:[[1603],256],126507:[[1604],256],126508:[[1605],256],126509:[[1606],256],126510:[[1587],256],126511:[[1593],256],126512:[[1601],256],126513:[[1589],256],126514:[[1602],256],126516:[[1588],256],126517:[[1578],256],126518:[[1579],256],126519:[[1582],256],126521:[[1590],256],126523:[[1594],256],126530:[[1580],256],126535:[[1581],256],126537:[[1610],256],126539:[[1604],256],126541:[[1606],256],126542:[[1587],256],126543:[[1593],256],126545:[[1589],256],126546:[[1602],256],126548:[[1588],256],126551:[[1582],256],126553:[[1590],256],126555:[[1594],256],126557:[[1722],256],126559:[[1647],256],126561:[[1576],256],126562:[[1580],256],126564:[[1607],256],126567:[[1581],256],126568:[[1591],256],126569:[[1610],256],126570:[[1603],256],126572:[[1605],256],126573:[[1606],256],126574:[[1587],256],126575:[[1593],256],126576:[[1601],256],126577:[[1589],256],126578:[[1602],256],126580:[[1588],256],126581:[[1578],256],126582:[[1579],256],126583:[[1582],256],126585:[[1590],256],126586:[[1592],256],126587:[[1594],256],126588:[[1646],256],126590:[[1697],256],126592:[[1575],256],126593:[[1576],256],126594:[[1580],256],126595:[[1583],256],126596:[[1607],256],126597:[[1608],256],126598:[[1586],256],126599:[[1581],256],126600:[[1591],256],126601:[[1610],256],126603:[[1604],256],126604:[[1605],256],126605:[[1606],256],126606:[[1587],256],126607:[[1593],256],126608:[[1601],256],126609:[[1589],256],126610:[[1602],256],126611:[[1585],256],126612:[[1588],256],126613:[[1578],256],126614:[[1579],256],126615:[[1582],256],126616:[[1584],256],126617:[[1590],256],126618:[[1592],256],126619:[[1594],256],126625:[[1576],256],126626:[[1580],256],126627:[[1583],256],126629:[[1608],256],126630:[[1586],256],126631:[[1581],256],126632:[[1591],256],126633:[[1610],256],126635:[[1604],256],126636:[[1605],256],126637:[[1606],256],126638:[[1587],256],126639:[[1593],256],126640:[[1601],256],126641:[[1589],256],126642:[[1602],256],126643:[[1585],256],126644:[[1588],256],126645:[[1578],256],126646:[[1579],256],126647:[[1582],256],126648:[[1584],256],126649:[[1590],256],126650:[[1592],256],126651:[[1594],256]},
                61696:{127232:[[48,46],256],127233:[[48,44],256],127234:[[49,44],256],127235:[[50,44],256],127236:[[51,44],256],127237:[[52,44],256],127238:[[53,44],256],127239:[[54,44],256],127240:[[55,44],256],127241:[[56,44],256],127242:[[57,44],256],127248:[[40,65,41],256],127249:[[40,66,41],256],127250:[[40,67,41],256],127251:[[40,68,41],256],127252:[[40,69,41],256],127253:[[40,70,41],256],127254:[[40,71,41],256],127255:[[40,72,41],256],127256:[[40,73,41],256],127257:[[40,74,41],256],127258:[[40,75,41],256],127259:[[40,76,41],256],127260:[[40,77,41],256],127261:[[40,78,41],256],127262:[[40,79,41],256],127263:[[40,80,41],256],127264:[[40,81,41],256],127265:[[40,82,41],256],127266:[[40,83,41],256],127267:[[40,84,41],256],127268:[[40,85,41],256],127269:[[40,86,41],256],127270:[[40,87,41],256],127271:[[40,88,41],256],127272:[[40,89,41],256],127273:[[40,90,41],256],127274:[[12308,83,12309],256],127275:[[67],256],127276:[[82],256],127277:[[67,68],256],127278:[[87,90],256],127280:[[65],256],127281:[[66],256],127282:[[67],256],127283:[[68],256],127284:[[69],256],127285:[[70],256],127286:[[71],256],127287:[[72],256],127288:[[73],256],127289:[[74],256],127290:[[75],256],127291:[[76],256],127292:[[77],256],127293:[[78],256],127294:[[79],256],127295:[[80],256],127296:[[81],256],127297:[[82],256],127298:[[83],256],127299:[[84],256],127300:[[85],256],127301:[[86],256],127302:[[87],256],127303:[[88],256],127304:[[89],256],127305:[[90],256],127306:[[72,86],256],127307:[[77,86],256],127308:[[83,68],256],127309:[[83,83],256],127310:[[80,80,86],256],127311:[[87,67],256],127338:[[77,67],256],127339:[[77,68],256],127376:[[68,74],256]},
                61952:{},
                63488:{194560:[[20029]],194561:[[20024]],194562:[[20033]],194563:[[131362]],194564:[[20320]],194565:[[20398]],194566:[[20411]],194567:[[20482]],194568:[[20602]],194569:[[20633]],194570:[[20711]],194571:[[20687]],194572:[[13470]],194573:[[132666]],194574:[[20813]],194575:[[20820]],194576:[[20836]],194577:[[20855]],194578:[[132380]],194579:[[13497]],194580:[[20839]],194581:[[20877]],194582:[[132427]],194583:[[20887]],194584:[[20900]],194585:[[20172]],194586:[[20908]],194587:[[20917]],194588:[[168415]],194589:[[20981]],194590:[[20995]],194591:[[13535]],194592:[[21051]],194593:[[21062]],194594:[[21106]],194595:[[21111]],194596:[[13589]],194597:[[21191]],194598:[[21193]],194599:[[21220]],194600:[[21242]],194601:[[21253]],194602:[[21254]],194603:[[21271]],194604:[[21321]],194605:[[21329]],194606:[[21338]],194607:[[21363]],194608:[[21373]],194609:[[21375]],194610:[[21375]],194611:[[21375]],194612:[[133676]],194613:[[28784]],194614:[[21450]],194615:[[21471]],194616:[[133987]],194617:[[21483]],194618:[[21489]],194619:[[21510]],194620:[[21662]],194621:[[21560]],194622:[[21576]],194623:[[21608]],194624:[[21666]],194625:[[21750]],194626:[[21776]],194627:[[21843]],194628:[[21859]],194629:[[21892]],194630:[[21892]],194631:[[21913]],194632:[[21931]],194633:[[21939]],194634:[[21954]],194635:[[22294]],194636:[[22022]],194637:[[22295]],194638:[[22097]],194639:[[22132]],194640:[[20999]],194641:[[22766]],194642:[[22478]],194643:[[22516]],194644:[[22541]],194645:[[22411]],194646:[[22578]],194647:[[22577]],194648:[[22700]],194649:[[136420]],194650:[[22770]],194651:[[22775]],194652:[[22790]],194653:[[22810]],194654:[[22818]],194655:[[22882]],194656:[[136872]],194657:[[136938]],194658:[[23020]],194659:[[23067]],194660:[[23079]],194661:[[23000]],194662:[[23142]],194663:[[14062]],194664:[[14076]],194665:[[23304]],194666:[[23358]],194667:[[23358]],194668:[[137672]],194669:[[23491]],194670:[[23512]],194671:[[23527]],194672:[[23539]],194673:[[138008]],194674:[[23551]],194675:[[23558]],194676:[[24403]],194677:[[23586]],194678:[[14209]],194679:[[23648]],194680:[[23662]],194681:[[23744]],194682:[[23693]],194683:[[138724]],194684:[[23875]],194685:[[138726]],194686:[[23918]],194687:[[23915]],194688:[[23932]],194689:[[24033]],194690:[[24034]],194691:[[14383]],194692:[[24061]],194693:[[24104]],194694:[[24125]],194695:[[24169]],194696:[[14434]],194697:[[139651]],194698:[[14460]],194699:[[24240]],194700:[[24243]],194701:[[24246]],194702:[[24266]],194703:[[172946]],194704:[[24318]],194705:[[140081]],194706:[[140081]],194707:[[33281]],194708:[[24354]],194709:[[24354]],194710:[[14535]],194711:[[144056]],194712:[[156122]],194713:[[24418]],194714:[[24427]],194715:[[14563]],194716:[[24474]],194717:[[24525]],194718:[[24535]],194719:[[24569]],194720:[[24705]],194721:[[14650]],194722:[[14620]],194723:[[24724]],194724:[[141012]],194725:[[24775]],194726:[[24904]],194727:[[24908]],194728:[[24910]],194729:[[24908]],194730:[[24954]],194731:[[24974]],194732:[[25010]],194733:[[24996]],194734:[[25007]],194735:[[25054]],194736:[[25074]],194737:[[25078]],194738:[[25104]],194739:[[25115]],194740:[[25181]],194741:[[25265]],194742:[[25300]],194743:[[25424]],194744:[[142092]],194745:[[25405]],194746:[[25340]],194747:[[25448]],194748:[[25475]],194749:[[25572]],194750:[[142321]],194751:[[25634]],194752:[[25541]],194753:[[25513]],194754:[[14894]],194755:[[25705]],194756:[[25726]],194757:[[25757]],194758:[[25719]],194759:[[14956]],194760:[[25935]],194761:[[25964]],194762:[[143370]],194763:[[26083]],194764:[[26360]],194765:[[26185]],194766:[[15129]],194767:[[26257]],194768:[[15112]],194769:[[15076]],194770:[[20882]],194771:[[20885]],194772:[[26368]],194773:[[26268]],194774:[[32941]],194775:[[17369]],194776:[[26391]],194777:[[26395]],194778:[[26401]],194779:[[26462]],194780:[[26451]],194781:[[144323]],194782:[[15177]],194783:[[26618]],194784:[[26501]],194785:[[26706]],194786:[[26757]],194787:[[144493]],194788:[[26766]],194789:[[26655]],194790:[[26900]],194791:[[15261]],194792:[[26946]],194793:[[27043]],194794:[[27114]],194795:[[27304]],194796:[[145059]],194797:[[27355]],194798:[[15384]],194799:[[27425]],194800:[[145575]],194801:[[27476]],194802:[[15438]],194803:[[27506]],194804:[[27551]],194805:[[27578]],194806:[[27579]],194807:[[146061]],194808:[[138507]],194809:[[146170]],194810:[[27726]],194811:[[146620]],194812:[[27839]],194813:[[27853]],194814:[[27751]],194815:[[27926]]},
                63744:{63744:[[35912]],63745:[[26356]],63746:[[36554]],63747:[[36040]],63748:[[28369]],63749:[[20018]],63750:[[21477]],63751:[[40860]],63752:[[40860]],63753:[[22865]],63754:[[37329]],63755:[[21895]],63756:[[22856]],63757:[[25078]],63758:[[30313]],63759:[[32645]],63760:[[34367]],63761:[[34746]],63762:[[35064]],63763:[[37007]],63764:[[27138]],63765:[[27931]],63766:[[28889]],63767:[[29662]],63768:[[33853]],63769:[[37226]],63770:[[39409]],63771:[[20098]],63772:[[21365]],63773:[[27396]],63774:[[29211]],63775:[[34349]],63776:[[40478]],63777:[[23888]],63778:[[28651]],63779:[[34253]],63780:[[35172]],63781:[[25289]],63782:[[33240]],63783:[[34847]],63784:[[24266]],63785:[[26391]],63786:[[28010]],63787:[[29436]],63788:[[37070]],63789:[[20358]],63790:[[20919]],63791:[[21214]],63792:[[25796]],63793:[[27347]],63794:[[29200]],63795:[[30439]],63796:[[32769]],63797:[[34310]],63798:[[34396]],63799:[[36335]],63800:[[38706]],63801:[[39791]],63802:[[40442]],63803:[[30860]],63804:[[31103]],63805:[[32160]],63806:[[33737]],63807:[[37636]],63808:[[40575]],63809:[[35542]],63810:[[22751]],63811:[[24324]],63812:[[31840]],63813:[[32894]],63814:[[29282]],63815:[[30922]],63816:[[36034]],63817:[[38647]],63818:[[22744]],63819:[[23650]],63820:[[27155]],63821:[[28122]],63822:[[28431]],63823:[[32047]],63824:[[32311]],63825:[[38475]],63826:[[21202]],63827:[[32907]],63828:[[20956]],63829:[[20940]],63830:[[31260]],63831:[[32190]],63832:[[33777]],63833:[[38517]],63834:[[35712]],63835:[[25295]],63836:[[27138]],63837:[[35582]],63838:[[20025]],63839:[[23527]],63840:[[24594]],63841:[[29575]],63842:[[30064]],63843:[[21271]],63844:[[30971]],63845:[[20415]],63846:[[24489]],63847:[[19981]],63848:[[27852]],63849:[[25976]],63850:[[32034]],63851:[[21443]],63852:[[22622]],63853:[[30465]],63854:[[33865]],63855:[[35498]],63856:[[27578]],63857:[[36784]],63858:[[27784]],63859:[[25342]],63860:[[33509]],63861:[[25504]],63862:[[30053]],63863:[[20142]],63864:[[20841]],63865:[[20937]],63866:[[26753]],63867:[[31975]],63868:[[33391]],63869:[[35538]],63870:[[37327]],63871:[[21237]],63872:[[21570]],63873:[[22899]],63874:[[24300]],63875:[[26053]],63876:[[28670]],63877:[[31018]],63878:[[38317]],63879:[[39530]],63880:[[40599]],63881:[[40654]],63882:[[21147]],63883:[[26310]],63884:[[27511]],63885:[[36706]],63886:[[24180]],63887:[[24976]],63888:[[25088]],63889:[[25754]],63890:[[28451]],63891:[[29001]],63892:[[29833]],63893:[[31178]],63894:[[32244]],63895:[[32879]],63896:[[36646]],63897:[[34030]],63898:[[36899]],63899:[[37706]],63900:[[21015]],63901:[[21155]],63902:[[21693]],63903:[[28872]],63904:[[35010]],63905:[[35498]],63906:[[24265]],63907:[[24565]],63908:[[25467]],63909:[[27566]],63910:[[31806]],63911:[[29557]],63912:[[20196]],63913:[[22265]],63914:[[23527]],63915:[[23994]],63916:[[24604]],63917:[[29618]],63918:[[29801]],63919:[[32666]],63920:[[32838]],63921:[[37428]],63922:[[38646]],63923:[[38728]],63924:[[38936]],63925:[[20363]],63926:[[31150]],63927:[[37300]],63928:[[38584]],63929:[[24801]],63930:[[20102]],63931:[[20698]],63932:[[23534]],63933:[[23615]],63934:[[26009]],63935:[[27138]],63936:[[29134]],63937:[[30274]],63938:[[34044]],63939:[[36988]],63940:[[40845]],63941:[[26248]],63942:[[38446]],63943:[[21129]],63944:[[26491]],63945:[[26611]],63946:[[27969]],63947:[[28316]],63948:[[29705]],63949:[[30041]],63950:[[30827]],63951:[[32016]],63952:[[39006]],63953:[[20845]],63954:[[25134]],63955:[[38520]],63956:[[20523]],63957:[[23833]],63958:[[28138]],63959:[[36650]],63960:[[24459]],63961:[[24900]],63962:[[26647]],63963:[[29575]],63964:[[38534]],63965:[[21033]],63966:[[21519]],63967:[[23653]],63968:[[26131]],63969:[[26446]],63970:[[26792]],63971:[[27877]],63972:[[29702]],63973:[[30178]],63974:[[32633]],63975:[[35023]],63976:[[35041]],63977:[[37324]],63978:[[38626]],63979:[[21311]],63980:[[28346]],63981:[[21533]],63982:[[29136]],63983:[[29848]],63984:[[34298]],63985:[[38563]],63986:[[40023]],63987:[[40607]],63988:[[26519]],63989:[[28107]],63990:[[33256]],63991:[[31435]],63992:[[31520]],63993:[[31890]],63994:[[29376]],63995:[[28825]],63996:[[35672]],63997:[[20160]],63998:[[33590]],63999:[[21050]],194816:[[27966]],194817:[[28023]],194818:[[27969]],194819:[[28009]],194820:[[28024]],194821:[[28037]],194822:[[146718]],194823:[[27956]],194824:[[28207]],194825:[[28270]],194826:[[15667]],194827:[[28363]],194828:[[28359]],194829:[[147153]],194830:[[28153]],194831:[[28526]],194832:[[147294]],194833:[[147342]],194834:[[28614]],194835:[[28729]],194836:[[28702]],194837:[[28699]],194838:[[15766]],194839:[[28746]],194840:[[28797]],194841:[[28791]],194842:[[28845]],194843:[[132389]],194844:[[28997]],194845:[[148067]],194846:[[29084]],194847:[[148395]],194848:[[29224]],194849:[[29237]],194850:[[29264]],194851:[[149000]],194852:[[29312]],194853:[[29333]],194854:[[149301]],194855:[[149524]],194856:[[29562]],194857:[[29579]],194858:[[16044]],194859:[[29605]],194860:[[16056]],194861:[[16056]],194862:[[29767]],194863:[[29788]],194864:[[29809]],194865:[[29829]],194866:[[29898]],194867:[[16155]],194868:[[29988]],194869:[[150582]],194870:[[30014]],194871:[[150674]],194872:[[30064]],194873:[[139679]],194874:[[30224]],194875:[[151457]],194876:[[151480]],194877:[[151620]],194878:[[16380]],194879:[[16392]],194880:[[30452]],194881:[[151795]],194882:[[151794]],194883:[[151833]],194884:[[151859]],194885:[[30494]],194886:[[30495]],194887:[[30495]],194888:[[30538]],194889:[[16441]],194890:[[30603]],194891:[[16454]],194892:[[16534]],194893:[[152605]],194894:[[30798]],194895:[[30860]],194896:[[30924]],194897:[[16611]],194898:[[153126]],194899:[[31062]],194900:[[153242]],194901:[[153285]],194902:[[31119]],194903:[[31211]],194904:[[16687]],194905:[[31296]],194906:[[31306]],194907:[[31311]],194908:[[153980]],194909:[[154279]],194910:[[154279]],194911:[[31470]],194912:[[16898]],194913:[[154539]],194914:[[31686]],194915:[[31689]],194916:[[16935]],194917:[[154752]],194918:[[31954]],194919:[[17056]],194920:[[31976]],194921:[[31971]],194922:[[32000]],194923:[[155526]],194924:[[32099]],194925:[[17153]],194926:[[32199]],194927:[[32258]],194928:[[32325]],194929:[[17204]],194930:[[156200]],194931:[[156231]],194932:[[17241]],194933:[[156377]],194934:[[32634]],194935:[[156478]],194936:[[32661]],194937:[[32762]],194938:[[32773]],194939:[[156890]],194940:[[156963]],194941:[[32864]],194942:[[157096]],194943:[[32880]],194944:[[144223]],194945:[[17365]],194946:[[32946]],194947:[[33027]],194948:[[17419]],194949:[[33086]],194950:[[23221]],194951:[[157607]],194952:[[157621]],194953:[[144275]],194954:[[144284]],194955:[[33281]],194956:[[33284]],194957:[[36766]],194958:[[17515]],194959:[[33425]],194960:[[33419]],194961:[[33437]],194962:[[21171]],194963:[[33457]],194964:[[33459]],194965:[[33469]],194966:[[33510]],194967:[[158524]],194968:[[33509]],194969:[[33565]],194970:[[33635]],194971:[[33709]],194972:[[33571]],194973:[[33725]],194974:[[33767]],194975:[[33879]],194976:[[33619]],194977:[[33738]],194978:[[33740]],194979:[[33756]],194980:[[158774]],194981:[[159083]],194982:[[158933]],194983:[[17707]],194984:[[34033]],194985:[[34035]],194986:[[34070]],194987:[[160714]],194988:[[34148]],194989:[[159532]],194990:[[17757]],194991:[[17761]],194992:[[159665]],194993:[[159954]],194994:[[17771]],194995:[[34384]],194996:[[34396]],194997:[[34407]],194998:[[34409]],194999:[[34473]],195000:[[34440]],195001:[[34574]],195002:[[34530]],195003:[[34681]],195004:[[34600]],195005:[[34667]],195006:[[34694]],195007:[[17879]],195008:[[34785]],195009:[[34817]],195010:[[17913]],195011:[[34912]],195012:[[34915]],195013:[[161383]],195014:[[35031]],195015:[[35038]],195016:[[17973]],195017:[[35066]],195018:[[13499]],195019:[[161966]],195020:[[162150]],195021:[[18110]],195022:[[18119]],195023:[[35488]],195024:[[35565]],195025:[[35722]],195026:[[35925]],195027:[[162984]],195028:[[36011]],195029:[[36033]],195030:[[36123]],195031:[[36215]],195032:[[163631]],195033:[[133124]],195034:[[36299]],195035:[[36284]],195036:[[36336]],195037:[[133342]],195038:[[36564]],195039:[[36664]],195040:[[165330]],195041:[[165357]],195042:[[37012]],195043:[[37105]],195044:[[37137]],195045:[[165678]],195046:[[37147]],195047:[[37432]],195048:[[37591]],195049:[[37592]],195050:[[37500]],195051:[[37881]],195052:[[37909]],195053:[[166906]],195054:[[38283]],195055:[[18837]],195056:[[38327]],195057:[[167287]],195058:[[18918]],195059:[[38595]],195060:[[23986]],195061:[[38691]],195062:[[168261]],195063:[[168474]],195064:[[19054]],195065:[[19062]],195066:[[38880]],195067:[[168970]],195068:[[19122]],195069:[[169110]],195070:[[38923]],195071:[[38923]]},
                64000:{64000:[[20999]],64001:[[24230]],64002:[[25299]],64003:[[31958]],64004:[[23429]],64005:[[27934]],64006:[[26292]],64007:[[36667]],64008:[[34892]],64009:[[38477]],64010:[[35211]],64011:[[24275]],64012:[[20800]],64013:[[21952]],64016:[[22618]],64018:[[26228]],64021:[[20958]],64022:[[29482]],64023:[[30410]],64024:[[31036]],64025:[[31070]],64026:[[31077]],64027:[[31119]],64028:[[38742]],64029:[[31934]],64030:[[32701]],64032:[[34322]],64034:[[35576]],64037:[[36920]],64038:[[37117]],64042:[[39151]],64043:[[39164]],64044:[[39208]],64045:[[40372]],64046:[[37086]],64047:[[38583]],64048:[[20398]],64049:[[20711]],64050:[[20813]],64051:[[21193]],64052:[[21220]],64053:[[21329]],64054:[[21917]],64055:[[22022]],64056:[[22120]],64057:[[22592]],64058:[[22696]],64059:[[23652]],64060:[[23662]],64061:[[24724]],64062:[[24936]],64063:[[24974]],64064:[[25074]],64065:[[25935]],64066:[[26082]],64067:[[26257]],64068:[[26757]],64069:[[28023]],64070:[[28186]],64071:[[28450]],64072:[[29038]],64073:[[29227]],64074:[[29730]],64075:[[30865]],64076:[[31038]],64077:[[31049]],64078:[[31048]],64079:[[31056]],64080:[[31062]],64081:[[31069]],64082:[[31117]],64083:[[31118]],64084:[[31296]],64085:[[31361]],64086:[[31680]],64087:[[32244]],64088:[[32265]],64089:[[32321]],64090:[[32626]],64091:[[32773]],64092:[[33261]],64093:[[33401]],64094:[[33401]],64095:[[33879]],64096:[[35088]],64097:[[35222]],64098:[[35585]],64099:[[35641]],64100:[[36051]],64101:[[36104]],64102:[[36790]],64103:[[36920]],64104:[[38627]],64105:[[38911]],64106:[[38971]],64107:[[24693]],64108:[[148206]],64109:[[33304]],64112:[[20006]],64113:[[20917]],64114:[[20840]],64115:[[20352]],64116:[[20805]],64117:[[20864]],64118:[[21191]],64119:[[21242]],64120:[[21917]],64121:[[21845]],64122:[[21913]],64123:[[21986]],64124:[[22618]],64125:[[22707]],64126:[[22852]],64127:[[22868]],64128:[[23138]],64129:[[23336]],64130:[[24274]],64131:[[24281]],64132:[[24425]],64133:[[24493]],64134:[[24792]],64135:[[24910]],64136:[[24840]],64137:[[24974]],64138:[[24928]],64139:[[25074]],64140:[[25140]],64141:[[25540]],64142:[[25628]],64143:[[25682]],64144:[[25942]],64145:[[26228]],64146:[[26391]],64147:[[26395]],64148:[[26454]],64149:[[27513]],64150:[[27578]],64151:[[27969]],64152:[[28379]],64153:[[28363]],64154:[[28450]],64155:[[28702]],64156:[[29038]],64157:[[30631]],64158:[[29237]],64159:[[29359]],64160:[[29482]],64161:[[29809]],64162:[[29958]],64163:[[30011]],64164:[[30237]],64165:[[30239]],64166:[[30410]],64167:[[30427]],64168:[[30452]],64169:[[30538]],64170:[[30528]],64171:[[30924]],64172:[[31409]],64173:[[31680]],64174:[[31867]],64175:[[32091]],64176:[[32244]],64177:[[32574]],64178:[[32773]],64179:[[33618]],64180:[[33775]],64181:[[34681]],64182:[[35137]],64183:[[35206]],64184:[[35222]],64185:[[35519]],64186:[[35576]],64187:[[35531]],64188:[[35585]],64189:[[35582]],64190:[[35565]],64191:[[35641]],64192:[[35722]],64193:[[36104]],64194:[[36664]],64195:[[36978]],64196:[[37273]],64197:[[37494]],64198:[[38524]],64199:[[38627]],64200:[[38742]],64201:[[38875]],64202:[[38911]],64203:[[38923]],64204:[[38971]],64205:[[39698]],64206:[[40860]],64207:[[141386]],64208:[[141380]],64209:[[144341]],64210:[[15261]],64211:[[16408]],64212:[[16441]],64213:[[152137]],64214:[[154832]],64215:[[163539]],64216:[[40771]],64217:[[40846]],195072:[[38953]],195073:[[169398]],195074:[[39138]],195075:[[19251]],195076:[[39209]],195077:[[39335]],195078:[[39362]],195079:[[39422]],195080:[[19406]],195081:[[170800]],195082:[[39698]],195083:[[40000]],195084:[[40189]],195085:[[19662]],195086:[[19693]],195087:[[40295]],195088:[[172238]],195089:[[19704]],195090:[[172293]],195091:[[172558]],195092:[[172689]],195093:[[40635]],195094:[[19798]],195095:[[40697]],195096:[[40702]],195097:[[40709]],195098:[[40719]],195099:[[40726]],195100:[[40763]],195101:[[173568]]},
                64256:{64256:[[102,102],256],64257:[[102,105],256],64258:[[102,108],256],64259:[[102,102,105],256],64260:[[102,102,108],256],64261:[[383,116],256],64262:[[115,116],256],64275:[[1396,1398],256],64276:[[1396,1381],256],64277:[[1396,1387],256],64278:[[1406,1398],256],64279:[[1396,1389],256],64285:[[1497,1460],512],64286:[,26],64287:[[1522,1463],512],64288:[[1506],256],64289:[[1488],256],64290:[[1491],256],64291:[[1492],256],64292:[[1499],256],64293:[[1500],256],64294:[[1501],256],64295:[[1512],256],64296:[[1514],256],64297:[[43],256],64298:[[1513,1473],512],64299:[[1513,1474],512],64300:[[64329,1473],512],64301:[[64329,1474],512],64302:[[1488,1463],512],64303:[[1488,1464],512],64304:[[1488,1468],512],64305:[[1489,1468],512],64306:[[1490,1468],512],64307:[[1491,1468],512],64308:[[1492,1468],512],64309:[[1493,1468],512],64310:[[1494,1468],512],64312:[[1496,1468],512],64313:[[1497,1468],512],64314:[[1498,1468],512],64315:[[1499,1468],512],64316:[[1500,1468],512],64318:[[1502,1468],512],64320:[[1504,1468],512],64321:[[1505,1468],512],64323:[[1507,1468],512],64324:[[1508,1468],512],64326:[[1510,1468],512],64327:[[1511,1468],512],64328:[[1512,1468],512],64329:[[1513,1468],512],64330:[[1514,1468],512],64331:[[1493,1465],512],64332:[[1489,1471],512],64333:[[1499,1471],512],64334:[[1508,1471],512],64335:[[1488,1500],256],64336:[[1649],256],64337:[[1649],256],64338:[[1659],256],64339:[[1659],256],64340:[[1659],256],64341:[[1659],256],64342:[[1662],256],64343:[[1662],256],64344:[[1662],256],64345:[[1662],256],64346:[[1664],256],64347:[[1664],256],64348:[[1664],256],64349:[[1664],256],64350:[[1658],256],64351:[[1658],256],64352:[[1658],256],64353:[[1658],256],64354:[[1663],256],64355:[[1663],256],64356:[[1663],256],64357:[[1663],256],64358:[[1657],256],64359:[[1657],256],64360:[[1657],256],64361:[[1657],256],64362:[[1700],256],64363:[[1700],256],64364:[[1700],256],64365:[[1700],256],64366:[[1702],256],64367:[[1702],256],64368:[[1702],256],64369:[[1702],256],64370:[[1668],256],64371:[[1668],256],64372:[[1668],256],64373:[[1668],256],64374:[[1667],256],64375:[[1667],256],64376:[[1667],256],64377:[[1667],256],64378:[[1670],256],64379:[[1670],256],64380:[[1670],256],64381:[[1670],256],64382:[[1671],256],64383:[[1671],256],64384:[[1671],256],64385:[[1671],256],64386:[[1677],256],64387:[[1677],256],64388:[[1676],256],64389:[[1676],256],64390:[[1678],256],64391:[[1678],256],64392:[[1672],256],64393:[[1672],256],64394:[[1688],256],64395:[[1688],256],64396:[[1681],256],64397:[[1681],256],64398:[[1705],256],64399:[[1705],256],64400:[[1705],256],64401:[[1705],256],64402:[[1711],256],64403:[[1711],256],64404:[[1711],256],64405:[[1711],256],64406:[[1715],256],64407:[[1715],256],64408:[[1715],256],64409:[[1715],256],64410:[[1713],256],64411:[[1713],256],64412:[[1713],256],64413:[[1713],256],64414:[[1722],256],64415:[[1722],256],64416:[[1723],256],64417:[[1723],256],64418:[[1723],256],64419:[[1723],256],64420:[[1728],256],64421:[[1728],256],64422:[[1729],256],64423:[[1729],256],64424:[[1729],256],64425:[[1729],256],64426:[[1726],256],64427:[[1726],256],64428:[[1726],256],64429:[[1726],256],64430:[[1746],256],64431:[[1746],256],64432:[[1747],256],64433:[[1747],256],64467:[[1709],256],64468:[[1709],256],64469:[[1709],256],64470:[[1709],256],64471:[[1735],256],64472:[[1735],256],64473:[[1734],256],64474:[[1734],256],64475:[[1736],256],64476:[[1736],256],64477:[[1655],256],64478:[[1739],256],64479:[[1739],256],64480:[[1733],256],64481:[[1733],256],64482:[[1737],256],64483:[[1737],256],64484:[[1744],256],64485:[[1744],256],64486:[[1744],256],64487:[[1744],256],64488:[[1609],256],64489:[[1609],256],64490:[[1574,1575],256],64491:[[1574,1575],256],64492:[[1574,1749],256],64493:[[1574,1749],256],64494:[[1574,1608],256],64495:[[1574,1608],256],64496:[[1574,1735],256],64497:[[1574,1735],256],64498:[[1574,1734],256],64499:[[1574,1734],256],64500:[[1574,1736],256],64501:[[1574,1736],256],64502:[[1574,1744],256],64503:[[1574,1744],256],64504:[[1574,1744],256],64505:[[1574,1609],256],64506:[[1574,1609],256],64507:[[1574,1609],256],64508:[[1740],256],64509:[[1740],256],64510:[[1740],256],64511:[[1740],256]},
                64512:{64512:[[1574,1580],256],64513:[[1574,1581],256],64514:[[1574,1605],256],64515:[[1574,1609],256],64516:[[1574,1610],256],64517:[[1576,1580],256],64518:[[1576,1581],256],64519:[[1576,1582],256],64520:[[1576,1605],256],64521:[[1576,1609],256],64522:[[1576,1610],256],64523:[[1578,1580],256],64524:[[1578,1581],256],64525:[[1578,1582],256],64526:[[1578,1605],256],64527:[[1578,1609],256],64528:[[1578,1610],256],64529:[[1579,1580],256],64530:[[1579,1605],256],64531:[[1579,1609],256],64532:[[1579,1610],256],64533:[[1580,1581],256],64534:[[1580,1605],256],64535:[[1581,1580],256],64536:[[1581,1605],256],64537:[[1582,1580],256],64538:[[1582,1581],256],64539:[[1582,1605],256],64540:[[1587,1580],256],64541:[[1587,1581],256],64542:[[1587,1582],256],64543:[[1587,1605],256],64544:[[1589,1581],256],64545:[[1589,1605],256],64546:[[1590,1580],256],64547:[[1590,1581],256],64548:[[1590,1582],256],64549:[[1590,1605],256],64550:[[1591,1581],256],64551:[[1591,1605],256],64552:[[1592,1605],256],64553:[[1593,1580],256],64554:[[1593,1605],256],64555:[[1594,1580],256],64556:[[1594,1605],256],64557:[[1601,1580],256],64558:[[1601,1581],256],64559:[[1601,1582],256],64560:[[1601,1605],256],64561:[[1601,1609],256],64562:[[1601,1610],256],64563:[[1602,1581],256],64564:[[1602,1605],256],64565:[[1602,1609],256],64566:[[1602,1610],256],64567:[[1603,1575],256],64568:[[1603,1580],256],64569:[[1603,1581],256],64570:[[1603,1582],256],64571:[[1603,1604],256],64572:[[1603,1605],256],64573:[[1603,1609],256],64574:[[1603,1610],256],64575:[[1604,1580],256],64576:[[1604,1581],256],64577:[[1604,1582],256],64578:[[1604,1605],256],64579:[[1604,1609],256],64580:[[1604,1610],256],64581:[[1605,1580],256],64582:[[1605,1581],256],64583:[[1605,1582],256],64584:[[1605,1605],256],64585:[[1605,1609],256],64586:[[1605,1610],256],64587:[[1606,1580],256],64588:[[1606,1581],256],64589:[[1606,1582],256],64590:[[1606,1605],256],64591:[[1606,1609],256],64592:[[1606,1610],256],64593:[[1607,1580],256],64594:[[1607,1605],256],64595:[[1607,1609],256],64596:[[1607,1610],256],64597:[[1610,1580],256],64598:[[1610,1581],256],64599:[[1610,1582],256],64600:[[1610,1605],256],64601:[[1610,1609],256],64602:[[1610,1610],256],64603:[[1584,1648],256],64604:[[1585,1648],256],64605:[[1609,1648],256],64606:[[32,1612,1617],256],64607:[[32,1613,1617],256],64608:[[32,1614,1617],256],64609:[[32,1615,1617],256],64610:[[32,1616,1617],256],64611:[[32,1617,1648],256],64612:[[1574,1585],256],64613:[[1574,1586],256],64614:[[1574,1605],256],64615:[[1574,1606],256],64616:[[1574,1609],256],64617:[[1574,1610],256],64618:[[1576,1585],256],64619:[[1576,1586],256],64620:[[1576,1605],256],64621:[[1576,1606],256],64622:[[1576,1609],256],64623:[[1576,1610],256],64624:[[1578,1585],256],64625:[[1578,1586],256],64626:[[1578,1605],256],64627:[[1578,1606],256],64628:[[1578,1609],256],64629:[[1578,1610],256],64630:[[1579,1585],256],64631:[[1579,1586],256],64632:[[1579,1605],256],64633:[[1579,1606],256],64634:[[1579,1609],256],64635:[[1579,1610],256],64636:[[1601,1609],256],64637:[[1601,1610],256],64638:[[1602,1609],256],64639:[[1602,1610],256],64640:[[1603,1575],256],64641:[[1603,1604],256],64642:[[1603,1605],256],64643:[[1603,1609],256],64644:[[1603,1610],256],64645:[[1604,1605],256],64646:[[1604,1609],256],64647:[[1604,1610],256],64648:[[1605,1575],256],64649:[[1605,1605],256],64650:[[1606,1585],256],64651:[[1606,1586],256],64652:[[1606,1605],256],64653:[[1606,1606],256],64654:[[1606,1609],256],64655:[[1606,1610],256],64656:[[1609,1648],256],64657:[[1610,1585],256],64658:[[1610,1586],256],64659:[[1610,1605],256],64660:[[1610,1606],256],64661:[[1610,1609],256],64662:[[1610,1610],256],64663:[[1574,1580],256],64664:[[1574,1581],256],64665:[[1574,1582],256],64666:[[1574,1605],256],64667:[[1574,1607],256],64668:[[1576,1580],256],64669:[[1576,1581],256],64670:[[1576,1582],256],64671:[[1576,1605],256],64672:[[1576,1607],256],64673:[[1578,1580],256],64674:[[1578,1581],256],64675:[[1578,1582],256],64676:[[1578,1605],256],64677:[[1578,1607],256],64678:[[1579,1605],256],64679:[[1580,1581],256],64680:[[1580,1605],256],64681:[[1581,1580],256],64682:[[1581,1605],256],64683:[[1582,1580],256],64684:[[1582,1605],256],64685:[[1587,1580],256],64686:[[1587,1581],256],64687:[[1587,1582],256],64688:[[1587,1605],256],64689:[[1589,1581],256],64690:[[1589,1582],256],64691:[[1589,1605],256],64692:[[1590,1580],256],64693:[[1590,1581],256],64694:[[1590,1582],256],64695:[[1590,1605],256],64696:[[1591,1581],256],64697:[[1592,1605],256],64698:[[1593,1580],256],64699:[[1593,1605],256],64700:[[1594,1580],256],64701:[[1594,1605],256],64702:[[1601,1580],256],64703:[[1601,1581],256],64704:[[1601,1582],256],64705:[[1601,1605],256],64706:[[1602,1581],256],64707:[[1602,1605],256],64708:[[1603,1580],256],64709:[[1603,1581],256],64710:[[1603,1582],256],64711:[[1603,1604],256],64712:[[1603,1605],256],64713:[[1604,1580],256],64714:[[1604,1581],256],64715:[[1604,1582],256],64716:[[1604,1605],256],64717:[[1604,1607],256],64718:[[1605,1580],256],64719:[[1605,1581],256],64720:[[1605,1582],256],64721:[[1605,1605],256],64722:[[1606,1580],256],64723:[[1606,1581],256],64724:[[1606,1582],256],64725:[[1606,1605],256],64726:[[1606,1607],256],64727:[[1607,1580],256],64728:[[1607,1605],256],64729:[[1607,1648],256],64730:[[1610,1580],256],64731:[[1610,1581],256],64732:[[1610,1582],256],64733:[[1610,1605],256],64734:[[1610,1607],256],64735:[[1574,1605],256],64736:[[1574,1607],256],64737:[[1576,1605],256],64738:[[1576,1607],256],64739:[[1578,1605],256],64740:[[1578,1607],256],64741:[[1579,1605],256],64742:[[1579,1607],256],64743:[[1587,1605],256],64744:[[1587,1607],256],64745:[[1588,1605],256],64746:[[1588,1607],256],64747:[[1603,1604],256],64748:[[1603,1605],256],64749:[[1604,1605],256],64750:[[1606,1605],256],64751:[[1606,1607],256],64752:[[1610,1605],256],64753:[[1610,1607],256],64754:[[1600,1614,1617],256],64755:[[1600,1615,1617],256],64756:[[1600,1616,1617],256],64757:[[1591,1609],256],64758:[[1591,1610],256],64759:[[1593,1609],256],64760:[[1593,1610],256],64761:[[1594,1609],256],64762:[[1594,1610],256],64763:[[1587,1609],256],64764:[[1587,1610],256],64765:[[1588,1609],256],64766:[[1588,1610],256],64767:[[1581,1609],256]},
                64768:{64768:[[1581,1610],256],64769:[[1580,1609],256],64770:[[1580,1610],256],64771:[[1582,1609],256],64772:[[1582,1610],256],64773:[[1589,1609],256],64774:[[1589,1610],256],64775:[[1590,1609],256],64776:[[1590,1610],256],64777:[[1588,1580],256],64778:[[1588,1581],256],64779:[[1588,1582],256],64780:[[1588,1605],256],64781:[[1588,1585],256],64782:[[1587,1585],256],64783:[[1589,1585],256],64784:[[1590,1585],256],64785:[[1591,1609],256],64786:[[1591,1610],256],64787:[[1593,1609],256],64788:[[1593,1610],256],64789:[[1594,1609],256],64790:[[1594,1610],256],64791:[[1587,1609],256],64792:[[1587,1610],256],64793:[[1588,1609],256],64794:[[1588,1610],256],64795:[[1581,1609],256],64796:[[1581,1610],256],64797:[[1580,1609],256],64798:[[1580,1610],256],64799:[[1582,1609],256],64800:[[1582,1610],256],64801:[[1589,1609],256],64802:[[1589,1610],256],64803:[[1590,1609],256],64804:[[1590,1610],256],64805:[[1588,1580],256],64806:[[1588,1581],256],64807:[[1588,1582],256],64808:[[1588,1605],256],64809:[[1588,1585],256],64810:[[1587,1585],256],64811:[[1589,1585],256],64812:[[1590,1585],256],64813:[[1588,1580],256],64814:[[1588,1581],256],64815:[[1588,1582],256],64816:[[1588,1605],256],64817:[[1587,1607],256],64818:[[1588,1607],256],64819:[[1591,1605],256],64820:[[1587,1580],256],64821:[[1587,1581],256],64822:[[1587,1582],256],64823:[[1588,1580],256],64824:[[1588,1581],256],64825:[[1588,1582],256],64826:[[1591,1605],256],64827:[[1592,1605],256],64828:[[1575,1611],256],64829:[[1575,1611],256],64848:[[1578,1580,1605],256],64849:[[1578,1581,1580],256],64850:[[1578,1581,1580],256],64851:[[1578,1581,1605],256],64852:[[1578,1582,1605],256],64853:[[1578,1605,1580],256],64854:[[1578,1605,1581],256],64855:[[1578,1605,1582],256],64856:[[1580,1605,1581],256],64857:[[1580,1605,1581],256],64858:[[1581,1605,1610],256],64859:[[1581,1605,1609],256],64860:[[1587,1581,1580],256],64861:[[1587,1580,1581],256],64862:[[1587,1580,1609],256],64863:[[1587,1605,1581],256],64864:[[1587,1605,1581],256],64865:[[1587,1605,1580],256],64866:[[1587,1605,1605],256],64867:[[1587,1605,1605],256],64868:[[1589,1581,1581],256],64869:[[1589,1581,1581],256],64870:[[1589,1605,1605],256],64871:[[1588,1581,1605],256],64872:[[1588,1581,1605],256],64873:[[1588,1580,1610],256],64874:[[1588,1605,1582],256],64875:[[1588,1605,1582],256],64876:[[1588,1605,1605],256],64877:[[1588,1605,1605],256],64878:[[1590,1581,1609],256],64879:[[1590,1582,1605],256],64880:[[1590,1582,1605],256],64881:[[1591,1605,1581],256],64882:[[1591,1605,1581],256],64883:[[1591,1605,1605],256],64884:[[1591,1605,1610],256],64885:[[1593,1580,1605],256],64886:[[1593,1605,1605],256],64887:[[1593,1605,1605],256],64888:[[1593,1605,1609],256],64889:[[1594,1605,1605],256],64890:[[1594,1605,1610],256],64891:[[1594,1605,1609],256],64892:[[1601,1582,1605],256],64893:[[1601,1582,1605],256],64894:[[1602,1605,1581],256],64895:[[1602,1605,1605],256],64896:[[1604,1581,1605],256],64897:[[1604,1581,1610],256],64898:[[1604,1581,1609],256],64899:[[1604,1580,1580],256],64900:[[1604,1580,1580],256],64901:[[1604,1582,1605],256],64902:[[1604,1582,1605],256],64903:[[1604,1605,1581],256],64904:[[1604,1605,1581],256],64905:[[1605,1581,1580],256],64906:[[1605,1581,1605],256],64907:[[1605,1581,1610],256],64908:[[1605,1580,1581],256],64909:[[1605,1580,1605],256],64910:[[1605,1582,1580],256],64911:[[1605,1582,1605],256],64914:[[1605,1580,1582],256],64915:[[1607,1605,1580],256],64916:[[1607,1605,1605],256],64917:[[1606,1581,1605],256],64918:[[1606,1581,1609],256],64919:[[1606,1580,1605],256],64920:[[1606,1580,1605],256],64921:[[1606,1580,1609],256],64922:[[1606,1605,1610],256],64923:[[1606,1605,1609],256],64924:[[1610,1605,1605],256],64925:[[1610,1605,1605],256],64926:[[1576,1582,1610],256],64927:[[1578,1580,1610],256],64928:[[1578,1580,1609],256],64929:[[1578,1582,1610],256],64930:[[1578,1582,1609],256],64931:[[1578,1605,1610],256],64932:[[1578,1605,1609],256],64933:[[1580,1605,1610],256],64934:[[1580,1581,1609],256],64935:[[1580,1605,1609],256],64936:[[1587,1582,1609],256],64937:[[1589,1581,1610],256],64938:[[1588,1581,1610],256],64939:[[1590,1581,1610],256],64940:[[1604,1580,1610],256],64941:[[1604,1605,1610],256],64942:[[1610,1581,1610],256],64943:[[1610,1580,1610],256],64944:[[1610,1605,1610],256],64945:[[1605,1605,1610],256],64946:[[1602,1605,1610],256],64947:[[1606,1581,1610],256],64948:[[1602,1605,1581],256],64949:[[1604,1581,1605],256],64950:[[1593,1605,1610],256],64951:[[1603,1605,1610],256],64952:[[1606,1580,1581],256],64953:[[1605,1582,1610],256],64954:[[1604,1580,1605],256],64955:[[1603,1605,1605],256],64956:[[1604,1580,1605],256],64957:[[1606,1580,1581],256],64958:[[1580,1581,1610],256],64959:[[1581,1580,1610],256],64960:[[1605,1580,1610],256],64961:[[1601,1605,1610],256],64962:[[1576,1581,1610],256],64963:[[1603,1605,1605],256],64964:[[1593,1580,1605],256],64965:[[1589,1605,1605],256],64966:[[1587,1582,1610],256],64967:[[1606,1580,1610],256],65008:[[1589,1604,1746],256],65009:[[1602,1604,1746],256],65010:[[1575,1604,1604,1607],256],65011:[[1575,1603,1576,1585],256],65012:[[1605,1581,1605,1583],256],65013:[[1589,1604,1593,1605],256],65014:[[1585,1587,1608,1604],256],65015:[[1593,1604,1610,1607],256],65016:[[1608,1587,1604,1605],256],65017:[[1589,1604,1609],256],65018:[[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605],256],65019:[[1580,1604,32,1580,1604,1575,1604,1607],256],65020:[[1585,1740,1575,1604],256]},
                65024:{65040:[[44],256],65041:[[12289],256],65042:[[12290],256],65043:[[58],256],65044:[[59],256],65045:[[33],256],65046:[[63],256],65047:[[12310],256],65048:[[12311],256],65049:[[8230],256],65056:[,230],65057:[,230],65058:[,230],65059:[,230],65060:[,230],65061:[,230],65062:[,230],65063:[,220],65064:[,220],65065:[,220],65066:[,220],65067:[,220],65068:[,220],65069:[,220],65072:[[8229],256],65073:[[8212],256],65074:[[8211],256],65075:[[95],256],65076:[[95],256],65077:[[40],256],65078:[[41],256],65079:[[123],256],65080:[[125],256],65081:[[12308],256],65082:[[12309],256],65083:[[12304],256],65084:[[12305],256],65085:[[12298],256],65086:[[12299],256],65087:[[12296],256],65088:[[12297],256],65089:[[12300],256],65090:[[12301],256],65091:[[12302],256],65092:[[12303],256],65095:[[91],256],65096:[[93],256],65097:[[8254],256],65098:[[8254],256],65099:[[8254],256],65100:[[8254],256],65101:[[95],256],65102:[[95],256],65103:[[95],256],65104:[[44],256],65105:[[12289],256],65106:[[46],256],65108:[[59],256],65109:[[58],256],65110:[[63],256],65111:[[33],256],65112:[[8212],256],65113:[[40],256],65114:[[41],256],65115:[[123],256],65116:[[125],256],65117:[[12308],256],65118:[[12309],256],65119:[[35],256],65120:[[38],256],65121:[[42],256],65122:[[43],256],65123:[[45],256],65124:[[60],256],65125:[[62],256],65126:[[61],256],65128:[[92],256],65129:[[36],256],65130:[[37],256],65131:[[64],256],65136:[[32,1611],256],65137:[[1600,1611],256],65138:[[32,1612],256],65140:[[32,1613],256],65142:[[32,1614],256],65143:[[1600,1614],256],65144:[[32,1615],256],65145:[[1600,1615],256],65146:[[32,1616],256],65147:[[1600,1616],256],65148:[[32,1617],256],65149:[[1600,1617],256],65150:[[32,1618],256],65151:[[1600,1618],256],65152:[[1569],256],65153:[[1570],256],65154:[[1570],256],65155:[[1571],256],65156:[[1571],256],65157:[[1572],256],65158:[[1572],256],65159:[[1573],256],65160:[[1573],256],65161:[[1574],256],65162:[[1574],256],65163:[[1574],256],65164:[[1574],256],65165:[[1575],256],65166:[[1575],256],65167:[[1576],256],65168:[[1576],256],65169:[[1576],256],65170:[[1576],256],65171:[[1577],256],65172:[[1577],256],65173:[[1578],256],65174:[[1578],256],65175:[[1578],256],65176:[[1578],256],65177:[[1579],256],65178:[[1579],256],65179:[[1579],256],65180:[[1579],256],65181:[[1580],256],65182:[[1580],256],65183:[[1580],256],65184:[[1580],256],65185:[[1581],256],65186:[[1581],256],65187:[[1581],256],65188:[[1581],256],65189:[[1582],256],65190:[[1582],256],65191:[[1582],256],65192:[[1582],256],65193:[[1583],256],65194:[[1583],256],65195:[[1584],256],65196:[[1584],256],65197:[[1585],256],65198:[[1585],256],65199:[[1586],256],65200:[[1586],256],65201:[[1587],256],65202:[[1587],256],65203:[[1587],256],65204:[[1587],256],65205:[[1588],256],65206:[[1588],256],65207:[[1588],256],65208:[[1588],256],65209:[[1589],256],65210:[[1589],256],65211:[[1589],256],65212:[[1589],256],65213:[[1590],256],65214:[[1590],256],65215:[[1590],256],65216:[[1590],256],65217:[[1591],256],65218:[[1591],256],65219:[[1591],256],65220:[[1591],256],65221:[[1592],256],65222:[[1592],256],65223:[[1592],256],65224:[[1592],256],65225:[[1593],256],65226:[[1593],256],65227:[[1593],256],65228:[[1593],256],65229:[[1594],256],65230:[[1594],256],65231:[[1594],256],65232:[[1594],256],65233:[[1601],256],65234:[[1601],256],65235:[[1601],256],65236:[[1601],256],65237:[[1602],256],65238:[[1602],256],65239:[[1602],256],65240:[[1602],256],65241:[[1603],256],65242:[[1603],256],65243:[[1603],256],65244:[[1603],256],65245:[[1604],256],65246:[[1604],256],65247:[[1604],256],65248:[[1604],256],65249:[[1605],256],65250:[[1605],256],65251:[[1605],256],65252:[[1605],256],65253:[[1606],256],65254:[[1606],256],65255:[[1606],256],65256:[[1606],256],65257:[[1607],256],65258:[[1607],256],65259:[[1607],256],65260:[[1607],256],65261:[[1608],256],65262:[[1608],256],65263:[[1609],256],65264:[[1609],256],65265:[[1610],256],65266:[[1610],256],65267:[[1610],256],65268:[[1610],256],65269:[[1604,1570],256],65270:[[1604,1570],256],65271:[[1604,1571],256],65272:[[1604,1571],256],65273:[[1604,1573],256],65274:[[1604,1573],256],65275:[[1604,1575],256],65276:[[1604,1575],256]},
                65280:{65281:[[33],256],65282:[[34],256],65283:[[35],256],65284:[[36],256],65285:[[37],256],65286:[[38],256],65287:[[39],256],65288:[[40],256],65289:[[41],256],65290:[[42],256],65291:[[43],256],65292:[[44],256],65293:[[45],256],65294:[[46],256],65295:[[47],256],65296:[[48],256],65297:[[49],256],65298:[[50],256],65299:[[51],256],65300:[[52],256],65301:[[53],256],65302:[[54],256],65303:[[55],256],65304:[[56],256],65305:[[57],256],65306:[[58],256],65307:[[59],256],65308:[[60],256],65309:[[61],256],65310:[[62],256],65311:[[63],256],65312:[[64],256],65313:[[65],256],65314:[[66],256],65315:[[67],256],65316:[[68],256],65317:[[69],256],65318:[[70],256],65319:[[71],256],65320:[[72],256],65321:[[73],256],65322:[[74],256],65323:[[75],256],65324:[[76],256],65325:[[77],256],65326:[[78],256],65327:[[79],256],65328:[[80],256],65329:[[81],256],65330:[[82],256],65331:[[83],256],65332:[[84],256],65333:[[85],256],65334:[[86],256],65335:[[87],256],65336:[[88],256],65337:[[89],256],65338:[[90],256],65339:[[91],256],65340:[[92],256],65341:[[93],256],65342:[[94],256],65343:[[95],256],65344:[[96],256],65345:[[97],256],65346:[[98],256],65347:[[99],256],65348:[[100],256],65349:[[101],256],65350:[[102],256],65351:[[103],256],65352:[[104],256],65353:[[105],256],65354:[[106],256],65355:[[107],256],65356:[[108],256],65357:[[109],256],65358:[[110],256],65359:[[111],256],65360:[[112],256],65361:[[113],256],65362:[[114],256],65363:[[115],256],65364:[[116],256],65365:[[117],256],65366:[[118],256],65367:[[119],256],65368:[[120],256],65369:[[121],256],65370:[[122],256],65371:[[123],256],65372:[[124],256],65373:[[125],256],65374:[[126],256],65375:[[10629],256],65376:[[10630],256],65377:[[12290],256],65378:[[12300],256],65379:[[12301],256],65380:[[12289],256],65381:[[12539],256],65382:[[12530],256],65383:[[12449],256],65384:[[12451],256],65385:[[12453],256],65386:[[12455],256],65387:[[12457],256],65388:[[12515],256],65389:[[12517],256],65390:[[12519],256],65391:[[12483],256],65392:[[12540],256],65393:[[12450],256],65394:[[12452],256],65395:[[12454],256],65396:[[12456],256],65397:[[12458],256],65398:[[12459],256],65399:[[12461],256],65400:[[12463],256],65401:[[12465],256],65402:[[12467],256],65403:[[12469],256],65404:[[12471],256],65405:[[12473],256],65406:[[12475],256],65407:[[12477],256],65408:[[12479],256],65409:[[12481],256],65410:[[12484],256],65411:[[12486],256],65412:[[12488],256],65413:[[12490],256],65414:[[12491],256],65415:[[12492],256],65416:[[12493],256],65417:[[12494],256],65418:[[12495],256],65419:[[12498],256],65420:[[12501],256],65421:[[12504],256],65422:[[12507],256],65423:[[12510],256],65424:[[12511],256],65425:[[12512],256],65426:[[12513],256],65427:[[12514],256],65428:[[12516],256],65429:[[12518],256],65430:[[12520],256],65431:[[12521],256],65432:[[12522],256],65433:[[12523],256],65434:[[12524],256],65435:[[12525],256],65436:[[12527],256],65437:[[12531],256],65438:[[12441],256],65439:[[12442],256],65440:[[12644],256],65441:[[12593],256],65442:[[12594],256],65443:[[12595],256],65444:[[12596],256],65445:[[12597],256],65446:[[12598],256],65447:[[12599],256],65448:[[12600],256],65449:[[12601],256],65450:[[12602],256],65451:[[12603],256],65452:[[12604],256],65453:[[12605],256],65454:[[12606],256],65455:[[12607],256],65456:[[12608],256],65457:[[12609],256],65458:[[12610],256],65459:[[12611],256],65460:[[12612],256],65461:[[12613],256],65462:[[12614],256],65463:[[12615],256],65464:[[12616],256],65465:[[12617],256],65466:[[12618],256],65467:[[12619],256],65468:[[12620],256],65469:[[12621],256],65470:[[12622],256],65474:[[12623],256],65475:[[12624],256],65476:[[12625],256],65477:[[12626],256],65478:[[12627],256],65479:[[12628],256],65482:[[12629],256],65483:[[12630],256],65484:[[12631],256],65485:[[12632],256],65486:[[12633],256],65487:[[12634],256],65490:[[12635],256],65491:[[12636],256],65492:[[12637],256],65493:[[12638],256],65494:[[12639],256],65495:[[12640],256],65498:[[12641],256],65499:[[12642],256],65500:[[12643],256],65504:[[162],256],65505:[[163],256],65506:[[172],256],65507:[[175],256],65508:[[166],256],65509:[[165],256],65510:[[8361],256],65512:[[9474],256],65513:[[8592],256],65514:[[8593],256],65515:[[8594],256],65516:[[8595],256],65517:[[9632],256],65518:[[9675],256]}

            };

            /***** Module to export */
            var unorm = {
                nfc: nfc,
                nfd: nfd,
                nfkc: nfkc,
                nfkd: nfkd
            };

            /*globals module:true,define:true*/

            // CommonJS
            {
                module.exports = unorm;

                // AMD
            }

            /***** Export as shim for String::normalize method *****/
            /*
          http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

          21.1.3.12 String.prototype.normalize(form="NFC")
          When the normalize method is called with one argument form, the following steps are taken:

          1. Let O be CheckObjectCoercible(this value).
          2. Let S be ToString(O).
          3. ReturnIfAbrupt(S).
          4. If form is not provided or undefined let form be "NFC".
          5. Let f be ToString(form).
          6. ReturnIfAbrupt(f).
          7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
          8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
          9. Return ns.

          The length property of the normalize method is 0.

          *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
       */
            unorm.shimApplied = false;

            if (!String.prototype.normalize) {
                Object.defineProperty(String.prototype, "normalize", {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    value: function normalize (/*form*/) {

                        var str = "" + this;
                        var form = arguments[0] === undefined ? "NFC" : arguments[0];

                        if (this === null || this === undefined) {
                            throw new TypeError("Cannot call method on " + Object.prototype.toString.call(this));
                        }

                        if (form === "NFC") {
                            return unorm.nfc(str);
                        } else if (form === "NFD") {
                            return unorm.nfd(str);
                        } else if (form === "NFKC") {
                            return unorm.nfkc(str);
                        } else if (form === "NFKD") {
                            return unorm.nfkd(str);
                        } else {
                            throw new RangeError("Invalid normalization form: " + form);
                        }
                    }
                });

                unorm.shimApplied = true;
            }
        }());
    });

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function completeStringWithCharacter(value, num, character) {
        var text = value || '';
        while (text.length < num) {
            text = character + text;
        }
        return text;
    }
    function removeTrailingZeroesFromString(value) {
        if (!value) {
            return value;
        }
        var _a = String(value).split('.'), integerPart = _a[0], fractionalPart = _a[1];
        if (!fractionalPart) {
            return integerPart;
        }
        var fractionalDigits = fractionalPart
            .split('')
            .reverse()
            .reduce(function (reversedPart, digit) { return (digit === '0' && !reversedPart ? '' : reversedPart + digit); }, '')
            .split('')
            .reverse()
            .join('');
        return fractionalDigits ? integerPart + "." + fractionalDigits : integerPart;
    }
    function removeAccentFromString(value, lowerCase) {
        if (lowerCase === void 0) { lowerCase = true; }
        return unorm.nfd(lowerCase ? (value || '').toLowerCase() : value || '').replace(/[\u0300-\u036f]/g, '');
    }
    function escapeStringForRegex(text) {
        return text.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    function transformTextBasedOnCaseStyle(text, caseStyle) {
        if (!text) {
            return '';
        }
        switch (caseStyle) {
            case exports.CaseStyle.LowerCase:
                return text.toLocaleLowerCase();
            case exports.CaseStyle.UpperCase:
                return text.toLocaleUpperCase();
            case exports.CaseStyle.TitleCase:
                return transformTextToTitleCase(text);
            case exports.CaseStyle.SentenceCase:
                return transformTextToSentenceCase(text);
            default:
                return text;
        }
    }
    function transformTextToTitleCase(text) {
        return text && text.length > 0 ? text.replace(/\w\S*/g, function (word) { return word[0].toLocaleUpperCase() + word.substr(1); }) : '';
    }
    function transformTextToSentenceCase(text) {
        return text
            .split(/([.!?])/g)
            .reduce(function (previousSentences, sentence) {
                if (['.', '!', '?'].includes(sentence)) {
                    return previousSentences.concat(sentence + ' ');
                }
                var words = sentence
                    .trim()
                    .split(' ')
                    .reduce(function (allWords, word, index) { return allWords.concat(index === 0 ? transformTextToTitleCase(word) : word); }, []);
                return previousSentences.concat(words.join(' '));
            }, '')
            .trim();
    }
    function setCharAt(value, position, char) {
        return value.substring(0, position) + char + value.substring(position + 1, value.length);
    }
    function replaceNbspFromString(value) {
        return (value || '').replace(/&nbsp;/g, ' ');
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function isNumeric(value) {
        if (isNullOrUndefined(value) || typeof value === 'boolean' || String(value).trim() === '') {
            return false;
        }
        return !isNaN(toNumber(value));
    }
    function toNumber(value) {
        var val = value && value.toString().replace(/\s/g, '').replace(',', '.');
        return Number(val);
    }
    function convertBigToNumberSafely(big, decimals) {
        var value = big && removeTrailingZeroesFromString(big.toFixed(decimals));
        return value && !value.includes('.') ? convertStringToNumberSafely(value) : value;
    }
    function convertStringToNumberSafely(value) {
        return !value || String(value).length >= String(Number.MAX_SAFE_INTEGER).length ? value : parseInt(value, 10);
    }
    function compareBigNumbers(first, second) {
        if (!first && !second) {
            return 0;
        }
        if (!first || !second) {
            return first ? 1 : -1;
        }
        return first.cmp(second);
    }
    function createBigWithoutTrailingZeros(value) {
        if (!value) {
            return null;
        }
        var big = new Big(value);
        while (big.c[big.c.length - 1] === 0 && big.c.length > 1) {
            big.c.pop();
        }
        return big;
    }
    function removeNonNumberCharacters(value) {
        return (isNotNullOrUndefined(value) ? value : '')
            .toString()
            .replace(/[^0-9,.eE\s-]/g, '')
            .replace(/-/g, function (str, index) { return (index > 0 ? '' : str); });
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var formattingTags = [
        'strong',
        'em',
        'i',
        'sup',
        'sub',
        'u',
        'strike',
        's',
        'del',
        'cite',
        'code',
        'b',
        'span',
        'p',
        'br',
    ];
    function stripTextHtmlTags(text, keepFormattingTags) {
        if (keepFormattingTags === void 0) { keepFormattingTags = true; }
        var htmlWithoutTags = keepFormattingTags
            ? stripFormattingHtmlTags(text, true)
            : stripFormattingHtmlTags(text)
                .replace(/<(?:.|\s)*?>/g, ' ')
                .trim();
        return htmlWithoutTags.replace(/class=".*?"/g, '');
    }
    function stripFormattingHtmlTags(text, negative) {
        var negativePart = negative ? '?!' : '';
        return (text || '')
            .replace(new RegExp("<(" + negativePart + "/?(" + formattingTags.join('|') + ")s*/?)[^>]*>", 'g'), negative ? ' ' : '')
            .trim();
    }
    function formatUnknownDataValue(value, skipDecimal) {
        if (skipDecimal === void 0) { skipDecimal = false; }
        if (value || value === 0) {
            if (!skipDecimal && !isNaN(+value)) {
                return decimalStoreToUser(String(value));
            }
            return String(value);
        }
        return '';
    }
    var separator = '.';
    function decimalUserToStore(value) {
        return  value ;
    }
    function decimalStoreToUser(value, customSeparator) {
        var currentSeparator = customSeparator || separator;
        return currentSeparator === '.' ? value : value.replace('.', currentSeparator);
    }
    function convertToBig(value, defaultValue) {
        try {
            return new Big(String(value));
        }
        catch (e) {
            return isNotNullOrUndefined(defaultValue) ? new Big(defaultValue) : null;
        }
    }
    function roundBigNumber(big, decimalPlaces) {
        if (big && isNotNullOrUndefined(decimalPlaces) && decimalPlaces >= 0) {
            return big.round(decimalPlaces, 1 /* RoundHalfUp */);
        }
        return big;
    }
    var EMAIL_REGEX = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    function isEmailValid(email) {
        return email && EMAIL_REGEX.test(email);
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function medianInNumericValues(values, onlyNumeric) {
        var bigValues = transformToBigValues(values).sort(function (a, b) { return a.cmp(b); });
        if (bigValues.length === 0) {
            return onlyNumeric ? null : values[0];
        }
        else if (bigValues.length === 1) {
            return toNumber(bigValues[0].toFixed());
        }
        var middle = Math.floor(bigValues.length / 2);
        if (bigValues.length % 2 === 0) {
            return toNumber(bigValues[middle]
                .plus(bigValues[middle - 1])
                .div(new Big(2))
                .toFixed());
        }
        return toNumber(bigValues[middle].toFixed());
    }
    function medianInAnyValues(values, onlyNumeric) {
        var nonZeroValues = values.filter(function (val) { return val !== 0 && val !== '0'; });
        var containsOnlyPercentValues = nonZeroValues.length > 0 && nonZeroValues.every(function (val) { return isPercentageValue(val); });
        if (containsOnlyPercentValues && !onlyNumeric) {
            var percentageNumericValues = mapPercentageValues(nonZeroValues);
            return median(percentageNumericValues, onlyNumeric) + "%";
        }
        var numericValues = values.filter(function (value) { return isNumeric(value); });
        return median(numericValues, onlyNumeric);
    }
    function median(values, onlyNumeric) {
        if (values.length === 0) {
            return onlyNumeric ? null : values[0] || 0;
        }
        else if (values.length === 1) {
            return values[0];
        }
        var valuesSorted = values.sort(function (a, b) { return a - b; });
        var middle = Math.floor(values.length / 2);
        if (valuesSorted.length % 2 === 0) {
            return (valuesSorted[middle] + valuesSorted[middle - 1]) / 2;
        }
        return valuesSorted[middle];
    }
    function sumNumericValues(values, onlyNumeric) {
        var bigValues = transformToBigValues(values);
        if (bigValues.length === 0) {
            return onlyNumeric ? null : values[0];
        }
        return toNumber(bigValues.reduce(function (sum, val) { return sum.add(val); }, new Big(0)).toFixed());
    }
    function transformToBigValues(values) {
        return values.map(function (value) { return convertToBig(value); }).filter(function (value) { return !!value; });
    }
    function sumAnyValues(values, onlyNumeric) {
        var nonZeroValues = values.filter(function (val) { return val !== 0 && val !== '0'; });
        var containsOnlyPercentValues = nonZeroValues.length > 0 && nonZeroValues.every(function (val) { return isPercentageValue(val); });
        if (containsOnlyPercentValues && !onlyNumeric) {
            var percentageNumericValues = mapPercentageValues(nonZeroValues);
            var percentSum = percentageNumericValues.reduce(function (sum, value) { return sum + toNumber(value); }, 0);
            return percentSum + "%";
        }
        var numericValues = values.filter(function (value) { return isNumeric(value); });
        if (numericValues.length === 0) {
            return onlyNumeric ? null : values[0] || 0;
        }
        return numericValues.reduce(function (sum, value) { return sum + toNumber(value); }, 0);
    }
    function isPercentageValue(value) {
        if (!value) {
            return false;
        }
        var parts = String(value).split('%', 2);
        return parts.length === 2 && isNumeric(parts[0]) && parts[1].length === 0;
    }
    function mapPercentageValues(values) {
        return values.map(function (value) { return toNumber(String(value).split('%', 2)[0]); });
    }
    function avgNumericValues(values, onlyNumeric) {
        var bigValues = transformToBigValues(values);
        if (bigValues.length === 0) {
            return onlyNumeric ? null : values[0];
        }
        return toNumber(bigValues
            .reduce(function (sum, val) { return sum.add(val); }, new Big(0))
            .div(values.length)
            .toFixed());
    }
    function avgAnyValues(values, onlyNumeric) {
        var nonZeroValues = values.filter(function (val) { return val !== 0 && val !== '0'; });
        var containsOnlyPercentValues = nonZeroValues.length > 0 && nonZeroValues.every(function (val) { return isPercentageValue(val); });
        if (containsOnlyPercentValues && !onlyNumeric) {
            var percentageNumericValues = mapPercentageValues(nonZeroValues);
            var avg = percentageNumericValues.reduce(function (sum, value) { return sum + toNumber(value); }, 0) / percentageNumericValues.length;
            return avg + "%";
        }
        var numericValues = values.filter(function (value) { return isNumeric(value); });
        if (numericValues.length === 0) {
            return onlyNumeric ? null : values[0] || 0;
        }
        return numericValues.reduce(function (sum, value) { return sum + toNumber(value); }, 0) / numericValues.length;
    }
    function minInNumericValues(values, onlyNumeric) {
        var bigValues = transformToBigValues(values);
        if (bigValues.length === 0) {
            return onlyNumeric ? null : values[0];
        }
        return toNumber(bigValues.reduce(function (minValue, value) { return (value.cmp(minValue) < 0 ? value : minValue); }, bigValues[0]).toFixed());
    }
    function minInAnyValues(values, onlyNumeric) {
        var filteredValues = onlyNumeric ? values.filter(function (value) { return isNumeric(value); }).map(function (value) { return toNumber(value); }) : values;
        return filteredValues.reduce(function (minValue, value) { return (value < minValue ? value : minValue); }, filteredValues[0]);
    }
    function maxInNumericValues(values, onlyNumeric) {
        var bigValues = transformToBigValues(values);
        if (bigValues.length === 0) {
            return onlyNumeric ? null : values[0];
        }
        return toNumber(bigValues.reduce(function (minValue, value) { return (value.cmp(minValue) > 0 ? value : minValue); }, bigValues[0]).toFixed());
    }
    function maxInAnyValues(values, onlyNumeric) {
        var filteredValues = onlyNumeric ? values.filter(function (value) { return isNumeric(value); }).map(function (value) { return toNumber(value); }) : values;
        return filteredValues.reduce(function (maxValue, value) { return (value > maxValue ? value : maxValue); }, filteredValues[0]);
    }
    function countValues(values, onlyNumeric) {
        var filteredValues = onlyNumeric ? values.filter(function (value) { return isNumeric(value); }) : values;
        return filteredValues.length;
    }
    function uniqueValuesCount(values, onlyNumeric) {
        var filteredValues = onlyNumeric ? values.filter(function (value) { return isNumeric(value); }) : values;
        return uniqueValues(filteredValues).length;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function prolongShortHexColor(shortHex) {
        if (!shortHex) {
            return '';
        }
        return ('#' +
            String(shortHex)
                .slice(shortHex.startsWith('#') ? 1 : 0)
                .split('')
                .map(function (letter) { return letter + letter; })
                .join(''));
    }
    function convertRgbColorToHex(rgb) {
        if (!rgb) {
            return '';
        }
        var value = '#' +
            rgb
                .slice(4, -1)
                .split(',')
                .map(function (val) { return completeStringWithCharacter(Number(val.trim()).toString(16), 2, '0'); })
                .join('');
        return /^#?[0-9a-f]{6}$/.test(value) ? value : '';
    }
    function convertHslColorToHex(hsl) {
        if (!hsl) {
            return '';
        }
        var _a = hsl
            .trim()
            .slice(4, -1)
            .split(',')
            .map(function (value) { return value.trim(); })
            .map(function (value) { return (value.endsWith('%') ? value.slice(0, -1) : value); })
            .map(function (value) { return Number(value); }), hue = _a[0], saturation = _a[1], lightness = _a[2];
        hue /= 360;
        saturation /= 100;
        lightness /= 100;
        var red, green, blue;
        if (saturation === 0) {
            red = green = blue = lightness; // achromatic
        }
        else {
            var q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
            var p = 2 * lightness - q;
            red = hueToRgb(p, q, hue + 1 / 3);
            green = hueToRgb(p, q, hue);
            blue = hueToRgb(p, q, hue - 1 / 3);
        }
        return "#" + colorToHex(red) + colorToHex(green) + colorToHex(blue);
    }
    function hueToRgb(p, q, t) {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6)
            return p + (q - p) * 6 * t;
        if (t < 1 / 2)
            return q;
        if (t < 2 / 3)
            return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    }
    function colorToHex(x) {
        return completeStringWithCharacter(Math.round(x * 255).toString(16), 2, '0');
    }

    // Generated by CoffeeScript 2.5.1
    var Validator;

    Validator = class Validator {
        isValid(coordinates) {
            var isValid;
            isValid = true;
            try {
                this.validate(coordinates);
                return isValid;
            } catch (error) {
                isValid = false;
                return isValid;
            }
        }

        validate(coordinates) {
            this.checkContainsNoLetters(coordinates);
            this.checkValidOrientation(coordinates);
            return this.checkNumbers(coordinates);
        }

        checkContainsNoLetters(coordinates) {
            var containsLetters;
            containsLetters = /(?![neswd])[a-z]/i.test(coordinates);
            if (containsLetters) {
                throw new Error('Coordinate contains invalid alphanumeric characters.');
            }
        }

        checkValidOrientation(coordinates) {
            var validOrientation;
            validOrientation = /^[^nsew]*[ns]?[^nsew]*[ew]?[^nsew]*$/i.test(coordinates);
            if (!validOrientation) {
                throw new Error('Invalid cardinal direction.');
            }
        }

        checkNumbers(coordinates) {
            var coordinateNumbers;
            coordinateNumbers = coordinates.match(/-?\d+(\.\d+)?/g);
            this.checkAnyCoordinateNumbers(coordinateNumbers);
            this.checkEvenCoordinateNumbers(coordinateNumbers);
            return this.checkMaximumCoordinateNumbers(coordinateNumbers);
        }

        checkAnyCoordinateNumbers(coordinateNumbers) {
            if (coordinateNumbers.length === 0) {
                throw new Error('Could not find any coordinate number');
            }
        }

        checkEvenCoordinateNumbers(coordinateNumbers) {
            var isUnevenNumbers;
            isUnevenNumbers = coordinateNumbers.length % 2;
            if (isUnevenNumbers) {
                throw new Error('Uneven count of latitude/longitude numbers');
            }
        }

        checkMaximumCoordinateNumbers(coordinateNumbers) {
            if (coordinateNumbers.length > 6) {
                throw new Error('Too many coordinate numbers');
            }
        }

    };

    var validator = Validator;

    // Generated by CoffeeScript 2.5.1
    var CoordinateNumber;

    CoordinateNumber = class CoordinateNumber {
        constructor(coordinateNumbers) {
            coordinateNumbers = this.normalizeCoordinateNumbers(coordinateNumbers);
            this.sign = this.normalizedSignOf(coordinateNumbers[0]);
            [this.degrees, this.minutes, this.seconds, this.milliseconds] = coordinateNumbers.map(Math.abs);
        }

        normalizeCoordinateNumbers(coordinateNumbers) {
            var currentNumber, i, j, len, normalizedNumbers;
            normalizedNumbers = [0, 0, 0, 0];
            for (i = j = 0, len = coordinateNumbers.length; j < len; i = ++j) {
                currentNumber = coordinateNumbers[i];
                normalizedNumbers[i] = parseFloat(currentNumber);
            }
            return normalizedNumbers;
        }

        normalizedSignOf(number) {
            if (number >= 0) {
                return 1;
            } else {
                return -1;
            }
        }

        detectSpecialFormats() {
            if (this.degreesCanBeSpecial()) {
                if (this.degreesCanBeMilliseconds()) {
                    return this.degreesAsMilliseconds();
                } else if (this.degreesCanBeDegreesMinutesAndSeconds()) {
                    return this.degreesAsDegreesMinutesAndSeconds();
                } else if (this.degreesCanBeDegreesAndMinutes()) {
                    return this.degreesAsDegreesAndMinutes();
                }
            }
        }

        degreesCanBeSpecial() {
            var canBe;
            canBe = false;
            if (!this.minutes && !this.seconds) {
                canBe = true;
            }
            return canBe;
        }

        degreesCanBeMilliseconds() {
            var canBe;
            if (this.degrees > 909090) {
                canBe = true;
            } else {
                canBe = false;
            }
            return canBe;
        }

        degreesAsMilliseconds() {
            this.milliseconds = this.degrees;
            return this.degrees = 0;
        }

        degreesCanBeDegreesMinutesAndSeconds() {
            var canBe;
            if (this.degrees > 9090) {
                canBe = true;
            } else {
                canBe = false;
            }
            return canBe;
        }

        degreesAsDegreesMinutesAndSeconds() {
            var newDegrees;
            newDegrees = Math.floor(this.degrees / 10000);
            this.minutes = Math.floor((this.degrees - newDegrees * 10000) / 100);
            this.seconds = Math.floor(this.degrees - newDegrees * 10000 - this.minutes * 100);
            return this.degrees = newDegrees;
        }

        degreesCanBeDegreesAndMinutes() {
            var canBe;
            if (this.degrees > 360) {
                canBe = true;
            } else {
                canBe = false;
            }
            return canBe;
        }

        degreesAsDegreesAndMinutes() {
            var newDegrees;
            newDegrees = Math.floor(this.degrees / 100);
            this.minutes = this.degrees - newDegrees * 100;
            return this.degrees = newDegrees;
        }

        toDecimal() {
            var decimalCoordinate;
            decimalCoordinate = this.sign * (this.degrees + this.minutes / 60 + this.seconds / 3600 + this.milliseconds / 3600000);
            return decimalCoordinate;
        }

    };

    var coordinateNumber = CoordinateNumber;

    // Generated by CoffeeScript 2.5.1
    var CoordinateNumber$1, Coordinates, Validator$1;

    Validator$1 = validator;

    CoordinateNumber$1 = coordinateNumber;

    Coordinates = class Coordinates {
        constructor(coordinateString) {
            this.coordinates = coordinateString;
            this.latitudeNumbers = null;
            this.longitudeNumbers = null;
            this.validate();
            this.parse();
        }

        validate() {
            var validator;
            validator = new Validator$1();
            return validator.validate(this.coordinates);
        }

        parse() {
            this.groupCoordinateNumbers();
            this.latitude = this.extractLatitude();
            return this.longitude = this.extractLongitude();
        }

        groupCoordinateNumbers() {
            var coordinateNumbers, numberCountEachCoordinate;
            coordinateNumbers = this.extractCoordinateNumbers(this.coordinates);
            numberCountEachCoordinate = coordinateNumbers.length / 2;
            this.latitudeNumbers = coordinateNumbers.slice(0, numberCountEachCoordinate);
            return this.longitudeNumbers = coordinateNumbers.slice((0 - numberCountEachCoordinate));
        }

        extractCoordinateNumbers(coordinates) {
            return coordinates.match(/-?\d+(\.\d+)?/g);
        }

        extractLatitude() {
            var latitude;
            latitude = this.coordinateNumbersToDecimal(this.latitudeNumbers);
            if (this.latitudeIsNegative()) {
                latitude = latitude * -1;
            }
            return latitude;
        }

        extractLongitude() {
            var longitude;
            longitude = this.coordinateNumbersToDecimal(this.longitudeNumbers);
            if (this.longitudeIsNegative()) {
                longitude = longitude * -1;
            }
            return longitude;
        }

        coordinateNumbersToDecimal(coordinateNumbers) {
            var coordinate, decimalCoordinate;
            coordinate = new CoordinateNumber$1(coordinateNumbers);
            coordinate.detectSpecialFormats();
            decimalCoordinate = coordinate.toDecimal();
            return decimalCoordinate;
        }

        latitudeIsNegative() {
            var isNegative;
            isNegative = this.coordinates.match(/s/i);
            return isNegative;
        }

        longitudeIsNegative() {
            var isNegative;
            isNegative = this.coordinates.match(/w/i);
            return isNegative;
        }

        getLatitude() {
            return this.latitude;
        }

        getLongitude() {
            return this.longitude;
        }

    };

    var coordinates = Coordinates;

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function parseCoordinates(value) {
        if (value && isNotNullOrUndefined(value.lat) && isNotNullOrUndefined(value.lng)) {
            return value;
        }
        var mappedValue = isNumeric(value) && !String(value).includes(',') ? value + ",0" : value;
        try {
            var coordinates$1 = new coordinates(mappedValue);
            return {
                lat: coordinates$1.getLatitude(),
                lng: coordinates$1.getLongitude(),
            };
        }
        catch (error) {
            return null;
        }
    }
    function formatCoordinates(coordinates, format, precision) {
        var safePrecision = precision && precision >= 0 && precision <= 20 ? precision : 0;
        if (format === exports.CoordinatesFormat.DegreesMinutesSeconds) {
            return formatCoordinatesToDegreesMinutesSeconds(coordinates, safePrecision);
        }
        return formatCoordinatesToDecimalDegrees(coordinates, safePrecision);
    }
    function formatCoordinatesToDecimalDegrees(coordinates, precision) {
        return formatStringCoordinates(coordinates.lng.toFixed(precision), coordinates.lat.toFixed(precision));
    }
    function formatCoordinatesToDegreesMinutesSeconds(coordinates, precision) {
        var longitude = formatNumberCoordinate(coordinates.lng, precision) + (coordinates.lng > 0 ? 'E' : 'W');
        var latitude = formatNumberCoordinate(coordinates.lat, precision) + (coordinates.lat > 0 ? 'N' : 'S');
        return formatStringCoordinates(longitude, latitude);
    }
    function formatNumberCoordinate(coordinate, precision) {
        var value = Math.abs(coordinate);
        var degrees = Math.floor(value);
        value -= degrees;
        value *= 60;
        var minutes = Math.floor(value);
        var seconds = (value - minutes) * 60;
        return degrees.toFixed(0) + "\u00B0 " + minutes.toFixed(0) + "' " + seconds.toFixed(precision) + "\" ";
    }
    function formatStringCoordinates(longitude, latitude) {
        return latitude + ", " + longitude;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var _a;
    (function (CurrencyPlacement) {
        CurrencyPlacement["prefix"] = "prefix";
        CurrencyPlacement["suffix"] = "suffix";
    })(exports.CurrencyPlacement || (exports.CurrencyPlacement = {}));
    var currencies = (_a = {},
        _a[exports.LanguageTag.Denmark] = {
            symbol: 'kr',
            code: 'DKK',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.Switzerland] = {
            symbol: 'CHF',
            code: 'CHF',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '’',
        },
        _a[exports.LanguageTag.NewZealand] = {
            symbol: '$',
            code: 'NZD',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.FrenchCanada] = {
            symbol: '$',
            code: 'CAD',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: '.',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Canada] = {
            symbol: '$',
            code: 'CAD',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Sweden] = {
            symbol: 'kr',
            code: 'SEK',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Norway] = {
            symbol: 'kr',
            code: 'NOK',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Finland] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Israel] = {
            symbol: '₪',
            code: 'ILS',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Spain] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.France] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Italy] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.England] = {
            symbol: '£',
            code: 'GBP',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Portugal] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Poland] = {
            symbol: 'zł',
            code: 'PLN',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Czech] = {
            symbol: 'Kč',
            code: 'CZK',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Slovak] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Hungary] = {
            symbol: 'Ft',
            code: 'HUF',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Austria] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Germany] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.USA] = {
            symbol: '$',
            code: 'USD',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Brazil] = {
            symbol: 'R$',
            code: 'BRL',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.Taiwan] = {
            symbol: 'NT$',
            code: 'TWD',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Netherlands] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.China] = {
            symbol: '¥',
            code: 'CNY',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Russia] = {
            symbol: '₽',
            code: 'RUB',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: false,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.Japan] = {
            symbol: '¥',
            code: 'JPY',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Australia] = {
            symbol: '$',
            code: 'AUD',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: true,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Ireland] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Malta] = {
            symbol: '€',
            code: 'EUR',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a[exports.LanguageTag.Turkey] = {
            symbol: '\u20BA',
            code: 'TRY',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: true,
            decimalSeparator: ',',
            thousandSeparator: '.',
        },
        _a[exports.LanguageTag.Ukraine] = {
            symbol: '\u20B4',
            code: 'UAH',
            placement: exports.CurrencyPlacement.suffix,
            spaceSeparated: false,
            decimalSeparator: ',',
            thousandSeparator: '\u00a0',
        },
        _a[exports.LanguageTag.India] = {
            symbol: '₹',
            code: 'INR',
            placement: exports.CurrencyPlacement.prefix,
            spaceSeparated: false,
            decimalSeparator: '.',
            thousandSeparator: ',',
        },
        _a);
    function getNumbroLanguage(currencyLanguage, locale, data) {
        var _a, _b, _c, _d;
        return {
            languageTag: currencyLanguage,
            delimiters: {
                thousands: currencies[currencyLanguage].thousandSeparator,
                decimal: currencies[currencyLanguage].decimalSeparator,
            },
            abbreviations: {
                thousand: ((_a = data === null || data === void 0 ? void 0 : data.abbreviations) === null || _a === void 0 ? void 0 : _a[0]) || '',
                million: ((_b = data === null || data === void 0 ? void 0 : data.abbreviations) === null || _b === void 0 ? void 0 : _b[1]) || '',
                billion: ((_c = data === null || data === void 0 ? void 0 : data.abbreviations) === null || _c === void 0 ? void 0 : _c[2]) || '',
                trillion: ((_d = data === null || data === void 0 ? void 0 : data.abbreviations) === null || _d === void 0 ? void 0 : _d[3]) || '',
            },
            ordinal: function (number) { return ordinal(number, data); },
            currency: {
                symbol: currencies[currencyLanguage].symbol,
                code: currencies[currencyLanguage].code,
                position: currencies[currencyLanguage].placement === exports.CurrencyPlacement.prefix ? 'prefix' : 'postfix',
            },
            currencyFormat: {
                totalLength: 4,
                spaceSeparated: locale === exports.LanguageTag.Czech,
                spaceSeparatedCurrency: currencies[currencyLanguage].spaceSeparated,
            },
            formats: {
                fourDigits: {
                    totalLength: 4,
                    spaceSeparated: locale === exports.LanguageTag.Czech,
                },
                fullWithTwoDecimals: {
                    output: 'currency',
                    mantissa: 2,
                    spaceSeparated: locale === exports.LanguageTag.Czech,
                },
                fullWithNoDecimals: {
                    output: 'currency',
                    spaceSeparated: locale === exports.LanguageTag.Czech,
                    mantissa: 0,
                },
                fullWithTwoDecimalsNoCurrency: {
                    mantissa: 2,
                },
            },
        };
    }
    function ordinal(num, data) {
        var _a, _b, _c, _d, _e;
        var b = num % 10;
        return ~~((num % 100) / 10) === 1
            ? ((_a = data === null || data === void 0 ? void 0 : data.ordinals) === null || _a === void 0 ? void 0 : _a[3]) || ''
            : b === 1
                ? ((_b = data === null || data === void 0 ? void 0 : data.ordinals) === null || _b === void 0 ? void 0 : _b[0]) || ''
                : b === 2
                    ? ((_c = data === null || data === void 0 ? void 0 : data.ordinals) === null || _c === void 0 ? void 0 : _c[1]) || ''
                    : b === 3
                        ? ((_d = data === null || data === void 0 ? void 0 : data.ordinals) === null || _d === void 0 ? void 0 : _d[2]) || ''
                        : ((_e = data === null || data === void 0 ? void 0 : data.ordinals) === null || _e === void 0 ? void 0 : _e[3]) || '';
    }

    var moment = createCommonjsModule(function (module, exports) {
        (function (global, factory) {
            module.exports = factory() ;
        }(commonjsGlobal, (function () {
            var hookCallback;

            function hooks() {
                return hookCallback.apply(null, arguments);
            }

            // This is done to register the method called with moment()
            // without creating circular dependencies.
            function setHookCallback(callback) {
                hookCallback = callback;
            }

            function isArray(input) {
                return (
                    input instanceof Array ||
                    Object.prototype.toString.call(input) === '[object Array]'
                );
            }

            function isObject(input) {
                // IE8 will treat undefined and null as object if it wasn't for
                // input != null
                return (
                    input != null &&
                    Object.prototype.toString.call(input) === '[object Object]'
                );
            }

            function hasOwnProp(a, b) {
                return Object.prototype.hasOwnProperty.call(a, b);
            }

            function isObjectEmpty(obj) {
                if (Object.getOwnPropertyNames) {
                    return Object.getOwnPropertyNames(obj).length === 0;
                } else {
                    var k;
                    for (k in obj) {
                        if (hasOwnProp(obj, k)) {
                            return false;
                        }
                    }
                    return true;
                }
            }

            function isUndefined(input) {
                return input === void 0;
            }

            function isNumber(input) {
                return (
                    typeof input === 'number' ||
                    Object.prototype.toString.call(input) === '[object Number]'
                );
            }

            function isDate(input) {
                return (
                    input instanceof Date ||
                    Object.prototype.toString.call(input) === '[object Date]'
                );
            }

            function map(arr, fn) {
                var res = [],
                    i;
                for (i = 0; i < arr.length; ++i) {
                    res.push(fn(arr[i], i));
                }
                return res;
            }

            function extend(a, b) {
                for (var i in b) {
                    if (hasOwnProp(b, i)) {
                        a[i] = b[i];
                    }
                }

                if (hasOwnProp(b, 'toString')) {
                    a.toString = b.toString;
                }

                if (hasOwnProp(b, 'valueOf')) {
                    a.valueOf = b.valueOf;
                }

                return a;
            }

            function createUTC(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, true).utc();
            }

            function defaultParsingFlags() {
                // We need to deep clone this object.
                return {
                    empty: false,
                    unusedTokens: [],
                    unusedInput: [],
                    overflow: -2,
                    charsLeftOver: 0,
                    nullInput: false,
                    invalidEra: null,
                    invalidMonth: null,
                    invalidFormat: false,
                    userInvalidated: false,
                    iso: false,
                    parsedDateParts: [],
                    era: null,
                    meridiem: null,
                    rfc2822: false,
                    weekdayMismatch: false,
                };
            }

            function getParsingFlags(m) {
                if (m._pf == null) {
                    m._pf = defaultParsingFlags();
                }
                return m._pf;
            }

            var some;
            if (Array.prototype.some) {
                some = Array.prototype.some;
            } else {
                some = function (fun) {
                    var t = Object(this),
                        len = t.length >>> 0,
                        i;

                    for (i = 0; i < len; i++) {
                        if (i in t && fun.call(this, t[i], i, t)) {
                            return true;
                        }
                    }

                    return false;
                };
            }

            function isValid(m) {
                if (m._isValid == null) {
                    var flags = getParsingFlags(m),
                        parsedParts = some.call(flags.parsedDateParts, function (i) {
                            return i != null;
                        }),
                        isNowValid =
                            !isNaN(m._d.getTime()) &&
                            flags.overflow < 0 &&
                            !flags.empty &&
                            !flags.invalidEra &&
                            !flags.invalidMonth &&
                            !flags.invalidWeekday &&
                            !flags.weekdayMismatch &&
                            !flags.nullInput &&
                            !flags.invalidFormat &&
                            !flags.userInvalidated &&
                            (!flags.meridiem || (flags.meridiem && parsedParts));

                    if (m._strict) {
                        isNowValid =
                            isNowValid &&
                            flags.charsLeftOver === 0 &&
                            flags.unusedTokens.length === 0 &&
                            flags.bigHour === undefined;
                    }

                    if (Object.isFrozen == null || !Object.isFrozen(m)) {
                        m._isValid = isNowValid;
                    } else {
                        return isNowValid;
                    }
                }
                return m._isValid;
            }

            function createInvalid(flags) {
                var m = createUTC(NaN);
                if (flags != null) {
                    extend(getParsingFlags(m), flags);
                } else {
                    getParsingFlags(m).userInvalidated = true;
                }

                return m;
            }

            // Plugins that add properties should also add the key here (null value),
            // so we can properly clone ourselves.
            var momentProperties = (hooks.momentProperties = []),
                updateInProgress = false;

            function copyConfig(to, from) {
                var i, prop, val;

                if (!isUndefined(from._isAMomentObject)) {
                    to._isAMomentObject = from._isAMomentObject;
                }
                if (!isUndefined(from._i)) {
                    to._i = from._i;
                }
                if (!isUndefined(from._f)) {
                    to._f = from._f;
                }
                if (!isUndefined(from._l)) {
                    to._l = from._l;
                }
                if (!isUndefined(from._strict)) {
                    to._strict = from._strict;
                }
                if (!isUndefined(from._tzm)) {
                    to._tzm = from._tzm;
                }
                if (!isUndefined(from._isUTC)) {
                    to._isUTC = from._isUTC;
                }
                if (!isUndefined(from._offset)) {
                    to._offset = from._offset;
                }
                if (!isUndefined(from._pf)) {
                    to._pf = getParsingFlags(from);
                }
                if (!isUndefined(from._locale)) {
                    to._locale = from._locale;
                }

                if (momentProperties.length > 0) {
                    for (i = 0; i < momentProperties.length; i++) {
                        prop = momentProperties[i];
                        val = from[prop];
                        if (!isUndefined(val)) {
                            to[prop] = val;
                        }
                    }
                }

                return to;
            }

            // Moment prototype object
            function Moment(config) {
                copyConfig(this, config);
                this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                if (!this.isValid()) {
                    this._d = new Date(NaN);
                }
                // Prevent infinite loop in case updateOffset creates new moment
                // objects.
                if (updateInProgress === false) {
                    updateInProgress = true;
                    hooks.updateOffset(this);
                    updateInProgress = false;
                }
            }

            function isMoment(obj) {
                return (
                    obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
                );
            }

            function warn(msg) {
                if (
                    hooks.suppressDeprecationWarnings === false &&
                    typeof console !== 'undefined' &&
                    console.warn
                ) {
                    console.warn('Deprecation warning: ' + msg);
                }
            }

            function deprecate(msg, fn) {
                var firstTime = true;

                return extend(function () {
                    if (hooks.deprecationHandler != null) {
                        hooks.deprecationHandler(null, msg);
                    }
                    if (firstTime) {
                        var args = [],
                            arg,
                            i,
                            key;
                        for (i = 0; i < arguments.length; i++) {
                            arg = '';
                            if (typeof arguments[i] === 'object') {
                                arg += '\n[' + i + '] ';
                                for (key in arguments[0]) {
                                    if (hasOwnProp(arguments[0], key)) {
                                        arg += key + ': ' + arguments[0][key] + ', ';
                                    }
                                }
                                arg = arg.slice(0, -2); // Remove trailing comma and space
                            } else {
                                arg = arguments[i];
                            }
                            args.push(arg);
                        }
                        warn(
                            msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                        );
                        firstTime = false;
                    }
                    return fn.apply(this, arguments);
                }, fn);
            }

            var deprecations = {};

            function deprecateSimple(name, msg) {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(name, msg);
                }
                if (!deprecations[name]) {
                    warn(msg);
                    deprecations[name] = true;
                }
            }

            hooks.suppressDeprecationWarnings = false;
            hooks.deprecationHandler = null;

            function isFunction(input) {
                return (
                    (typeof Function !== 'undefined' && input instanceof Function) ||
                    Object.prototype.toString.call(input) === '[object Function]'
                );
            }

            function set(config) {
                var prop, i;
                for (i in config) {
                    if (hasOwnProp(config, i)) {
                        prop = config[i];
                        if (isFunction(prop)) {
                            this[i] = prop;
                        } else {
                            this['_' + i] = prop;
                        }
                    }
                }
                this._config = config;
                // Lenient ordinal parsing accepts just a number in addition to
                // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
                // TODO: Remove "ordinalParse" fallback in next major release.
                this._dayOfMonthOrdinalParseLenient = new RegExp(
                    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
                );
            }

            function mergeConfigs(parentConfig, childConfig) {
                var res = extend({}, parentConfig),
                    prop;
                for (prop in childConfig) {
                    if (hasOwnProp(childConfig, prop)) {
                        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                            res[prop] = {};
                            extend(res[prop], parentConfig[prop]);
                            extend(res[prop], childConfig[prop]);
                        } else if (childConfig[prop] != null) {
                            res[prop] = childConfig[prop];
                        } else {
                            delete res[prop];
                        }
                    }
                }
                for (prop in parentConfig) {
                    if (
                        hasOwnProp(parentConfig, prop) &&
                        !hasOwnProp(childConfig, prop) &&
                        isObject(parentConfig[prop])
                    ) {
                        // make sure changes to properties don't modify parent config
                        res[prop] = extend({}, res[prop]);
                    }
                }
                return res;
            }

            function Locale(config) {
                if (config != null) {
                    this.set(config);
                }
            }

            var keys;

            if (Object.keys) {
                keys = Object.keys;
            } else {
                keys = function (obj) {
                    var i,
                        res = [];
                    for (i in obj) {
                        if (hasOwnProp(obj, i)) {
                            res.push(i);
                        }
                    }
                    return res;
                };
            }

            var defaultCalendar = {
                sameDay: '[Today at] LT',
                nextDay: '[Tomorrow at] LT',
                nextWeek: 'dddd [at] LT',
                lastDay: '[Yesterday at] LT',
                lastWeek: '[Last] dddd [at] LT',
                sameElse: 'L',
            };

            function calendar(key, mom, now) {
                var output = this._calendar[key] || this._calendar['sameElse'];
                return isFunction(output) ? output.call(mom, now) : output;
            }

            function zeroFill(number, targetLength, forceSign) {
                var absNumber = '' + Math.abs(number),
                    zerosToFill = targetLength - absNumber.length,
                    sign = number >= 0;
                return (
                    (sign ? (forceSign ? '+' : '') : '-') +
                    Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                    absNumber
                );
            }

            var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
                localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
                formatFunctions = {},
                formatTokenFunctions = {};

            // token:    'M'
            // padded:   ['MM', 2]
            // ordinal:  'Mo'
            // callback: function () { this.month() + 1 }
            function addFormatToken(token, padded, ordinal, callback) {
                var func = callback;
                if (typeof callback === 'string') {
                    func = function () {
                        return this[callback]();
                    };
                }
                if (token) {
                    formatTokenFunctions[token] = func;
                }
                if (padded) {
                    formatTokenFunctions[padded[0]] = function () {
                        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                    };
                }
                if (ordinal) {
                    formatTokenFunctions[ordinal] = function () {
                        return this.localeData().ordinal(
                            func.apply(this, arguments),
                            token
                        );
                    };
                }
            }

            function removeFormattingTokens(input) {
                if (input.match(/\[[\s\S]/)) {
                    return input.replace(/^\[|\]$/g, '');
                }
                return input.replace(/\\/g, '');
            }

            function makeFormatFunction(format) {
                var array = format.match(formattingTokens),
                    i,
                    length;

                for (i = 0, length = array.length; i < length; i++) {
                    if (formatTokenFunctions[array[i]]) {
                        array[i] = formatTokenFunctions[array[i]];
                    } else {
                        array[i] = removeFormattingTokens(array[i]);
                    }
                }

                return function (mom) {
                    var output = '',
                        i;
                    for (i = 0; i < length; i++) {
                        output += isFunction(array[i])
                            ? array[i].call(mom, format)
                            : array[i];
                    }
                    return output;
                };
            }

            // format date using native date object
            function formatMoment(m, format) {
                if (!m.isValid()) {
                    return m.localeData().invalidDate();
                }

                format = expandFormat(format, m.localeData());
                formatFunctions[format] =
                    formatFunctions[format] || makeFormatFunction(format);

                return formatFunctions[format](m);
            }

            function expandFormat(format, locale) {
                var i = 5;

                function replaceLongDateFormatTokens(input) {
                    return locale.longDateFormat(input) || input;
                }

                localFormattingTokens.lastIndex = 0;
                while (i >= 0 && localFormattingTokens.test(format)) {
                    format = format.replace(
                        localFormattingTokens,
                        replaceLongDateFormatTokens
                    );
                    localFormattingTokens.lastIndex = 0;
                    i -= 1;
                }

                return format;
            }

            var defaultLongDateFormat = {
                LTS: 'h:mm:ss A',
                LT: 'h:mm A',
                L: 'MM/DD/YYYY',
                LL: 'MMMM D, YYYY',
                LLL: 'MMMM D, YYYY h:mm A',
                LLLL: 'dddd, MMMM D, YYYY h:mm A',
            };

            function longDateFormat(key) {
                var format = this._longDateFormat[key],
                    formatUpper = this._longDateFormat[key.toUpperCase()];

                if (format || !formatUpper) {
                    return format;
                }

                this._longDateFormat[key] = formatUpper
                    .match(formattingTokens)
                    .map(function (tok) {
                        if (
                            tok === 'MMMM' ||
                            tok === 'MM' ||
                            tok === 'DD' ||
                            tok === 'dddd'
                        ) {
                            return tok.slice(1);
                        }
                        return tok;
                    })
                    .join('');

                return this._longDateFormat[key];
            }

            var defaultInvalidDate = 'Invalid date';

            function invalidDate() {
                return this._invalidDate;
            }

            var defaultOrdinal = '%d',
                defaultDayOfMonthOrdinalParse = /\d{1,2}/;

            function ordinal(number) {
                return this._ordinal.replace('%d', number);
            }

            var defaultRelativeTime = {
                future: 'in %s',
                past: '%s ago',
                s: 'a few seconds',
                ss: '%d seconds',
                m: 'a minute',
                mm: '%d minutes',
                h: 'an hour',
                hh: '%d hours',
                d: 'a day',
                dd: '%d days',
                w: 'a week',
                ww: '%d weeks',
                M: 'a month',
                MM: '%d months',
                y: 'a year',
                yy: '%d years',
            };

            function relativeTime(number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return isFunction(output)
                    ? output(number, withoutSuffix, string, isFuture)
                    : output.replace(/%d/i, number);
            }

            function pastFuture(diff, output) {
                var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                return isFunction(format) ? format(output) : format.replace(/%s/i, output);
            }

            var aliases = {};

            function addUnitAlias(unit, shorthand) {
                var lowerCase = unit.toLowerCase();
                aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
            }

            function normalizeUnits(units) {
                return typeof units === 'string'
                    ? aliases[units] || aliases[units.toLowerCase()]
                    : undefined;
            }

            function normalizeObjectUnits(inputObject) {
                var normalizedInput = {},
                    normalizedProp,
                    prop;

                for (prop in inputObject) {
                    if (hasOwnProp(inputObject, prop)) {
                        normalizedProp = normalizeUnits(prop);
                        if (normalizedProp) {
                            normalizedInput[normalizedProp] = inputObject[prop];
                        }
                    }
                }

                return normalizedInput;
            }

            var priorities = {};

            function addUnitPriority(unit, priority) {
                priorities[unit] = priority;
            }

            function getPrioritizedUnits(unitsObj) {
                var units = [],
                    u;
                for (u in unitsObj) {
                    if (hasOwnProp(unitsObj, u)) {
                        units.push({ unit: u, priority: priorities[u] });
                    }
                }
                units.sort(function (a, b) {
                    return a.priority - b.priority;
                });
                return units;
            }

            function isLeapYear(year) {
                return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
            }

            function absFloor(number) {
                if (number < 0) {
                    // -0 -> 0
                    return Math.ceil(number) || 0;
                } else {
                    return Math.floor(number);
                }
            }

            function toInt(argumentForCoercion) {
                var coercedNumber = +argumentForCoercion,
                    value = 0;

                if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                    value = absFloor(coercedNumber);
                }

                return value;
            }

            function makeGetSet(unit, keepTime) {
                return function (value) {
                    if (value != null) {
                        set$1(this, unit, value);
                        hooks.updateOffset(this, keepTime);
                        return this;
                    } else {
                        return get(this, unit);
                    }
                };
            }

            function get(mom, unit) {
                return mom.isValid()
                    ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
                    : NaN;
            }

            function set$1(mom, unit, value) {
                if (mom.isValid() && !isNaN(value)) {
                    if (
                        unit === 'FullYear' &&
                        isLeapYear(mom.year()) &&
                        mom.month() === 1 &&
                        mom.date() === 29
                    ) {
                        value = toInt(value);
                        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                            value,
                            mom.month(),
                            daysInMonth(value, mom.month())
                        );
                    } else {
                        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                    }
                }
            }

            // MOMENTS

            function stringGet(units) {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units]();
                }
                return this;
            }

            function stringSet(units, value) {
                if (typeof units === 'object') {
                    units = normalizeObjectUnits(units);
                    var prioritized = getPrioritizedUnits(units),
                        i;
                    for (i = 0; i < prioritized.length; i++) {
                        this[prioritized[i].unit](units[prioritized[i].unit]);
                    }
                } else {
                    units = normalizeUnits(units);
                    if (isFunction(this[units])) {
                        return this[units](value);
                    }
                }
                return this;
            }

            var match1 = /\d/, //       0 - 9
                match2 = /\d\d/, //      00 - 99
                match3 = /\d{3}/, //     000 - 999
                match4 = /\d{4}/, //    0000 - 9999
                match6 = /[+-]?\d{6}/, // -999999 - 999999
                match1to2 = /\d\d?/, //       0 - 99
                match3to4 = /\d\d\d\d?/, //     999 - 9999
                match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
                match1to3 = /\d{1,3}/, //       0 - 999
                match1to4 = /\d{1,4}/, //       0 - 9999
                match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
                matchUnsigned = /\d+/, //       0 - inf
                matchSigned = /[+-]?\d+/, //    -inf - inf
                matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
                matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
                matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
                // any word (or two) characters or numbers including two/three word month in arabic.
                // includes scottish gaelic two word and hyphenated months
                matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
                regexes;

            regexes = {};

            function addRegexToken(token, regex, strictRegex) {
                regexes[token] = isFunction(regex)
                    ? regex
                    : function (isStrict, localeData) {
                        return isStrict && strictRegex ? strictRegex : regex;
                    };
            }

            function getParseRegexForToken(token, config) {
                if (!hasOwnProp(regexes, token)) {
                    return new RegExp(unescapeFormat(token));
                }

                return regexes[token](config._strict, config._locale);
            }

            // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
            function unescapeFormat(s) {
                return regexEscape(
                    s
                        .replace('\\', '')
                        .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                            matched,
                            p1,
                            p2,
                            p3,
                            p4
                        ) {
                            return p1 || p2 || p3 || p4;
                        })
                );
            }

            function regexEscape(s) {
                return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            }

            var tokens = {};

            function addParseToken(token, callback) {
                var i,
                    func = callback;
                if (typeof token === 'string') {
                    token = [token];
                }
                if (isNumber(callback)) {
                    func = function (input, array) {
                        array[callback] = toInt(input);
                    };
                }
                for (i = 0; i < token.length; i++) {
                    tokens[token[i]] = func;
                }
            }

            function addWeekParseToken(token, callback) {
                addParseToken(token, function (input, array, config, token) {
                    config._w = config._w || {};
                    callback(input, config._w, config, token);
                });
            }

            function addTimeToArrayFromToken(token, input, config) {
                if (input != null && hasOwnProp(tokens, token)) {
                    tokens[token](input, config._a, config, token);
                }
            }

            var YEAR = 0,
                MONTH = 1,
                DATE = 2,
                HOUR = 3,
                MINUTE = 4,
                SECOND = 5,
                MILLISECOND = 6,
                WEEK = 7,
                WEEKDAY = 8;

            function mod(n, x) {
                return ((n % x) + x) % x;
            }

            var indexOf;

            if (Array.prototype.indexOf) {
                indexOf = Array.prototype.indexOf;
            } else {
                indexOf = function (o) {
                    // I know
                    var i;
                    for (i = 0; i < this.length; ++i) {
                        if (this[i] === o) {
                            return i;
                        }
                    }
                    return -1;
                };
            }

            function daysInMonth(year, month) {
                if (isNaN(year) || isNaN(month)) {
                    return NaN;
                }
                var modMonth = mod(month, 12);
                year += (month - modMonth) / 12;
                return modMonth === 1
                    ? isLeapYear(year)
                        ? 29
                        : 28
                    : 31 - ((modMonth % 7) % 2);
            }

            // FORMATTING

            addFormatToken('M', ['MM', 2], 'Mo', function () {
                return this.month() + 1;
            });

            addFormatToken('MMM', 0, 0, function (format) {
                return this.localeData().monthsShort(this, format);
            });

            addFormatToken('MMMM', 0, 0, function (format) {
                return this.localeData().months(this, format);
            });

            // ALIASES

            addUnitAlias('month', 'M');

            // PRIORITY

            addUnitPriority('month', 8);

            // PARSING

            addRegexToken('M', match1to2);
            addRegexToken('MM', match1to2, match2);
            addRegexToken('MMM', function (isStrict, locale) {
                return locale.monthsShortRegex(isStrict);
            });
            addRegexToken('MMMM', function (isStrict, locale) {
                return locale.monthsRegex(isStrict);
            });

            addParseToken(['M', 'MM'], function (input, array) {
                array[MONTH] = toInt(input) - 1;
            });

            addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
                var month = config._locale.monthsParse(input, token, config._strict);
                // if we didn't find a month name, mark the date as invalid.
                if (month != null) {
                    array[MONTH] = month;
                } else {
                    getParsingFlags(config).invalidMonth = input;
                }
            });

            // LOCALES

            var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
                ),
                defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
                    '_'
                ),
                MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
                defaultMonthsShortRegex = matchWord,
                defaultMonthsRegex = matchWord;

            function localeMonths(m, format) {
                if (!m) {
                    return isArray(this._months)
                        ? this._months
                        : this._months['standalone'];
                }
                return isArray(this._months)
                    ? this._months[m.month()]
                    : this._months[
                        (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                            ? 'format'
                            : 'standalone'
                        ][m.month()];
            }

            function localeMonthsShort(m, format) {
                if (!m) {
                    return isArray(this._monthsShort)
                        ? this._monthsShort
                        : this._monthsShort['standalone'];
                }
                return isArray(this._monthsShort)
                    ? this._monthsShort[m.month()]
                    : this._monthsShort[
                        MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                        ][m.month()];
            }

            function handleStrictParse(monthName, format, strict) {
                var i,
                    ii,
                    mom,
                    llc = monthName.toLocaleLowerCase();
                if (!this._monthsParse) {
                    // this is not used
                    this._monthsParse = [];
                    this._longMonthsParse = [];
                    this._shortMonthsParse = [];
                    for (i = 0; i < 12; ++i) {
                        mom = createUTC([2000, i]);
                        this._shortMonthsParse[i] = this.monthsShort(
                            mom,
                            ''
                        ).toLocaleLowerCase();
                        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                    }
                }

                if (strict) {
                    if (format === 'MMM') {
                        ii = indexOf.call(this._shortMonthsParse, llc);
                        return ii !== -1 ? ii : null;
                    } else {
                        ii = indexOf.call(this._longMonthsParse, llc);
                        return ii !== -1 ? ii : null;
                    }
                } else {
                    if (format === 'MMM') {
                        ii = indexOf.call(this._shortMonthsParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._longMonthsParse, llc);
                        return ii !== -1 ? ii : null;
                    } else {
                        ii = indexOf.call(this._longMonthsParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._shortMonthsParse, llc);
                        return ii !== -1 ? ii : null;
                    }
                }
            }

            function localeMonthsParse(monthName, format, strict) {
                var i, mom, regex;

                if (this._monthsParseExact) {
                    return handleStrictParse.call(this, monthName, format, strict);
                }

                if (!this._monthsParse) {
                    this._monthsParse = [];
                    this._longMonthsParse = [];
                    this._shortMonthsParse = [];
                }

                // TODO: add sorting
                // Sorting makes sure if one month (or abbr) is a prefix of another
                // see sorting in computeMonthsParse
                for (i = 0; i < 12; i++) {
                    // make the regex if we don't have it already
                    mom = createUTC([2000, i]);
                    if (strict && !this._longMonthsParse[i]) {
                        this._longMonthsParse[i] = new RegExp(
                            '^' + this.months(mom, '').replace('.', '') + '$',
                            'i'
                        );
                        this._shortMonthsParse[i] = new RegExp(
                            '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                            'i'
                        );
                    }
                    if (!strict && !this._monthsParse[i]) {
                        regex =
                            '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                    }
                    // test the regex
                    if (
                        strict &&
                        format === 'MMMM' &&
                        this._longMonthsParse[i].test(monthName)
                    ) {
                        return i;
                    } else if (
                        strict &&
                        format === 'MMM' &&
                        this._shortMonthsParse[i].test(monthName)
                    ) {
                        return i;
                    } else if (!strict && this._monthsParse[i].test(monthName)) {
                        return i;
                    }
                }
            }

            // MOMENTS

            function setMonth(mom, value) {
                var dayOfMonth;

                if (!mom.isValid()) {
                    // No op
                    return mom;
                }

                if (typeof value === 'string') {
                    if (/^\d+$/.test(value)) {
                        value = toInt(value);
                    } else {
                        value = mom.localeData().monthsParse(value);
                        // TODO: Another silent failure?
                        if (!isNumber(value)) {
                            return mom;
                        }
                    }
                }

                dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
                return mom;
            }

            function getSetMonth(value) {
                if (value != null) {
                    setMonth(this, value);
                    hooks.updateOffset(this, true);
                    return this;
                } else {
                    return get(this, 'Month');
                }
            }

            function getDaysInMonth() {
                return daysInMonth(this.year(), this.month());
            }

            function monthsShortRegex(isStrict) {
                if (this._monthsParseExact) {
                    if (!hasOwnProp(this, '_monthsRegex')) {
                        computeMonthsParse.call(this);
                    }
                    if (isStrict) {
                        return this._monthsShortStrictRegex;
                    } else {
                        return this._monthsShortRegex;
                    }
                } else {
                    if (!hasOwnProp(this, '_monthsShortRegex')) {
                        this._monthsShortRegex = defaultMonthsShortRegex;
                    }
                    return this._monthsShortStrictRegex && isStrict
                        ? this._monthsShortStrictRegex
                        : this._monthsShortRegex;
                }
            }

            function monthsRegex(isStrict) {
                if (this._monthsParseExact) {
                    if (!hasOwnProp(this, '_monthsRegex')) {
                        computeMonthsParse.call(this);
                    }
                    if (isStrict) {
                        return this._monthsStrictRegex;
                    } else {
                        return this._monthsRegex;
                    }
                } else {
                    if (!hasOwnProp(this, '_monthsRegex')) {
                        this._monthsRegex = defaultMonthsRegex;
                    }
                    return this._monthsStrictRegex && isStrict
                        ? this._monthsStrictRegex
                        : this._monthsRegex;
                }
            }

            function computeMonthsParse() {
                function cmpLenRev(a, b) {
                    return b.length - a.length;
                }

                var shortPieces = [],
                    longPieces = [],
                    mixedPieces = [],
                    i,
                    mom;
                for (i = 0; i < 12; i++) {
                    // make the regex if we don't have it already
                    mom = createUTC([2000, i]);
                    shortPieces.push(this.monthsShort(mom, ''));
                    longPieces.push(this.months(mom, ''));
                    mixedPieces.push(this.months(mom, ''));
                    mixedPieces.push(this.monthsShort(mom, ''));
                }
                // Sorting makes sure if one month (or abbr) is a prefix of another it
                // will match the longer piece.
                shortPieces.sort(cmpLenRev);
                longPieces.sort(cmpLenRev);
                mixedPieces.sort(cmpLenRev);
                for (i = 0; i < 12; i++) {
                    shortPieces[i] = regexEscape(shortPieces[i]);
                    longPieces[i] = regexEscape(longPieces[i]);
                }
                for (i = 0; i < 24; i++) {
                    mixedPieces[i] = regexEscape(mixedPieces[i]);
                }

                this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                this._monthsShortRegex = this._monthsRegex;
                this._monthsStrictRegex = new RegExp(
                    '^(' + longPieces.join('|') + ')',
                    'i'
                );
                this._monthsShortStrictRegex = new RegExp(
                    '^(' + shortPieces.join('|') + ')',
                    'i'
                );
            }

            // FORMATTING

            addFormatToken('Y', 0, 0, function () {
                var y = this.year();
                return y <= 9999 ? zeroFill(y, 4) : '+' + y;
            });

            addFormatToken(0, ['YY', 2], 0, function () {
                return this.year() % 100;
            });

            addFormatToken(0, ['YYYY', 4], 0, 'year');
            addFormatToken(0, ['YYYYY', 5], 0, 'year');
            addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

            // ALIASES

            addUnitAlias('year', 'y');

            // PRIORITIES

            addUnitPriority('year', 1);

            // PARSING

            addRegexToken('Y', matchSigned);
            addRegexToken('YY', match1to2, match2);
            addRegexToken('YYYY', match1to4, match4);
            addRegexToken('YYYYY', match1to6, match6);
            addRegexToken('YYYYYY', match1to6, match6);

            addParseToken(['YYYYY', 'YYYYYY'], YEAR);
            addParseToken('YYYY', function (input, array) {
                array[YEAR] =
                    input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
            });
            addParseToken('YY', function (input, array) {
                array[YEAR] = hooks.parseTwoDigitYear(input);
            });
            addParseToken('Y', function (input, array) {
                array[YEAR] = parseInt(input, 10);
            });

            // HELPERS

            function daysInYear(year) {
                return isLeapYear(year) ? 366 : 365;
            }

            // HOOKS

            hooks.parseTwoDigitYear = function (input) {
                return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
            };

            // MOMENTS

            var getSetYear = makeGetSet('FullYear', true);

            function getIsLeapYear() {
                return isLeapYear(this.year());
            }

            function createDate(y, m, d, h, M, s, ms) {
                // can't just apply() to create a date:
                // https://stackoverflow.com/q/181348
                var date;
                // the date constructor remaps years 0-99 to 1900-1999
                if (y < 100 && y >= 0) {
                    // preserve leap years using a full 400 year cycle, then reset
                    date = new Date(y + 400, m, d, h, M, s, ms);
                    if (isFinite(date.getFullYear())) {
                        date.setFullYear(y);
                    }
                } else {
                    date = new Date(y, m, d, h, M, s, ms);
                }

                return date;
            }

            function createUTCDate(y) {
                var date, args;
                // the Date.UTC function remaps years 0-99 to 1900-1999
                if (y < 100 && y >= 0) {
                    args = Array.prototype.slice.call(arguments);
                    // preserve leap years using a full 400 year cycle, then reset
                    args[0] = y + 400;
                    date = new Date(Date.UTC.apply(null, args));
                    if (isFinite(date.getUTCFullYear())) {
                        date.setUTCFullYear(y);
                    }
                } else {
                    date = new Date(Date.UTC.apply(null, arguments));
                }

                return date;
            }

            // start-of-first-week - start-of-year
            function firstWeekOffset(year, dow, doy) {
                var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                    fwd = 7 + dow - doy,
                    // first-week day local weekday -- which local weekday is fwd
                    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

                return -fwdlw + fwd - 1;
            }

            // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
            function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                var localWeekday = (7 + weekday - dow) % 7,
                    weekOffset = firstWeekOffset(year, dow, doy),
                    dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                    resYear,
                    resDayOfYear;

                if (dayOfYear <= 0) {
                    resYear = year - 1;
                    resDayOfYear = daysInYear(resYear) + dayOfYear;
                } else if (dayOfYear > daysInYear(year)) {
                    resYear = year + 1;
                    resDayOfYear = dayOfYear - daysInYear(year);
                } else {
                    resYear = year;
                    resDayOfYear = dayOfYear;
                }

                return {
                    year: resYear,
                    dayOfYear: resDayOfYear,
                };
            }

            function weekOfYear(mom, dow, doy) {
                var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                    week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                    resWeek,
                    resYear;

                if (week < 1) {
                    resYear = mom.year() - 1;
                    resWeek = week + weeksInYear(resYear, dow, doy);
                } else if (week > weeksInYear(mom.year(), dow, doy)) {
                    resWeek = week - weeksInYear(mom.year(), dow, doy);
                    resYear = mom.year() + 1;
                } else {
                    resYear = mom.year();
                    resWeek = week;
                }

                return {
                    week: resWeek,
                    year: resYear,
                };
            }

            function weeksInYear(year, dow, doy) {
                var weekOffset = firstWeekOffset(year, dow, doy),
                    weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
            }

            // FORMATTING

            addFormatToken('w', ['ww', 2], 'wo', 'week');
            addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

            // ALIASES

            addUnitAlias('week', 'w');
            addUnitAlias('isoWeek', 'W');

            // PRIORITIES

            addUnitPriority('week', 5);
            addUnitPriority('isoWeek', 5);

            // PARSING

            addRegexToken('w', match1to2);
            addRegexToken('ww', match1to2, match2);
            addRegexToken('W', match1to2);
            addRegexToken('WW', match1to2, match2);

            addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
                input,
                week,
                config,
                token
            ) {
                week[token.substr(0, 1)] = toInt(input);
            });

            // HELPERS

            // LOCALES

            function localeWeek(mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week;
            }

            var defaultLocaleWeek = {
                dow: 0, // Sunday is the first day of the week.
                doy: 6, // The week that contains Jan 6th is the first week of the year.
            };

            function localeFirstDayOfWeek() {
                return this._week.dow;
            }

            function localeFirstDayOfYear() {
                return this._week.doy;
            }

            // MOMENTS

            function getSetWeek(input) {
                var week = this.localeData().week(this);
                return input == null ? week : this.add((input - week) * 7, 'd');
            }

            function getSetISOWeek(input) {
                var week = weekOfYear(this, 1, 4).week;
                return input == null ? week : this.add((input - week) * 7, 'd');
            }

            // FORMATTING

            addFormatToken('d', 0, 'do', 'day');

            addFormatToken('dd', 0, 0, function (format) {
                return this.localeData().weekdaysMin(this, format);
            });

            addFormatToken('ddd', 0, 0, function (format) {
                return this.localeData().weekdaysShort(this, format);
            });

            addFormatToken('dddd', 0, 0, function (format) {
                return this.localeData().weekdays(this, format);
            });

            addFormatToken('e', 0, 0, 'weekday');
            addFormatToken('E', 0, 0, 'isoWeekday');

            // ALIASES

            addUnitAlias('day', 'd');
            addUnitAlias('weekday', 'e');
            addUnitAlias('isoWeekday', 'E');

            // PRIORITY
            addUnitPriority('day', 11);
            addUnitPriority('weekday', 11);
            addUnitPriority('isoWeekday', 11);

            // PARSING

            addRegexToken('d', match1to2);
            addRegexToken('e', match1to2);
            addRegexToken('E', match1to2);
            addRegexToken('dd', function (isStrict, locale) {
                return locale.weekdaysMinRegex(isStrict);
            });
            addRegexToken('ddd', function (isStrict, locale) {
                return locale.weekdaysShortRegex(isStrict);
            });
            addRegexToken('dddd', function (isStrict, locale) {
                return locale.weekdaysRegex(isStrict);
            });

            addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
                var weekday = config._locale.weekdaysParse(input, token, config._strict);
                // if we didn't get a weekday name, mark the date as invalid
                if (weekday != null) {
                    week.d = weekday;
                } else {
                    getParsingFlags(config).invalidWeekday = input;
                }
            });

            addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
                week[token] = toInt(input);
            });

            // HELPERS

            function parseWeekday(input, locale) {
                if (typeof input !== 'string') {
                    return input;
                }

                if (!isNaN(input)) {
                    return parseInt(input, 10);
                }

                input = locale.weekdaysParse(input);
                if (typeof input === 'number') {
                    return input;
                }

                return null;
            }

            function parseIsoWeekday(input, locale) {
                if (typeof input === 'string') {
                    return locale.weekdaysParse(input) % 7 || 7;
                }
                return isNaN(input) ? null : input;
            }

            // LOCALES
            function shiftWeekdays(ws, n) {
                return ws.slice(n, 7).concat(ws.slice(0, n));
            }

            var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
                '_'
                ),
                defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
                defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
                defaultWeekdaysRegex = matchWord,
                defaultWeekdaysShortRegex = matchWord,
                defaultWeekdaysMinRegex = matchWord;

            function localeWeekdays(m, format) {
                var weekdays = isArray(this._weekdays)
                    ? this._weekdays
                    : this._weekdays[
                        m && m !== true && this._weekdays.isFormat.test(format)
                            ? 'format'
                            : 'standalone'
                        ];
                return m === true
                    ? shiftWeekdays(weekdays, this._week.dow)
                    : m
                        ? weekdays[m.day()]
                        : weekdays;
            }

            function localeWeekdaysShort(m) {
                return m === true
                    ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                    : m
                        ? this._weekdaysShort[m.day()]
                        : this._weekdaysShort;
            }

            function localeWeekdaysMin(m) {
                return m === true
                    ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                    : m
                        ? this._weekdaysMin[m.day()]
                        : this._weekdaysMin;
            }

            function handleStrictParse$1(weekdayName, format, strict) {
                var i,
                    ii,
                    mom,
                    llc = weekdayName.toLocaleLowerCase();
                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                    this._shortWeekdaysParse = [];
                    this._minWeekdaysParse = [];

                    for (i = 0; i < 7; ++i) {
                        mom = createUTC([2000, 1]).day(i);
                        this._minWeekdaysParse[i] = this.weekdaysMin(
                            mom,
                            ''
                        ).toLocaleLowerCase();
                        this._shortWeekdaysParse[i] = this.weekdaysShort(
                            mom,
                            ''
                        ).toLocaleLowerCase();
                        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                    }
                }

                if (strict) {
                    if (format === 'dddd') {
                        ii = indexOf.call(this._weekdaysParse, llc);
                        return ii !== -1 ? ii : null;
                    } else if (format === 'ddd') {
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        return ii !== -1 ? ii : null;
                    } else {
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        return ii !== -1 ? ii : null;
                    }
                } else {
                    if (format === 'dddd') {
                        ii = indexOf.call(this._weekdaysParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        return ii !== -1 ? ii : null;
                    } else if (format === 'ddd') {
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._weekdaysParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        return ii !== -1 ? ii : null;
                    } else {
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._weekdaysParse, llc);
                        if (ii !== -1) {
                            return ii;
                        }
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        return ii !== -1 ? ii : null;
                    }
                }
            }

            function localeWeekdaysParse(weekdayName, format, strict) {
                var i, mom, regex;

                if (this._weekdaysParseExact) {
                    return handleStrictParse$1.call(this, weekdayName, format, strict);
                }

                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                    this._minWeekdaysParse = [];
                    this._shortWeekdaysParse = [];
                    this._fullWeekdaysParse = [];
                }

                for (i = 0; i < 7; i++) {
                    // make the regex if we don't have it already

                    mom = createUTC([2000, 1]).day(i);
                    if (strict && !this._fullWeekdaysParse[i]) {
                        this._fullWeekdaysParse[i] = new RegExp(
                            '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                            'i'
                        );
                        this._shortWeekdaysParse[i] = new RegExp(
                            '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                            'i'
                        );
                        this._minWeekdaysParse[i] = new RegExp(
                            '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                            'i'
                        );
                    }
                    if (!this._weekdaysParse[i]) {
                        regex =
                            '^' +
                            this.weekdays(mom, '') +
                            '|^' +
                            this.weekdaysShort(mom, '') +
                            '|^' +
                            this.weekdaysMin(mom, '');
                        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                    }
                    // test the regex
                    if (
                        strict &&
                        format === 'dddd' &&
                        this._fullWeekdaysParse[i].test(weekdayName)
                    ) {
                        return i;
                    } else if (
                        strict &&
                        format === 'ddd' &&
                        this._shortWeekdaysParse[i].test(weekdayName)
                    ) {
                        return i;
                    } else if (
                        strict &&
                        format === 'dd' &&
                        this._minWeekdaysParse[i].test(weekdayName)
                    ) {
                        return i;
                    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                        return i;
                    }
                }
            }

            // MOMENTS

            function getSetDayOfWeek(input) {
                if (!this.isValid()) {
                    return input != null ? this : NaN;
                }
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                if (input != null) {
                    input = parseWeekday(input, this.localeData());
                    return this.add(input - day, 'd');
                } else {
                    return day;
                }
            }

            function getSetLocaleDayOfWeek(input) {
                if (!this.isValid()) {
                    return input != null ? this : NaN;
                }
                var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                return input == null ? weekday : this.add(input - weekday, 'd');
            }

            function getSetISODayOfWeek(input) {
                if (!this.isValid()) {
                    return input != null ? this : NaN;
                }

                // behaves the same as moment#day except
                // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
                // as a setter, sunday should belong to the previous week.

                if (input != null) {
                    var weekday = parseIsoWeekday(input, this.localeData());
                    return this.day(this.day() % 7 ? weekday : weekday - 7);
                } else {
                    return this.day() || 7;
                }
            }

            function weekdaysRegex(isStrict) {
                if (this._weekdaysParseExact) {
                    if (!hasOwnProp(this, '_weekdaysRegex')) {
                        computeWeekdaysParse.call(this);
                    }
                    if (isStrict) {
                        return this._weekdaysStrictRegex;
                    } else {
                        return this._weekdaysRegex;
                    }
                } else {
                    if (!hasOwnProp(this, '_weekdaysRegex')) {
                        this._weekdaysRegex = defaultWeekdaysRegex;
                    }
                    return this._weekdaysStrictRegex && isStrict
                        ? this._weekdaysStrictRegex
                        : this._weekdaysRegex;
                }
            }

            function weekdaysShortRegex(isStrict) {
                if (this._weekdaysParseExact) {
                    if (!hasOwnProp(this, '_weekdaysRegex')) {
                        computeWeekdaysParse.call(this);
                    }
                    if (isStrict) {
                        return this._weekdaysShortStrictRegex;
                    } else {
                        return this._weekdaysShortRegex;
                    }
                } else {
                    if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                    }
                    return this._weekdaysShortStrictRegex && isStrict
                        ? this._weekdaysShortStrictRegex
                        : this._weekdaysShortRegex;
                }
            }

            function weekdaysMinRegex(isStrict) {
                if (this._weekdaysParseExact) {
                    if (!hasOwnProp(this, '_weekdaysRegex')) {
                        computeWeekdaysParse.call(this);
                    }
                    if (isStrict) {
                        return this._weekdaysMinStrictRegex;
                    } else {
                        return this._weekdaysMinRegex;
                    }
                } else {
                    if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                    }
                    return this._weekdaysMinStrictRegex && isStrict
                        ? this._weekdaysMinStrictRegex
                        : this._weekdaysMinRegex;
                }
            }

            function computeWeekdaysParse() {
                function cmpLenRev(a, b) {
                    return b.length - a.length;
                }

                var minPieces = [],
                    shortPieces = [],
                    longPieces = [],
                    mixedPieces = [],
                    i,
                    mom,
                    minp,
                    shortp,
                    longp;
                for (i = 0; i < 7; i++) {
                    // make the regex if we don't have it already
                    mom = createUTC([2000, 1]).day(i);
                    minp = regexEscape(this.weekdaysMin(mom, ''));
                    shortp = regexEscape(this.weekdaysShort(mom, ''));
                    longp = regexEscape(this.weekdays(mom, ''));
                    minPieces.push(minp);
                    shortPieces.push(shortp);
                    longPieces.push(longp);
                    mixedPieces.push(minp);
                    mixedPieces.push(shortp);
                    mixedPieces.push(longp);
                }
                // Sorting makes sure if one weekday (or abbr) is a prefix of another it
                // will match the longer piece.
                minPieces.sort(cmpLenRev);
                shortPieces.sort(cmpLenRev);
                longPieces.sort(cmpLenRev);
                mixedPieces.sort(cmpLenRev);

                this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                this._weekdaysShortRegex = this._weekdaysRegex;
                this._weekdaysMinRegex = this._weekdaysRegex;

                this._weekdaysStrictRegex = new RegExp(
                    '^(' + longPieces.join('|') + ')',
                    'i'
                );
                this._weekdaysShortStrictRegex = new RegExp(
                    '^(' + shortPieces.join('|') + ')',
                    'i'
                );
                this._weekdaysMinStrictRegex = new RegExp(
                    '^(' + minPieces.join('|') + ')',
                    'i'
                );
            }

            // FORMATTING

            function hFormat() {
                return this.hours() % 12 || 12;
            }

            function kFormat() {
                return this.hours() || 24;
            }

            addFormatToken('H', ['HH', 2], 0, 'hour');
            addFormatToken('h', ['hh', 2], 0, hFormat);
            addFormatToken('k', ['kk', 2], 0, kFormat);

            addFormatToken('hmm', 0, 0, function () {
                return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
            });

            addFormatToken('hmmss', 0, 0, function () {
                return (
                    '' +
                    hFormat.apply(this) +
                    zeroFill(this.minutes(), 2) +
                    zeroFill(this.seconds(), 2)
                );
            });

            addFormatToken('Hmm', 0, 0, function () {
                return '' + this.hours() + zeroFill(this.minutes(), 2);
            });

            addFormatToken('Hmmss', 0, 0, function () {
                return (
                    '' +
                    this.hours() +
                    zeroFill(this.minutes(), 2) +
                    zeroFill(this.seconds(), 2)
                );
            });

            function meridiem(token, lowercase) {
                addFormatToken(token, 0, 0, function () {
                    return this.localeData().meridiem(
                        this.hours(),
                        this.minutes(),
                        lowercase
                    );
                });
            }

            meridiem('a', true);
            meridiem('A', false);

            // ALIASES

            addUnitAlias('hour', 'h');

            // PRIORITY
            addUnitPriority('hour', 13);

            // PARSING

            function matchMeridiem(isStrict, locale) {
                return locale._meridiemParse;
            }

            addRegexToken('a', matchMeridiem);
            addRegexToken('A', matchMeridiem);
            addRegexToken('H', match1to2);
            addRegexToken('h', match1to2);
            addRegexToken('k', match1to2);
            addRegexToken('HH', match1to2, match2);
            addRegexToken('hh', match1to2, match2);
            addRegexToken('kk', match1to2, match2);

            addRegexToken('hmm', match3to4);
            addRegexToken('hmmss', match5to6);
            addRegexToken('Hmm', match3to4);
            addRegexToken('Hmmss', match5to6);

            addParseToken(['H', 'HH'], HOUR);
            addParseToken(['k', 'kk'], function (input, array, config) {
                var kInput = toInt(input);
                array[HOUR] = kInput === 24 ? 0 : kInput;
            });
            addParseToken(['a', 'A'], function (input, array, config) {
                config._isPm = config._locale.isPM(input);
                config._meridiem = input;
            });
            addParseToken(['h', 'hh'], function (input, array, config) {
                array[HOUR] = toInt(input);
                getParsingFlags(config).bigHour = true;
            });
            addParseToken('hmm', function (input, array, config) {
                var pos = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos));
                array[MINUTE] = toInt(input.substr(pos));
                getParsingFlags(config).bigHour = true;
            });
            addParseToken('hmmss', function (input, array, config) {
                var pos1 = input.length - 4,
                    pos2 = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos1));
                array[MINUTE] = toInt(input.substr(pos1, 2));
                array[SECOND] = toInt(input.substr(pos2));
                getParsingFlags(config).bigHour = true;
            });
            addParseToken('Hmm', function (input, array, config) {
                var pos = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos));
                array[MINUTE] = toInt(input.substr(pos));
            });
            addParseToken('Hmmss', function (input, array, config) {
                var pos1 = input.length - 4,
                    pos2 = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos1));
                array[MINUTE] = toInt(input.substr(pos1, 2));
                array[SECOND] = toInt(input.substr(pos2));
            });

            // LOCALES

            function localeIsPM(input) {
                // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
                // Using charAt should be more compatible.
                return (input + '').toLowerCase().charAt(0) === 'p';
            }

            var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
                // Setting the hour should keep the time, because the user explicitly
                // specified which hour they want. So trying to maintain the same hour (in
                // a new timezone) makes sense. Adding/subtracting hours does not follow
                // this rule.
                getSetHour = makeGetSet('Hours', true);

            function localeMeridiem(hours, minutes, isLower) {
                if (hours > 11) {
                    return isLower ? 'pm' : 'PM';
                } else {
                    return isLower ? 'am' : 'AM';
                }
            }

            var baseConfig = {
                calendar: defaultCalendar,
                longDateFormat: defaultLongDateFormat,
                invalidDate: defaultInvalidDate,
                ordinal: defaultOrdinal,
                dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                relativeTime: defaultRelativeTime,

                months: defaultLocaleMonths,
                monthsShort: defaultLocaleMonthsShort,

                week: defaultLocaleWeek,

                weekdays: defaultLocaleWeekdays,
                weekdaysMin: defaultLocaleWeekdaysMin,
                weekdaysShort: defaultLocaleWeekdaysShort,

                meridiemParse: defaultLocaleMeridiemParse,
            };

            // internal storage for locale config files
            var locales = {},
                localeFamilies = {},
                globalLocale;

            function commonPrefix(arr1, arr2) {
                var i,
                    minl = Math.min(arr1.length, arr2.length);
                for (i = 0; i < minl; i += 1) {
                    if (arr1[i] !== arr2[i]) {
                        return i;
                    }
                }
                return minl;
            }

            function normalizeLocale(key) {
                return key ? key.toLowerCase().replace('_', '-') : key;
            }

            // pick the locale from the array
            // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
            // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
            function chooseLocale(names) {
                var i = 0,
                    j,
                    next,
                    locale,
                    split;

                while (i < names.length) {
                    split = normalizeLocale(names[i]).split('-');
                    j = split.length;
                    next = normalizeLocale(names[i + 1]);
                    next = next ? next.split('-') : null;
                    while (j > 0) {
                        locale = loadLocale(split.slice(0, j).join('-'));
                        if (locale) {
                            return locale;
                        }
                        if (
                            next &&
                            next.length >= j &&
                            commonPrefix(split, next) >= j - 1
                        ) {
                            //the next array item is better than a shallower substring of this one
                            break;
                        }
                        j--;
                    }
                    i++;
                }
                return globalLocale;
            }

            function loadLocale(name) {
                var oldLocale = null,
                    aliasedRequire;
                // TODO: Find a better way to register and load all the locales in Node
                if (
                    locales[name] === undefined &&
                    'object' !== 'undefined' &&
                    module &&
                    module.exports
                ) {
                    try {
                        oldLocale = globalLocale._abbr;
                        aliasedRequire = commonjsRequire;
                        aliasedRequire('./locale/' + name);
                        getSetGlobalLocale(oldLocale);
                    } catch (e) {
                        // mark as not found to avoid repeating expensive file require call causing high CPU
                        // when trying to find en-US, en_US, en-us for every format call
                        locales[name] = null; // null means not found
                    }
                }
                return locales[name];
            }

            // This function will load locale and then set the global locale.  If
            // no arguments are passed in, it will simply return the current global
            // locale key.
            function getSetGlobalLocale(key, values) {
                var data;
                if (key) {
                    if (isUndefined(values)) {
                        data = getLocale(key);
                    } else {
                        data = defineLocale(key, values);
                    }

                    if (data) {
                        // moment.duration._locale = moment._locale = data;
                        globalLocale = data;
                    } else {
                        if (typeof console !== 'undefined' && console.warn) {
                            //warn user if arguments are passed but the locale could not be set
                            console.warn(
                                'Locale ' + key + ' not found. Did you forget to load it?'
                            );
                        }
                    }
                }

                return globalLocale._abbr;
            }

            function defineLocale(name, config) {
                if (config !== null) {
                    var locale,
                        parentConfig = baseConfig;
                    config.abbr = name;
                    if (locales[name] != null) {
                        deprecateSimple(
                            'defineLocaleOverride',
                            'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                        );
                        parentConfig = locales[name]._config;
                    } else if (config.parentLocale != null) {
                        if (locales[config.parentLocale] != null) {
                            parentConfig = locales[config.parentLocale]._config;
                        } else {
                            locale = loadLocale(config.parentLocale);
                            if (locale != null) {
                                parentConfig = locale._config;
                            } else {
                                if (!localeFamilies[config.parentLocale]) {
                                    localeFamilies[config.parentLocale] = [];
                                }
                                localeFamilies[config.parentLocale].push({
                                    name: name,
                                    config: config,
                                });
                                return null;
                            }
                        }
                    }
                    locales[name] = new Locale(mergeConfigs(parentConfig, config));

                    if (localeFamilies[name]) {
                        localeFamilies[name].forEach(function (x) {
                            defineLocale(x.name, x.config);
                        });
                    }

                    // backwards compat for now: also set the locale
                    // make sure we set the locale AFTER all child locales have been
                    // created, so we won't end up with the child locale set.
                    getSetGlobalLocale(name);

                    return locales[name];
                } else {
                    // useful for testing
                    delete locales[name];
                    return null;
                }
            }

            function updateLocale(name, config) {
                if (config != null) {
                    var locale,
                        tmpLocale,
                        parentConfig = baseConfig;

                    if (locales[name] != null && locales[name].parentLocale != null) {
                        // Update existing child locale in-place to avoid memory-leaks
                        locales[name].set(mergeConfigs(locales[name]._config, config));
                    } else {
                        // MERGE
                        tmpLocale = loadLocale(name);
                        if (tmpLocale != null) {
                            parentConfig = tmpLocale._config;
                        }
                        config = mergeConfigs(parentConfig, config);
                        if (tmpLocale == null) {
                            // updateLocale is called for creating a new locale
                            // Set abbr so it will have a name (getters return
                            // undefined otherwise).
                            config.abbr = name;
                        }
                        locale = new Locale(config);
                        locale.parentLocale = locales[name];
                        locales[name] = locale;
                    }

                    // backwards compat for now: also set the locale
                    getSetGlobalLocale(name);
                } else {
                    // pass null for config to unupdate, useful for tests
                    if (locales[name] != null) {
                        if (locales[name].parentLocale != null) {
                            locales[name] = locales[name].parentLocale;
                            if (name === getSetGlobalLocale()) {
                                getSetGlobalLocale(name);
                            }
                        } else if (locales[name] != null) {
                            delete locales[name];
                        }
                    }
                }
                return locales[name];
            }

            // returns locale data
            function getLocale(key) {
                var locale;

                if (key && key._locale && key._locale._abbr) {
                    key = key._locale._abbr;
                }

                if (!key) {
                    return globalLocale;
                }

                if (!isArray(key)) {
                    //short-circuit everything else
                    locale = loadLocale(key);
                    if (locale) {
                        return locale;
                    }
                    key = [key];
                }

                return chooseLocale(key);
            }

            function listLocales() {
                return keys(locales);
            }

            function checkOverflow(m) {
                var overflow,
                    a = m._a;

                if (a && getParsingFlags(m).overflow === -2) {
                    overflow =
                        a[MONTH] < 0 || a[MONTH] > 11
                            ? MONTH
                            : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                            ? DATE
                            : a[HOUR] < 0 ||
                            a[HOUR] > 24 ||
                            (a[HOUR] === 24 &&
                                (a[MINUTE] !== 0 ||
                                    a[SECOND] !== 0 ||
                                    a[MILLISECOND] !== 0))
                                ? HOUR
                                : a[MINUTE] < 0 || a[MINUTE] > 59
                                    ? MINUTE
                                    : a[SECOND] < 0 || a[SECOND] > 59
                                        ? SECOND
                                        : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                                            ? MILLISECOND
                                            : -1;

                    if (
                        getParsingFlags(m)._overflowDayOfYear &&
                        (overflow < YEAR || overflow > DATE)
                    ) {
                        overflow = DATE;
                    }
                    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                        overflow = WEEK;
                    }
                    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                        overflow = WEEKDAY;
                    }

                    getParsingFlags(m).overflow = overflow;
                }

                return m;
            }

            // iso 8601 regex
            // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
            var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
                basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
                tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
                isoDates = [
                    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                    ['YYYY-DDD', /\d{4}-\d{3}/],
                    ['YYYY-MM', /\d{4}-\d\d/, false],
                    ['YYYYYYMMDD', /[+-]\d{10}/],
                    ['YYYYMMDD', /\d{8}/],
                    ['GGGG[W]WWE', /\d{4}W\d{3}/],
                    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                    ['YYYYDDD', /\d{7}/],
                    ['YYYYMM', /\d{6}/, false],
                    ['YYYY', /\d{4}/, false],
                ],
                // iso time formats and regexes
                isoTimes = [
                    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                    ['HH:mm', /\d\d:\d\d/],
                    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                    ['HHmmss', /\d\d\d\d\d\d/],
                    ['HHmm', /\d\d\d\d/],
                    ['HH', /\d\d/],
                ],
                aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
                // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
                rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
                obsOffsets = {
                    UT: 0,
                    GMT: 0,
                    EDT: -4 * 60,
                    EST: -5 * 60,
                    CDT: -5 * 60,
                    CST: -6 * 60,
                    MDT: -6 * 60,
                    MST: -7 * 60,
                    PDT: -7 * 60,
                    PST: -8 * 60,
                };

            // date from iso format
            function configFromISO(config) {
                var i,
                    l,
                    string = config._i,
                    match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                    allowTime,
                    dateFormat,
                    timeFormat,
                    tzFormat;

                if (match) {
                    getParsingFlags(config).iso = true;

                    for (i = 0, l = isoDates.length; i < l; i++) {
                        if (isoDates[i][1].exec(match[1])) {
                            dateFormat = isoDates[i][0];
                            allowTime = isoDates[i][2] !== false;
                            break;
                        }
                    }
                    if (dateFormat == null) {
                        config._isValid = false;
                        return;
                    }
                    if (match[3]) {
                        for (i = 0, l = isoTimes.length; i < l; i++) {
                            if (isoTimes[i][1].exec(match[3])) {
                                // match[2] should be 'T' or space
                                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                                break;
                            }
                        }
                        if (timeFormat == null) {
                            config._isValid = false;
                            return;
                        }
                    }
                    if (!allowTime && timeFormat != null) {
                        config._isValid = false;
                        return;
                    }
                    if (match[4]) {
                        if (tzRegex.exec(match[4])) {
                            tzFormat = 'Z';
                        } else {
                            config._isValid = false;
                            return;
                        }
                    }
                    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                    configFromStringAndFormat(config);
                } else {
                    config._isValid = false;
                }
            }

            function extractFromRFC2822Strings(
                yearStr,
                monthStr,
                dayStr,
                hourStr,
                minuteStr,
                secondStr
            ) {
                var result = [
                    untruncateYear(yearStr),
                    defaultLocaleMonthsShort.indexOf(monthStr),
                    parseInt(dayStr, 10),
                    parseInt(hourStr, 10),
                    parseInt(minuteStr, 10),
                ];

                if (secondStr) {
                    result.push(parseInt(secondStr, 10));
                }

                return result;
            }

            function untruncateYear(yearStr) {
                var year = parseInt(yearStr, 10);
                if (year <= 49) {
                    return 2000 + year;
                } else if (year <= 999) {
                    return 1900 + year;
                }
                return year;
            }

            function preprocessRFC2822(s) {
                // Remove comments and folding whitespace and replace multiple-spaces with a single space
                return s
                    .replace(/\([^)]*\)|[\n\t]/g, ' ')
                    .replace(/(\s\s+)/g, ' ')
                    .replace(/^\s\s*/, '')
                    .replace(/\s\s*$/, '');
            }

            function checkWeekday(weekdayStr, parsedInput, config) {
                if (weekdayStr) {
                    // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                        weekdayActual = new Date(
                            parsedInput[0],
                            parsedInput[1],
                            parsedInput[2]
                        ).getDay();
                    if (weekdayProvided !== weekdayActual) {
                        getParsingFlags(config).weekdayMismatch = true;
                        config._isValid = false;
                        return false;
                    }
                }
                return true;
            }

            function calculateOffset(obsOffset, militaryOffset, numOffset) {
                if (obsOffset) {
                    return obsOffsets[obsOffset];
                } else if (militaryOffset) {
                    // the only allowed military tz is Z
                    return 0;
                } else {
                    var hm = parseInt(numOffset, 10),
                        m = hm % 100,
                        h = (hm - m) / 100;
                    return h * 60 + m;
                }
            }

            // date and time from ref 2822 format
            function configFromRFC2822(config) {
                var match = rfc2822.exec(preprocessRFC2822(config._i)),
                    parsedArray;
                if (match) {
                    parsedArray = extractFromRFC2822Strings(
                        match[4],
                        match[3],
                        match[2],
                        match[5],
                        match[6],
                        match[7]
                    );
                    if (!checkWeekday(match[1], parsedArray, config)) {
                        return;
                    }

                    config._a = parsedArray;
                    config._tzm = calculateOffset(match[8], match[9], match[10]);

                    config._d = createUTCDate.apply(null, config._a);
                    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                    getParsingFlags(config).rfc2822 = true;
                } else {
                    config._isValid = false;
                }
            }

            // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
            function configFromString(config) {
                var matched = aspNetJsonRegex.exec(config._i);
                if (matched !== null) {
                    config._d = new Date(+matched[1]);
                    return;
                }

                configFromISO(config);
                if (config._isValid === false) {
                    delete config._isValid;
                } else {
                    return;
                }

                configFromRFC2822(config);
                if (config._isValid === false) {
                    delete config._isValid;
                } else {
                    return;
                }

                if (config._strict) {
                    config._isValid = false;
                } else {
                    // Final attempt, use Input Fallback
                    hooks.createFromInputFallback(config);
                }
            }

            hooks.createFromInputFallback = deprecate(
                'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
                function (config) {
                    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
                }
            );

            // Pick the first defined of two or three arguments.
            function defaults(a, b, c) {
                if (a != null) {
                    return a;
                }
                if (b != null) {
                    return b;
                }
                return c;
            }

            function currentDateArray(config) {
                // hooks is actually the exported moment object
                var nowValue = new Date(hooks.now());
                if (config._useUTC) {
                    return [
                        nowValue.getUTCFullYear(),
                        nowValue.getUTCMonth(),
                        nowValue.getUTCDate(),
                    ];
                }
                return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
            }

            // convert an array to a date.
            // the array should mirror the parameters below
            // note: all values past the year are optional and will default to the lowest possible value.
            // [year, month, day , hour, minute, second, millisecond]
            function configFromArray(config) {
                var i,
                    date,
                    input = [],
                    currentDate,
                    expectedWeekday,
                    yearToUse;

                if (config._d) {
                    return;
                }

                currentDate = currentDateArray(config);

                //compute day of the year from weeks and weekdays
                if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                    dayOfYearFromWeekInfo(config);
                }

                //if the day of the year is set, figure out what it is
                if (config._dayOfYear != null) {
                    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                    if (
                        config._dayOfYear > daysInYear(yearToUse) ||
                        config._dayOfYear === 0
                    ) {
                        getParsingFlags(config)._overflowDayOfYear = true;
                    }

                    date = createUTCDate(yearToUse, 0, config._dayOfYear);
                    config._a[MONTH] = date.getUTCMonth();
                    config._a[DATE] = date.getUTCDate();
                }

                // Default to current date.
                // * if no year, month, day of month are given, default to today
                // * if day of month is given, default month and year
                // * if month is given, default only year
                // * if year is given, don't default anything
                for (i = 0; i < 3 && config._a[i] == null; ++i) {
                    config._a[i] = input[i] = currentDate[i];
                }

                // Zero out whatever was not defaulted, including time
                for (; i < 7; i++) {
                    config._a[i] = input[i] =
                        config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
                }

                // Check for 24:00:00.000
                if (
                    config._a[HOUR] === 24 &&
                    config._a[MINUTE] === 0 &&
                    config._a[SECOND] === 0 &&
                    config._a[MILLISECOND] === 0
                ) {
                    config._nextDay = true;
                    config._a[HOUR] = 0;
                }

                config._d = (config._useUTC ? createUTCDate : createDate).apply(
                    null,
                    input
                );
                expectedWeekday = config._useUTC
                    ? config._d.getUTCDay()
                    : config._d.getDay();

                // Apply timezone offset from input. The actual utcOffset can be changed
                // with parseZone.
                if (config._tzm != null) {
                    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                }

                if (config._nextDay) {
                    config._a[HOUR] = 24;
                }

                // check for mismatching day of week
                if (
                    config._w &&
                    typeof config._w.d !== 'undefined' &&
                    config._w.d !== expectedWeekday
                ) {
                    getParsingFlags(config).weekdayMismatch = true;
                }
            }

            function dayOfYearFromWeekInfo(config) {
                var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

                w = config._w;
                if (w.GG != null || w.W != null || w.E != null) {
                    dow = 1;
                    doy = 4;

                    // TODO: We need to take the current isoWeekYear, but that depends on
                    // how we interpret now (local, utc, fixed offset). So create
                    // a now version of current config (take local/utc/offset flags, and
                    // create now).
                    weekYear = defaults(
                        w.GG,
                        config._a[YEAR],
                        weekOfYear(createLocal(), 1, 4).year
                    );
                    week = defaults(w.W, 1);
                    weekday = defaults(w.E, 1);
                    if (weekday < 1 || weekday > 7) {
                        weekdayOverflow = true;
                    }
                } else {
                    dow = config._locale._week.dow;
                    doy = config._locale._week.doy;

                    curWeek = weekOfYear(createLocal(), dow, doy);

                    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                    // Default to current week.
                    week = defaults(w.w, curWeek.week);

                    if (w.d != null) {
                        // weekday -- low day numbers are considered next week
                        weekday = w.d;
                        if (weekday < 0 || weekday > 6) {
                            weekdayOverflow = true;
                        }
                    } else if (w.e != null) {
                        // local weekday -- counting starts from beginning of week
                        weekday = w.e + dow;
                        if (w.e < 0 || w.e > 6) {
                            weekdayOverflow = true;
                        }
                    } else {
                        // default to beginning of week
                        weekday = dow;
                    }
                }
                if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                    getParsingFlags(config)._overflowWeeks = true;
                } else if (weekdayOverflow != null) {
                    getParsingFlags(config)._overflowWeekday = true;
                } else {
                    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                    config._a[YEAR] = temp.year;
                    config._dayOfYear = temp.dayOfYear;
                }
            }

            // constant that refers to the ISO standard
            hooks.ISO_8601 = function () {};

            // constant that refers to the RFC 2822 form
            hooks.RFC_2822 = function () {};

            // date from string and format string
            function configFromStringAndFormat(config) {
                // TODO: Move this to another part of the creation flow to prevent circular deps
                if (config._f === hooks.ISO_8601) {
                    configFromISO(config);
                    return;
                }
                if (config._f === hooks.RFC_2822) {
                    configFromRFC2822(config);
                    return;
                }
                config._a = [];
                getParsingFlags(config).empty = true;

                // This array is used to make a Date, either with `new Date` or `Date.UTC`
                var string = '' + config._i,
                    i,
                    parsedInput,
                    tokens,
                    token,
                    skipped,
                    stringLength = string.length,
                    totalParsedInputLength = 0,
                    era;

                tokens =
                    expandFormat(config._f, config._locale).match(formattingTokens) || [];

                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                        [])[0];
                    if (parsedInput) {
                        skipped = string.substr(0, string.indexOf(parsedInput));
                        if (skipped.length > 0) {
                            getParsingFlags(config).unusedInput.push(skipped);
                        }
                        string = string.slice(
                            string.indexOf(parsedInput) + parsedInput.length
                        );
                        totalParsedInputLength += parsedInput.length;
                    }
                    // don't parse if it's not a known token
                    if (formatTokenFunctions[token]) {
                        if (parsedInput) {
                            getParsingFlags(config).empty = false;
                        } else {
                            getParsingFlags(config).unusedTokens.push(token);
                        }
                        addTimeToArrayFromToken(token, parsedInput, config);
                    } else if (config._strict && !parsedInput) {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                }

                // add remaining unparsed input length to the string
                getParsingFlags(config).charsLeftOver =
                    stringLength - totalParsedInputLength;
                if (string.length > 0) {
                    getParsingFlags(config).unusedInput.push(string);
                }

                // clear _12h flag if hour is <= 12
                if (
                    config._a[HOUR] <= 12 &&
                    getParsingFlags(config).bigHour === true &&
                    config._a[HOUR] > 0
                ) {
                    getParsingFlags(config).bigHour = undefined;
                }

                getParsingFlags(config).parsedDateParts = config._a.slice(0);
                getParsingFlags(config).meridiem = config._meridiem;
                // handle meridiem
                config._a[HOUR] = meridiemFixWrap(
                    config._locale,
                    config._a[HOUR],
                    config._meridiem
                );

                // handle era
                era = getParsingFlags(config).era;
                if (era !== null) {
                    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
                }

                configFromArray(config);
                checkOverflow(config);
            }

            function meridiemFixWrap(locale, hour, meridiem) {
                var isPm;

                if (meridiem == null) {
                    // nothing to do
                    return hour;
                }
                if (locale.meridiemHour != null) {
                    return locale.meridiemHour(hour, meridiem);
                } else if (locale.isPM != null) {
                    // Fallback
                    isPm = locale.isPM(meridiem);
                    if (isPm && hour < 12) {
                        hour += 12;
                    }
                    if (!isPm && hour === 12) {
                        hour = 0;
                    }
                    return hour;
                } else {
                    // this is not supposed to happen
                    return hour;
                }
            }

            // date from string and array of format strings
            function configFromStringAndArray(config) {
                var tempConfig,
                    bestMoment,
                    scoreToBeat,
                    i,
                    currentScore,
                    validFormatFound,
                    bestFormatIsValid = false;

                if (config._f.length === 0) {
                    getParsingFlags(config).invalidFormat = true;
                    config._d = new Date(NaN);
                    return;
                }

                for (i = 0; i < config._f.length; i++) {
                    currentScore = 0;
                    validFormatFound = false;
                    tempConfig = copyConfig({}, config);
                    if (config._useUTC != null) {
                        tempConfig._useUTC = config._useUTC;
                    }
                    tempConfig._f = config._f[i];
                    configFromStringAndFormat(tempConfig);

                    if (isValid(tempConfig)) {
                        validFormatFound = true;
                    }

                    // if there is any input that was not parsed add a penalty for that format
                    currentScore += getParsingFlags(tempConfig).charsLeftOver;

                    //or tokens
                    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                    getParsingFlags(tempConfig).score = currentScore;

                    if (!bestFormatIsValid) {
                        if (
                            scoreToBeat == null ||
                            currentScore < scoreToBeat ||
                            validFormatFound
                        ) {
                            scoreToBeat = currentScore;
                            bestMoment = tempConfig;
                            if (validFormatFound) {
                                bestFormatIsValid = true;
                            }
                        }
                    } else {
                        if (currentScore < scoreToBeat) {
                            scoreToBeat = currentScore;
                            bestMoment = tempConfig;
                        }
                    }
                }

                extend(config, bestMoment || tempConfig);
            }

            function configFromObject(config) {
                if (config._d) {
                    return;
                }

                var i = normalizeObjectUnits(config._i),
                    dayOrDate = i.day === undefined ? i.date : i.day;
                config._a = map(
                    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                    function (obj) {
                        return obj && parseInt(obj, 10);
                    }
                );

                configFromArray(config);
            }

            function createFromConfig(config) {
                var res = new Moment(checkOverflow(prepareConfig(config)));
                if (res._nextDay) {
                    // Adding is smart enough around DST
                    res.add(1, 'd');
                    res._nextDay = undefined;
                }

                return res;
            }

            function prepareConfig(config) {
                var input = config._i,
                    format = config._f;

                config._locale = config._locale || getLocale(config._l);

                if (input === null || (format === undefined && input === '')) {
                    return createInvalid({ nullInput: true });
                }

                if (typeof input === 'string') {
                    config._i = input = config._locale.preparse(input);
                }

                if (isMoment(input)) {
                    return new Moment(checkOverflow(input));
                } else if (isDate(input)) {
                    config._d = input;
                } else if (isArray(format)) {
                    configFromStringAndArray(config);
                } else if (format) {
                    configFromStringAndFormat(config);
                } else {
                    configFromInput(config);
                }

                if (!isValid(config)) {
                    config._d = null;
                }

                return config;
            }

            function configFromInput(config) {
                var input = config._i;
                if (isUndefined(input)) {
                    config._d = new Date(hooks.now());
                } else if (isDate(input)) {
                    config._d = new Date(input.valueOf());
                } else if (typeof input === 'string') {
                    configFromString(config);
                } else if (isArray(input)) {
                    config._a = map(input.slice(0), function (obj) {
                        return parseInt(obj, 10);
                    });
                    configFromArray(config);
                } else if (isObject(input)) {
                    configFromObject(config);
                } else if (isNumber(input)) {
                    // from milliseconds
                    config._d = new Date(input);
                } else {
                    hooks.createFromInputFallback(config);
                }
            }

            function createLocalOrUTC(input, format, locale, strict, isUTC) {
                var c = {};

                if (format === true || format === false) {
                    strict = format;
                    format = undefined;
                }

                if (locale === true || locale === false) {
                    strict = locale;
                    locale = undefined;
                }

                if (
                    (isObject(input) && isObjectEmpty(input)) ||
                    (isArray(input) && input.length === 0)
                ) {
                    input = undefined;
                }
                // object construction must be done this way.
                // https://github.com/moment/moment/issues/1423
                c._isAMomentObject = true;
                c._useUTC = c._isUTC = isUTC;
                c._l = locale;
                c._i = input;
                c._f = format;
                c._strict = strict;

                return createFromConfig(c);
            }

            function createLocal(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, false);
            }

            var prototypeMin = deprecate(
                'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other < this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
                ),
                prototypeMax = deprecate(
                    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                    function () {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) {
                            return other > this ? this : other;
                        } else {
                            return createInvalid();
                        }
                    }
                );

            // Pick a moment m from moments so that m[fn](other) is true for all
            // other. This relies on the function fn to be transitive.
            //
            // moments should either be an array of moment objects or an array, whose
            // first element is an array of moment objects.
            function pickBy(fn, moments) {
                var res, i;
                if (moments.length === 1 && isArray(moments[0])) {
                    moments = moments[0];
                }
                if (!moments.length) {
                    return createLocal();
                }
                res = moments[0];
                for (i = 1; i < moments.length; ++i) {
                    if (!moments[i].isValid() || moments[i][fn](res)) {
                        res = moments[i];
                    }
                }
                return res;
            }

            // TODO: Use [].sort instead?
            function min() {
                var args = [].slice.call(arguments, 0);

                return pickBy('isBefore', args);
            }

            function max() {
                var args = [].slice.call(arguments, 0);

                return pickBy('isAfter', args);
            }

            var now = function () {
                return Date.now ? Date.now() : +new Date();
            };

            var ordering = [
                'year',
                'quarter',
                'month',
                'week',
                'day',
                'hour',
                'minute',
                'second',
                'millisecond',
            ];

            function isDurationValid(m) {
                var key,
                    unitHasDecimal = false,
                    i;
                for (key in m) {
                    if (
                        hasOwnProp(m, key) &&
                        !(
                            indexOf.call(ordering, key) !== -1 &&
                            (m[key] == null || !isNaN(m[key]))
                        )
                    ) {
                        return false;
                    }
                }

                for (i = 0; i < ordering.length; ++i) {
                    if (m[ordering[i]]) {
                        if (unitHasDecimal) {
                            return false; // only allow non-integers for smallest unit
                        }
                        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                            unitHasDecimal = true;
                        }
                    }
                }

                return true;
            }

            function isValid$1() {
                return this._isValid;
            }

            function createInvalid$1() {
                return createDuration(NaN);
            }

            function Duration(duration) {
                var normalizedInput = normalizeObjectUnits(duration),
                    years = normalizedInput.year || 0,
                    quarters = normalizedInput.quarter || 0,
                    months = normalizedInput.month || 0,
                    weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                    days = normalizedInput.day || 0,
                    hours = normalizedInput.hour || 0,
                    minutes = normalizedInput.minute || 0,
                    seconds = normalizedInput.second || 0,
                    milliseconds = normalizedInput.millisecond || 0;

                this._isValid = isDurationValid(normalizedInput);

                // representation for dateAddRemove
                this._milliseconds =
                    +milliseconds +
                    seconds * 1e3 + // 1000
                    minutes * 6e4 + // 1000 * 60
                    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
                // Because of dateAddRemove treats 24 hours as different from a
                // day when working around DST, we need to store them separately
                this._days = +days + weeks * 7;
                // It is impossible to translate months into days without knowing
                // which months you are are talking about, so we have to store
                // it separately.
                this._months = +months + quarters * 3 + years * 12;

                this._data = {};

                this._locale = getLocale();

                this._bubble();
            }

            function isDuration(obj) {
                return obj instanceof Duration;
            }

            function absRound(number) {
                if (number < 0) {
                    return Math.round(-1 * number) * -1;
                } else {
                    return Math.round(number);
                }
            }

            // compare two arrays, return the number of differences
            function compareArrays(array1, array2, dontConvert) {
                var len = Math.min(array1.length, array2.length),
                    lengthDiff = Math.abs(array1.length - array2.length),
                    diffs = 0,
                    i;
                for (i = 0; i < len; i++) {
                    if (
                        (dontConvert && array1[i] !== array2[i]) ||
                        (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                    ) {
                        diffs++;
                    }
                }
                return diffs + lengthDiff;
            }

            // FORMATTING

            function offset(token, separator) {
                addFormatToken(token, 0, 0, function () {
                    var offset = this.utcOffset(),
                        sign = '+';
                    if (offset < 0) {
                        offset = -offset;
                        sign = '-';
                    }
                    return (
                        sign +
                        zeroFill(~~(offset / 60), 2) +
                        separator +
                        zeroFill(~~offset % 60, 2)
                    );
                });
            }

            offset('Z', ':');
            offset('ZZ', '');

            // PARSING

            addRegexToken('Z', matchShortOffset);
            addRegexToken('ZZ', matchShortOffset);
            addParseToken(['Z', 'ZZ'], function (input, array, config) {
                config._useUTC = true;
                config._tzm = offsetFromString(matchShortOffset, input);
            });

            // HELPERS

            // timezone chunker
            // '+10:00' > ['10',  '00']
            // '-1530'  > ['-15', '30']
            var chunkOffset = /([\+\-]|\d\d)/gi;

            function offsetFromString(matcher, string) {
                var matches = (string || '').match(matcher),
                    chunk,
                    parts,
                    minutes;

                if (matches === null) {
                    return null;
                }

                chunk = matches[matches.length - 1] || [];
                parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
                minutes = +(parts[1] * 60) + toInt(parts[2]);

                return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
            }

            // Return a moment from input, that is local/utc/zone equivalent to model.
            function cloneWithOffset(input, model) {
                var res, diff;
                if (model._isUTC) {
                    res = model.clone();
                    diff =
                        (isMoment(input) || isDate(input)
                            ? input.valueOf()
                            : createLocal(input).valueOf()) - res.valueOf();
                    // Use low-level api, because this fn is low-level api.
                    res._d.setTime(res._d.valueOf() + diff);
                    hooks.updateOffset(res, false);
                    return res;
                } else {
                    return createLocal(input).local();
                }
            }

            function getDateOffset(m) {
                // On Firefox.24 Date#getTimezoneOffset returns a floating point.
                // https://github.com/moment/moment/pull/1871
                return -Math.round(m._d.getTimezoneOffset());
            }

            // HOOKS

            // This function will be called whenever a moment is mutated.
            // It is intended to keep the offset in sync with the timezone.
            hooks.updateOffset = function () {};

            // MOMENTS

            // keepLocalTime = true means only change the timezone, without
            // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
            // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
            // +0200, so we adjust the time as needed, to be valid.
            //
            // Keeping the time actually adds/subtracts (one hour)
            // from the actual represented time. That is why we call updateOffset
            // a second time. In case it wants us to change the offset again
            // _changeInProgress == true case, then we have to adjust, because
            // there is no such time in the given timezone.
            function getSetOffset(input, keepLocalTime, keepMinutes) {
                var offset = this._offset || 0,
                    localAdjust;
                if (!this.isValid()) {
                    return input != null ? this : NaN;
                }
                if (input != null) {
                    if (typeof input === 'string') {
                        input = offsetFromString(matchShortOffset, input);
                        if (input === null) {
                            return this;
                        }
                    } else if (Math.abs(input) < 16 && !keepMinutes) {
                        input = input * 60;
                    }
                    if (!this._isUTC && keepLocalTime) {
                        localAdjust = getDateOffset(this);
                    }
                    this._offset = input;
                    this._isUTC = true;
                    if (localAdjust != null) {
                        this.add(localAdjust, 'm');
                    }
                    if (offset !== input) {
                        if (!keepLocalTime || this._changeInProgress) {
                            addSubtract(
                                this,
                                createDuration(input - offset, 'm'),
                                1,
                                false
                            );
                        } else if (!this._changeInProgress) {
                            this._changeInProgress = true;
                            hooks.updateOffset(this, true);
                            this._changeInProgress = null;
                        }
                    }
                    return this;
                } else {
                    return this._isUTC ? offset : getDateOffset(this);
                }
            }

            function getSetZone(input, keepLocalTime) {
                if (input != null) {
                    if (typeof input !== 'string') {
                        input = -input;
                    }

                    this.utcOffset(input, keepLocalTime);

                    return this;
                } else {
                    return -this.utcOffset();
                }
            }

            function setOffsetToUTC(keepLocalTime) {
                return this.utcOffset(0, keepLocalTime);
            }

            function setOffsetToLocal(keepLocalTime) {
                if (this._isUTC) {
                    this.utcOffset(0, keepLocalTime);
                    this._isUTC = false;

                    if (keepLocalTime) {
                        this.subtract(getDateOffset(this), 'm');
                    }
                }
                return this;
            }

            function setOffsetToParsedOffset() {
                if (this._tzm != null) {
                    this.utcOffset(this._tzm, false, true);
                } else if (typeof this._i === 'string') {
                    var tZone = offsetFromString(matchOffset, this._i);
                    if (tZone != null) {
                        this.utcOffset(tZone);
                    } else {
                        this.utcOffset(0, true);
                    }
                }
                return this;
            }

            function hasAlignedHourOffset(input) {
                if (!this.isValid()) {
                    return false;
                }
                input = input ? createLocal(input).utcOffset() : 0;

                return (this.utcOffset() - input) % 60 === 0;
            }

            function isDaylightSavingTime() {
                return (
                    this.utcOffset() > this.clone().month(0).utcOffset() ||
                    this.utcOffset() > this.clone().month(5).utcOffset()
                );
            }

            function isDaylightSavingTimeShifted() {
                if (!isUndefined(this._isDSTShifted)) {
                    return this._isDSTShifted;
                }

                var c = {},
                    other;

                copyConfig(c, this);
                c = prepareConfig(c);

                if (c._a) {
                    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                    this._isDSTShifted =
                        this.isValid() && compareArrays(c._a, other.toArray()) > 0;
                } else {
                    this._isDSTShifted = false;
                }

                return this._isDSTShifted;
            }

            function isLocal() {
                return this.isValid() ? !this._isUTC : false;
            }

            function isUtcOffset() {
                return this.isValid() ? this._isUTC : false;
            }

            function isUtc() {
                return this.isValid() ? this._isUTC && this._offset === 0 : false;
            }

            // ASP.NET json date format regex
            var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
                // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
                // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
                // and further modified to allow for strings containing both week and day
                isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

            function createDuration(input, key) {
                var duration = input,
                    // matching against regexp is expensive, do it on demand
                    match = null,
                    sign,
                    ret,
                    diffRes;

                if (isDuration(input)) {
                    duration = {
                        ms: input._milliseconds,
                        d: input._days,
                        M: input._months,
                    };
                } else if (isNumber(input) || !isNaN(+input)) {
                    duration = {};
                    if (key) {
                        duration[key] = +input;
                    } else {
                        duration.milliseconds = +input;
                    }
                } else if ((match = aspNetRegex.exec(input))) {
                    sign = match[1] === '-' ? -1 : 1;
                    duration = {
                        y: 0,
                        d: toInt(match[DATE]) * sign,
                        h: toInt(match[HOUR]) * sign,
                        m: toInt(match[MINUTE]) * sign,
                        s: toInt(match[SECOND]) * sign,
                        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                    };
                } else if ((match = isoRegex.exec(input))) {
                    sign = match[1] === '-' ? -1 : 1;
                    duration = {
                        y: parseIso(match[2], sign),
                        M: parseIso(match[3], sign),
                        w: parseIso(match[4], sign),
                        d: parseIso(match[5], sign),
                        h: parseIso(match[6], sign),
                        m: parseIso(match[7], sign),
                        s: parseIso(match[8], sign),
                    };
                } else if (duration == null) {
                    // checks for null or undefined
                    duration = {};
                } else if (
                    typeof duration === 'object' &&
                    ('from' in duration || 'to' in duration)
                ) {
                    diffRes = momentsDifference(
                        createLocal(duration.from),
                        createLocal(duration.to)
                    );

                    duration = {};
                    duration.ms = diffRes.milliseconds;
                    duration.M = diffRes.months;
                }

                ret = new Duration(duration);

                if (isDuration(input) && hasOwnProp(input, '_locale')) {
                    ret._locale = input._locale;
                }

                if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                    ret._isValid = input._isValid;
                }

                return ret;
            }

            createDuration.fn = Duration.prototype;
            createDuration.invalid = createInvalid$1;

            function parseIso(inp, sign) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            }

            function positiveMomentsDifference(base, other) {
                var res = {};

                res.months =
                    other.month() - base.month() + (other.year() - base.year()) * 12;
                if (base.clone().add(res.months, 'M').isAfter(other)) {
                    --res.months;
                }

                res.milliseconds = +other - +base.clone().add(res.months, 'M');

                return res;
            }

            function momentsDifference(base, other) {
                var res;
                if (!(base.isValid() && other.isValid())) {
                    return { milliseconds: 0, months: 0 };
                }

                other = cloneWithOffset(other, base);
                if (base.isBefore(other)) {
                    res = positiveMomentsDifference(base, other);
                } else {
                    res = positiveMomentsDifference(other, base);
                    res.milliseconds = -res.milliseconds;
                    res.months = -res.months;
                }

                return res;
            }

            // TODO: remove 'name' arg after deprecation is removed
            function createAdder(direction, name) {
                return function (val, period) {
                    var dur, tmp;
                    //invert the arguments, but complain about it
                    if (period !== null && !isNaN(+period)) {
                        deprecateSimple(
                            name,
                            'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                        );
                        tmp = val;
                        val = period;
                        period = tmp;
                    }

                    dur = createDuration(val, period);
                    addSubtract(this, dur, direction);
                    return this;
                };
            }

            function addSubtract(mom, duration, isAdding, updateOffset) {
                var milliseconds = duration._milliseconds,
                    days = absRound(duration._days),
                    months = absRound(duration._months);

                if (!mom.isValid()) {
                    // No op
                    return;
                }

                updateOffset = updateOffset == null ? true : updateOffset;

                if (months) {
                    setMonth(mom, get(mom, 'Month') + months * isAdding);
                }
                if (days) {
                    set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
                }
                if (milliseconds) {
                    mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
                }
                if (updateOffset) {
                    hooks.updateOffset(mom, days || months);
                }
            }

            var add = createAdder(1, 'add'),
                subtract = createAdder(-1, 'subtract');

            function isString(input) {
                return typeof input === 'string' || input instanceof String;
            }

            // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
            function isMomentInput(input) {
                return (
                    isMoment(input) ||
                    isDate(input) ||
                    isString(input) ||
                    isNumber(input) ||
                    isNumberOrStringArray(input) ||
                    isMomentInputObject(input) ||
                    input === null ||
                    input === undefined
                );
            }

            function isMomentInputObject(input) {
                var objectTest = isObject(input) && !isObjectEmpty(input),
                    propertyTest = false,
                    properties = [
                        'years',
                        'year',
                        'y',
                        'months',
                        'month',
                        'M',
                        'days',
                        'day',
                        'd',
                        'dates',
                        'date',
                        'D',
                        'hours',
                        'hour',
                        'h',
                        'minutes',
                        'minute',
                        'm',
                        'seconds',
                        'second',
                        's',
                        'milliseconds',
                        'millisecond',
                        'ms',
                    ],
                    i,
                    property;

                for (i = 0; i < properties.length; i += 1) {
                    property = properties[i];
                    propertyTest = propertyTest || hasOwnProp(input, property);
                }

                return objectTest && propertyTest;
            }

            function isNumberOrStringArray(input) {
                var arrayTest = isArray(input),
                    dataTypeTest = false;
                if (arrayTest) {
                    dataTypeTest =
                        input.filter(function (item) {
                            return !isNumber(item) && isString(input);
                        }).length === 0;
                }
                return arrayTest && dataTypeTest;
            }

            function isCalendarSpec(input) {
                var objectTest = isObject(input) && !isObjectEmpty(input),
                    propertyTest = false,
                    properties = [
                        'sameDay',
                        'nextDay',
                        'lastDay',
                        'nextWeek',
                        'lastWeek',
                        'sameElse',
                    ],
                    i,
                    property;

                for (i = 0; i < properties.length; i += 1) {
                    property = properties[i];
                    propertyTest = propertyTest || hasOwnProp(input, property);
                }

                return objectTest && propertyTest;
            }

            function getCalendarFormat(myMoment, now) {
                var diff = myMoment.diff(now, 'days', true);
                return diff < -6
                    ? 'sameElse'
                    : diff < -1
                        ? 'lastWeek'
                        : diff < 0
                            ? 'lastDay'
                            : diff < 1
                                ? 'sameDay'
                                : diff < 2
                                    ? 'nextDay'
                                    : diff < 7
                                        ? 'nextWeek'
                                        : 'sameElse';
            }

            function calendar$1(time, formats) {
                // Support for single parameter, formats only overload to the calendar function
                if (arguments.length === 1) {
                    if (!arguments[0]) {
                        time = undefined;
                        formats = undefined;
                    } else if (isMomentInput(arguments[0])) {
                        time = arguments[0];
                        formats = undefined;
                    } else if (isCalendarSpec(arguments[0])) {
                        formats = arguments[0];
                        time = undefined;
                    }
                }
                // We want to compare the start of today, vs this.
                // Getting start-of-today depends on whether we're local/utc/offset or not.
                var now = time || createLocal(),
                    sod = cloneWithOffset(now, this).startOf('day'),
                    format = hooks.calendarFormat(this, sod) || 'sameElse',
                    output =
                        formats &&
                        (isFunction(formats[format])
                            ? formats[format].call(this, now)
                            : formats[format]);

                return this.format(
                    output || this.localeData().calendar(format, this, createLocal(now))
                );
            }

            function clone() {
                return new Moment(this);
            }

            function isAfter(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input);
                if (!(this.isValid() && localInput.isValid())) {
                    return false;
                }
                units = normalizeUnits(units) || 'millisecond';
                if (units === 'millisecond') {
                    return this.valueOf() > localInput.valueOf();
                } else {
                    return localInput.valueOf() < this.clone().startOf(units).valueOf();
                }
            }

            function isBefore(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input);
                if (!(this.isValid() && localInput.isValid())) {
                    return false;
                }
                units = normalizeUnits(units) || 'millisecond';
                if (units === 'millisecond') {
                    return this.valueOf() < localInput.valueOf();
                } else {
                    return this.clone().endOf(units).valueOf() < localInput.valueOf();
                }
            }

            function isBetween(from, to, units, inclusivity) {
                var localFrom = isMoment(from) ? from : createLocal(from),
                    localTo = isMoment(to) ? to : createLocal(to);
                if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                    return false;
                }
                inclusivity = inclusivity || '()';
                return (
                    (inclusivity[0] === '('
                        ? this.isAfter(localFrom, units)
                        : !this.isBefore(localFrom, units)) &&
                    (inclusivity[1] === ')'
                        ? this.isBefore(localTo, units)
                        : !this.isAfter(localTo, units))
                );
            }

            function isSame(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input),
                    inputMs;
                if (!(this.isValid() && localInput.isValid())) {
                    return false;
                }
                units = normalizeUnits(units) || 'millisecond';
                if (units === 'millisecond') {
                    return this.valueOf() === localInput.valueOf();
                } else {
                    inputMs = localInput.valueOf();
                    return (
                        this.clone().startOf(units).valueOf() <= inputMs &&
                        inputMs <= this.clone().endOf(units).valueOf()
                    );
                }
            }

            function isSameOrAfter(input, units) {
                return this.isSame(input, units) || this.isAfter(input, units);
            }

            function isSameOrBefore(input, units) {
                return this.isSame(input, units) || this.isBefore(input, units);
            }

            function diff(input, units, asFloat) {
                var that, zoneDelta, output;

                if (!this.isValid()) {
                    return NaN;
                }

                that = cloneWithOffset(input, this);

                if (!that.isValid()) {
                    return NaN;
                }

                zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

                units = normalizeUnits(units);

                switch (units) {
                    case 'year':
                        output = monthDiff(this, that) / 12;
                        break;
                    case 'month':
                        output = monthDiff(this, that);
                        break;
                    case 'quarter':
                        output = monthDiff(this, that) / 3;
                        break;
                    case 'second':
                        output = (this - that) / 1e3;
                        break; // 1000
                    case 'minute':
                        output = (this - that) / 6e4;
                        break; // 1000 * 60
                    case 'hour':
                        output = (this - that) / 36e5;
                        break; // 1000 * 60 * 60
                    case 'day':
                        output = (this - that - zoneDelta) / 864e5;
                        break; // 1000 * 60 * 60 * 24, negate dst
                    case 'week':
                        output = (this - that - zoneDelta) / 6048e5;
                        break; // 1000 * 60 * 60 * 24 * 7, negate dst
                    default:
                        output = this - that;
                }

                return asFloat ? output : absFloor(output);
            }

            function monthDiff(a, b) {
                if (a.date() < b.date()) {
                    // end-of-month calculations work correct when the start month has more
                    // days than the end month.
                    return -monthDiff(b, a);
                }
                // difference in months
                var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                    // b is in (anchor - 1 month, anchor + 1 month)
                    anchor = a.clone().add(wholeMonthDiff, 'months'),
                    anchor2,
                    adjust;

                if (b - anchor < 0) {
                    anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                    // linear across the month
                    adjust = (b - anchor) / (anchor - anchor2);
                } else {
                    anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                    // linear across the month
                    adjust = (b - anchor) / (anchor2 - anchor);
                }

                //check for negative zero, return zero if negative zero
                return -(wholeMonthDiff + adjust) || 0;
            }

            hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
            hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

            function toString() {
                return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
            }

            function toISOString(keepOffset) {
                if (!this.isValid()) {
                    return null;
                }
                var utc = keepOffset !== true,
                    m = utc ? this.clone().utc() : this;
                if (m.year() < 0 || m.year() > 9999) {
                    return formatMoment(
                        m,
                        utc
                            ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                            : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                    );
                }
                if (isFunction(Date.prototype.toISOString)) {
                    // native implementation is ~50x faster, use it when we can
                    if (utc) {
                        return this.toDate().toISOString();
                    } else {
                        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                            .toISOString()
                            .replace('Z', formatMoment(m, 'Z'));
                    }
                }
                return formatMoment(
                    m,
                    utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
                );
            }

            /**
             * Return a human readable representation of a moment that can
             * also be evaluated to get a new moment which is the same
             *
             * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
             */
            function inspect() {
                if (!this.isValid()) {
                    return 'moment.invalid(/* ' + this._i + ' */)';
                }
                var func = 'moment',
                    zone = '',
                    prefix,
                    year,
                    datetime,
                    suffix;
                if (!this.isLocal()) {
                    func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                    zone = 'Z';
                }
                prefix = '[' + func + '("]';
                year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
                datetime = '-MM-DD[T]HH:mm:ss.SSS';
                suffix = zone + '[")]';

                return this.format(prefix + year + datetime + suffix);
            }

            function format(inputString) {
                if (!inputString) {
                    inputString = this.isUtc()
                        ? hooks.defaultFormatUtc
                        : hooks.defaultFormat;
                }
                var output = formatMoment(this, inputString);
                return this.localeData().postformat(output);
            }

            function from(time, withoutSuffix) {
                if (
                    this.isValid() &&
                    ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
                ) {
                    return createDuration({ to: this, from: time })
                        .locale(this.locale())
                        .humanize(!withoutSuffix);
                } else {
                    return this.localeData().invalidDate();
                }
            }

            function fromNow(withoutSuffix) {
                return this.from(createLocal(), withoutSuffix);
            }

            function to(time, withoutSuffix) {
                if (
                    this.isValid() &&
                    ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
                ) {
                    return createDuration({ from: this, to: time })
                        .locale(this.locale())
                        .humanize(!withoutSuffix);
                } else {
                    return this.localeData().invalidDate();
                }
            }

            function toNow(withoutSuffix) {
                return this.to(createLocal(), withoutSuffix);
            }

            // If passed a locale key, it will set the locale for this
            // instance.  Otherwise, it will return the locale configuration
            // variables for this instance.
            function locale(key) {
                var newLocaleData;

                if (key === undefined) {
                    return this._locale._abbr;
                } else {
                    newLocaleData = getLocale(key);
                    if (newLocaleData != null) {
                        this._locale = newLocaleData;
                    }
                    return this;
                }
            }

            var lang = deprecate(
                'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
                function (key) {
                    if (key === undefined) {
                        return this.localeData();
                    } else {
                        return this.locale(key);
                    }
                }
            );

            function localeData() {
                return this._locale;
            }

            var MS_PER_SECOND = 1000,
                MS_PER_MINUTE = 60 * MS_PER_SECOND,
                MS_PER_HOUR = 60 * MS_PER_MINUTE,
                MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

            // actual modulo - handles negative numbers (for dates before 1970):
            function mod$1(dividend, divisor) {
                return ((dividend % divisor) + divisor) % divisor;
            }

            function localStartOfDate(y, m, d) {
                // the date constructor remaps years 0-99 to 1900-1999
                if (y < 100 && y >= 0) {
                    // preserve leap years using a full 400 year cycle, then reset
                    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
                } else {
                    return new Date(y, m, d).valueOf();
                }
            }

            function utcStartOfDate(y, m, d) {
                // Date.UTC remaps years 0-99 to 1900-1999
                if (y < 100 && y >= 0) {
                    // preserve leap years using a full 400 year cycle, then reset
                    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
                } else {
                    return Date.UTC(y, m, d);
                }
            }

            function startOf(units) {
                var time, startOfDate;
                units = normalizeUnits(units);
                if (units === undefined || units === 'millisecond' || !this.isValid()) {
                    return this;
                }

                startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

                switch (units) {
                    case 'year':
                        time = startOfDate(this.year(), 0, 1);
                        break;
                    case 'quarter':
                        time = startOfDate(
                            this.year(),
                            this.month() - (this.month() % 3),
                            1
                        );
                        break;
                    case 'month':
                        time = startOfDate(this.year(), this.month(), 1);
                        break;
                    case 'week':
                        time = startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - this.weekday()
                        );
                        break;
                    case 'isoWeek':
                        time = startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - (this.isoWeekday() - 1)
                        );
                        break;
                    case 'day':
                    case 'date':
                        time = startOfDate(this.year(), this.month(), this.date());
                        break;
                    case 'hour':
                        time = this._d.valueOf();
                        time -= mod$1(
                            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                            MS_PER_HOUR
                        );
                        break;
                    case 'minute':
                        time = this._d.valueOf();
                        time -= mod$1(time, MS_PER_MINUTE);
                        break;
                    case 'second':
                        time = this._d.valueOf();
                        time -= mod$1(time, MS_PER_SECOND);
                        break;
                }

                this._d.setTime(time);
                hooks.updateOffset(this, true);
                return this;
            }

            function endOf(units) {
                var time, startOfDate;
                units = normalizeUnits(units);
                if (units === undefined || units === 'millisecond' || !this.isValid()) {
                    return this;
                }

                startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

                switch (units) {
                    case 'year':
                        time = startOfDate(this.year() + 1, 0, 1) - 1;
                        break;
                    case 'quarter':
                        time =
                            startOfDate(
                                this.year(),
                                this.month() - (this.month() % 3) + 3,
                                1
                            ) - 1;
                        break;
                    case 'month':
                        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                        break;
                    case 'week':
                        time =
                            startOfDate(
                                this.year(),
                                this.month(),
                                this.date() - this.weekday() + 7
                            ) - 1;
                        break;
                    case 'isoWeek':
                        time =
                            startOfDate(
                                this.year(),
                                this.month(),
                                this.date() - (this.isoWeekday() - 1) + 7
                            ) - 1;
                        break;
                    case 'day':
                    case 'date':
                        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                        break;
                    case 'hour':
                        time = this._d.valueOf();
                        time +=
                            MS_PER_HOUR -
                            mod$1(
                                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                                MS_PER_HOUR
                            ) -
                            1;
                        break;
                    case 'minute':
                        time = this._d.valueOf();
                        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                        break;
                    case 'second':
                        time = this._d.valueOf();
                        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                        break;
                }

                this._d.setTime(time);
                hooks.updateOffset(this, true);
                return this;
            }

            function valueOf() {
                return this._d.valueOf() - (this._offset || 0) * 60000;
            }

            function unix() {
                return Math.floor(this.valueOf() / 1000);
            }

            function toDate() {
                return new Date(this.valueOf());
            }

            function toArray() {
                var m = this;
                return [
                    m.year(),
                    m.month(),
                    m.date(),
                    m.hour(),
                    m.minute(),
                    m.second(),
                    m.millisecond(),
                ];
            }

            function toObject() {
                var m = this;
                return {
                    years: m.year(),
                    months: m.month(),
                    date: m.date(),
                    hours: m.hours(),
                    minutes: m.minutes(),
                    seconds: m.seconds(),
                    milliseconds: m.milliseconds(),
                };
            }

            function toJSON() {
                // new Date(NaN).toJSON() === null
                return this.isValid() ? this.toISOString() : null;
            }

            function isValid$2() {
                return isValid(this);
            }

            function parsingFlags() {
                return extend({}, getParsingFlags(this));
            }

            function invalidAt() {
                return getParsingFlags(this).overflow;
            }

            function creationData() {
                return {
                    input: this._i,
                    format: this._f,
                    locale: this._locale,
                    isUTC: this._isUTC,
                    strict: this._strict,
                };
            }

            addFormatToken('N', 0, 0, 'eraAbbr');
            addFormatToken('NN', 0, 0, 'eraAbbr');
            addFormatToken('NNN', 0, 0, 'eraAbbr');
            addFormatToken('NNNN', 0, 0, 'eraName');
            addFormatToken('NNNNN', 0, 0, 'eraNarrow');

            addFormatToken('y', ['y', 1], 'yo', 'eraYear');
            addFormatToken('y', ['yy', 2], 0, 'eraYear');
            addFormatToken('y', ['yyy', 3], 0, 'eraYear');
            addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

            addRegexToken('N', matchEraAbbr);
            addRegexToken('NN', matchEraAbbr);
            addRegexToken('NNN', matchEraAbbr);
            addRegexToken('NNNN', matchEraName);
            addRegexToken('NNNNN', matchEraNarrow);

            addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
                input,
                array,
                config,
                token
            ) {
                var era = config._locale.erasParse(input, token, config._strict);
                if (era) {
                    getParsingFlags(config).era = era;
                } else {
                    getParsingFlags(config).invalidEra = input;
                }
            });

            addRegexToken('y', matchUnsigned);
            addRegexToken('yy', matchUnsigned);
            addRegexToken('yyy', matchUnsigned);
            addRegexToken('yyyy', matchUnsigned);
            addRegexToken('yo', matchEraYearOrdinal);

            addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
            addParseToken(['yo'], function (input, array, config, token) {
                var match;
                if (config._locale._eraYearOrdinalRegex) {
                    match = input.match(config._locale._eraYearOrdinalRegex);
                }

                if (config._locale.eraYearOrdinalParse) {
                    array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
                } else {
                    array[YEAR] = parseInt(input, 10);
                }
            });

            function localeEras(m, format) {
                var i,
                    l,
                    date,
                    eras = this._eras || getLocale('en')._eras;
                for (i = 0, l = eras.length; i < l; ++i) {
                    switch (typeof eras[i].since) {
                        case 'string':
                            // truncate time
                            date = hooks(eras[i].since).startOf('day');
                            eras[i].since = date.valueOf();
                            break;
                    }

                    switch (typeof eras[i].until) {
                        case 'undefined':
                            eras[i].until = +Infinity;
                            break;
                        case 'string':
                            // truncate time
                            date = hooks(eras[i].until).startOf('day').valueOf();
                            eras[i].until = date.valueOf();
                            break;
                    }
                }
                return eras;
            }

            function localeErasParse(eraName, format, strict) {
                var i,
                    l,
                    eras = this.eras(),
                    name,
                    abbr,
                    narrow;
                eraName = eraName.toUpperCase();

                for (i = 0, l = eras.length; i < l; ++i) {
                    name = eras[i].name.toUpperCase();
                    abbr = eras[i].abbr.toUpperCase();
                    narrow = eras[i].narrow.toUpperCase();

                    if (strict) {
                        switch (format) {
                            case 'N':
                            case 'NN':
                            case 'NNN':
                                if (abbr === eraName) {
                                    return eras[i];
                                }
                                break;

                            case 'NNNN':
                                if (name === eraName) {
                                    return eras[i];
                                }
                                break;

                            case 'NNNNN':
                                if (narrow === eraName) {
                                    return eras[i];
                                }
                                break;
                        }
                    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                        return eras[i];
                    }
                }
            }

            function localeErasConvertYear(era, year) {
                var dir = era.since <= era.until ? +1 : -1;
                if (year === undefined) {
                    return hooks(era.since).year();
                } else {
                    return hooks(era.since).year() + (year - era.offset) * dir;
                }
            }

            function getEraName() {
                var i,
                    l,
                    val,
                    eras = this.localeData().eras();
                for (i = 0, l = eras.length; i < l; ++i) {
                    // truncate time
                    val = this.clone().startOf('day').valueOf();

                    if (eras[i].since <= val && val <= eras[i].until) {
                        return eras[i].name;
                    }
                    if (eras[i].until <= val && val <= eras[i].since) {
                        return eras[i].name;
                    }
                }

                return '';
            }

            function getEraNarrow() {
                var i,
                    l,
                    val,
                    eras = this.localeData().eras();
                for (i = 0, l = eras.length; i < l; ++i) {
                    // truncate time
                    val = this.clone().startOf('day').valueOf();

                    if (eras[i].since <= val && val <= eras[i].until) {
                        return eras[i].narrow;
                    }
                    if (eras[i].until <= val && val <= eras[i].since) {
                        return eras[i].narrow;
                    }
                }

                return '';
            }

            function getEraAbbr() {
                var i,
                    l,
                    val,
                    eras = this.localeData().eras();
                for (i = 0, l = eras.length; i < l; ++i) {
                    // truncate time
                    val = this.clone().startOf('day').valueOf();

                    if (eras[i].since <= val && val <= eras[i].until) {
                        return eras[i].abbr;
                    }
                    if (eras[i].until <= val && val <= eras[i].since) {
                        return eras[i].abbr;
                    }
                }

                return '';
            }

            function getEraYear() {
                var i,
                    l,
                    dir,
                    val,
                    eras = this.localeData().eras();
                for (i = 0, l = eras.length; i < l; ++i) {
                    dir = eras[i].since <= eras[i].until ? +1 : -1;

                    // truncate time
                    val = this.clone().startOf('day').valueOf();

                    if (
                        (eras[i].since <= val && val <= eras[i].until) ||
                        (eras[i].until <= val && val <= eras[i].since)
                    ) {
                        return (
                            (this.year() - hooks(eras[i].since).year()) * dir +
                            eras[i].offset
                        );
                    }
                }

                return this.year();
            }

            function erasNameRegex(isStrict) {
                if (!hasOwnProp(this, '_erasNameRegex')) {
                    computeErasParse.call(this);
                }
                return isStrict ? this._erasNameRegex : this._erasRegex;
            }

            function erasAbbrRegex(isStrict) {
                if (!hasOwnProp(this, '_erasAbbrRegex')) {
                    computeErasParse.call(this);
                }
                return isStrict ? this._erasAbbrRegex : this._erasRegex;
            }

            function erasNarrowRegex(isStrict) {
                if (!hasOwnProp(this, '_erasNarrowRegex')) {
                    computeErasParse.call(this);
                }
                return isStrict ? this._erasNarrowRegex : this._erasRegex;
            }

            function matchEraAbbr(isStrict, locale) {
                return locale.erasAbbrRegex(isStrict);
            }

            function matchEraName(isStrict, locale) {
                return locale.erasNameRegex(isStrict);
            }

            function matchEraNarrow(isStrict, locale) {
                return locale.erasNarrowRegex(isStrict);
            }

            function matchEraYearOrdinal(isStrict, locale) {
                return locale._eraYearOrdinalRegex || matchUnsigned;
            }

            function computeErasParse() {
                var abbrPieces = [],
                    namePieces = [],
                    narrowPieces = [],
                    mixedPieces = [],
                    i,
                    l,
                    eras = this.eras();

                for (i = 0, l = eras.length; i < l; ++i) {
                    namePieces.push(regexEscape(eras[i].name));
                    abbrPieces.push(regexEscape(eras[i].abbr));
                    narrowPieces.push(regexEscape(eras[i].narrow));

                    mixedPieces.push(regexEscape(eras[i].name));
                    mixedPieces.push(regexEscape(eras[i].abbr));
                    mixedPieces.push(regexEscape(eras[i].narrow));
                }

                this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
                this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
                this._erasNarrowRegex = new RegExp(
                    '^(' + narrowPieces.join('|') + ')',
                    'i'
                );
            }

            // FORMATTING

            addFormatToken(0, ['gg', 2], 0, function () {
                return this.weekYear() % 100;
            });

            addFormatToken(0, ['GG', 2], 0, function () {
                return this.isoWeekYear() % 100;
            });

            function addWeekYearFormatToken(token, getter) {
                addFormatToken(0, [token, token.length], 0, getter);
            }

            addWeekYearFormatToken('gggg', 'weekYear');
            addWeekYearFormatToken('ggggg', 'weekYear');
            addWeekYearFormatToken('GGGG', 'isoWeekYear');
            addWeekYearFormatToken('GGGGG', 'isoWeekYear');

            // ALIASES

            addUnitAlias('weekYear', 'gg');
            addUnitAlias('isoWeekYear', 'GG');

            // PRIORITY

            addUnitPriority('weekYear', 1);
            addUnitPriority('isoWeekYear', 1);

            // PARSING

            addRegexToken('G', matchSigned);
            addRegexToken('g', matchSigned);
            addRegexToken('GG', match1to2, match2);
            addRegexToken('gg', match1to2, match2);
            addRegexToken('GGGG', match1to4, match4);
            addRegexToken('gggg', match1to4, match4);
            addRegexToken('GGGGG', match1to6, match6);
            addRegexToken('ggggg', match1to6, match6);

            addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
                input,
                week,
                config,
                token
            ) {
                week[token.substr(0, 2)] = toInt(input);
            });

            addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
                week[token] = hooks.parseTwoDigitYear(input);
            });

            // MOMENTS

            function getSetWeekYear(input) {
                return getSetWeekYearHelper.call(
                    this,
                    input,
                    this.week(),
                    this.weekday(),
                    this.localeData()._week.dow,
                    this.localeData()._week.doy
                );
            }

            function getSetISOWeekYear(input) {
                return getSetWeekYearHelper.call(
                    this,
                    input,
                    this.isoWeek(),
                    this.isoWeekday(),
                    1,
                    4
                );
            }

            function getISOWeeksInYear() {
                return weeksInYear(this.year(), 1, 4);
            }

            function getISOWeeksInISOWeekYear() {
                return weeksInYear(this.isoWeekYear(), 1, 4);
            }

            function getWeeksInYear() {
                var weekInfo = this.localeData()._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            }

            function getWeeksInWeekYear() {
                var weekInfo = this.localeData()._week;
                return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
            }

            function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                var weeksTarget;
                if (input == null) {
                    return weekOfYear(this, dow, doy).year;
                } else {
                    weeksTarget = weeksInYear(input, dow, doy);
                    if (week > weeksTarget) {
                        week = weeksTarget;
                    }
                    return setWeekAll.call(this, input, week, weekday, dow, doy);
                }
            }

            function setWeekAll(weekYear, week, weekday, dow, doy) {
                var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                    date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

                this.year(date.getUTCFullYear());
                this.month(date.getUTCMonth());
                this.date(date.getUTCDate());
                return this;
            }

            // FORMATTING

            addFormatToken('Q', 0, 'Qo', 'quarter');

            // ALIASES

            addUnitAlias('quarter', 'Q');

            // PRIORITY

            addUnitPriority('quarter', 7);

            // PARSING

            addRegexToken('Q', match1);
            addParseToken('Q', function (input, array) {
                array[MONTH] = (toInt(input) - 1) * 3;
            });

            // MOMENTS

            function getSetQuarter(input) {
                return input == null
                    ? Math.ceil((this.month() + 1) / 3)
                    : this.month((input - 1) * 3 + (this.month() % 3));
            }

            // FORMATTING

            addFormatToken('D', ['DD', 2], 'Do', 'date');

            // ALIASES

            addUnitAlias('date', 'D');

            // PRIORITY
            addUnitPriority('date', 9);

            // PARSING

            addRegexToken('D', match1to2);
            addRegexToken('DD', match1to2, match2);
            addRegexToken('Do', function (isStrict, locale) {
                // TODO: Remove "ordinalParse" fallback in next major release.
                return isStrict
                    ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                    : locale._dayOfMonthOrdinalParseLenient;
            });

            addParseToken(['D', 'DD'], DATE);
            addParseToken('Do', function (input, array) {
                array[DATE] = toInt(input.match(match1to2)[0]);
            });

            // MOMENTS

            var getSetDayOfMonth = makeGetSet('Date', true);

            // FORMATTING

            addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

            // ALIASES

            addUnitAlias('dayOfYear', 'DDD');

            // PRIORITY
            addUnitPriority('dayOfYear', 4);

            // PARSING

            addRegexToken('DDD', match1to3);
            addRegexToken('DDDD', match3);
            addParseToken(['DDD', 'DDDD'], function (input, array, config) {
                config._dayOfYear = toInt(input);
            });

            // HELPERS

            // MOMENTS

            function getSetDayOfYear(input) {
                var dayOfYear =
                    Math.round(
                        (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                    ) + 1;
                return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
            }

            // FORMATTING

            addFormatToken('m', ['mm', 2], 0, 'minute');

            // ALIASES

            addUnitAlias('minute', 'm');

            // PRIORITY

            addUnitPriority('minute', 14);

            // PARSING

            addRegexToken('m', match1to2);
            addRegexToken('mm', match1to2, match2);
            addParseToken(['m', 'mm'], MINUTE);

            // MOMENTS

            var getSetMinute = makeGetSet('Minutes', false);

            // FORMATTING

            addFormatToken('s', ['ss', 2], 0, 'second');

            // ALIASES

            addUnitAlias('second', 's');

            // PRIORITY

            addUnitPriority('second', 15);

            // PARSING

            addRegexToken('s', match1to2);
            addRegexToken('ss', match1to2, match2);
            addParseToken(['s', 'ss'], SECOND);

            // MOMENTS

            var getSetSecond = makeGetSet('Seconds', false);

            // FORMATTING

            addFormatToken('S', 0, 0, function () {
                return ~~(this.millisecond() / 100);
            });

            addFormatToken(0, ['SS', 2], 0, function () {
                return ~~(this.millisecond() / 10);
            });

            addFormatToken(0, ['SSS', 3], 0, 'millisecond');
            addFormatToken(0, ['SSSS', 4], 0, function () {
                return this.millisecond() * 10;
            });
            addFormatToken(0, ['SSSSS', 5], 0, function () {
                return this.millisecond() * 100;
            });
            addFormatToken(0, ['SSSSSS', 6], 0, function () {
                return this.millisecond() * 1000;
            });
            addFormatToken(0, ['SSSSSSS', 7], 0, function () {
                return this.millisecond() * 10000;
            });
            addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
                return this.millisecond() * 100000;
            });
            addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
                return this.millisecond() * 1000000;
            });

            // ALIASES

            addUnitAlias('millisecond', 'ms');

            // PRIORITY

            addUnitPriority('millisecond', 16);

            // PARSING

            addRegexToken('S', match1to3, match1);
            addRegexToken('SS', match1to3, match2);
            addRegexToken('SSS', match1to3, match3);

            var token, getSetMillisecond;
            for (token = 'SSSS'; token.length <= 9; token += 'S') {
                addRegexToken(token, matchUnsigned);
            }

            function parseMs(input, array) {
                array[MILLISECOND] = toInt(('0.' + input) * 1000);
            }

            for (token = 'S'; token.length <= 9; token += 'S') {
                addParseToken(token, parseMs);
            }

            getSetMillisecond = makeGetSet('Milliseconds', false);

            // FORMATTING

            addFormatToken('z', 0, 0, 'zoneAbbr');
            addFormatToken('zz', 0, 0, 'zoneName');

            // MOMENTS

            function getZoneAbbr() {
                return this._isUTC ? 'UTC' : '';
            }

            function getZoneName() {
                return this._isUTC ? 'Coordinated Universal Time' : '';
            }

            var proto = Moment.prototype;

            proto.add = add;
            proto.calendar = calendar$1;
            proto.clone = clone;
            proto.diff = diff;
            proto.endOf = endOf;
            proto.format = format;
            proto.from = from;
            proto.fromNow = fromNow;
            proto.to = to;
            proto.toNow = toNow;
            proto.get = stringGet;
            proto.invalidAt = invalidAt;
            proto.isAfter = isAfter;
            proto.isBefore = isBefore;
            proto.isBetween = isBetween;
            proto.isSame = isSame;
            proto.isSameOrAfter = isSameOrAfter;
            proto.isSameOrBefore = isSameOrBefore;
            proto.isValid = isValid$2;
            proto.lang = lang;
            proto.locale = locale;
            proto.localeData = localeData;
            proto.max = prototypeMax;
            proto.min = prototypeMin;
            proto.parsingFlags = parsingFlags;
            proto.set = stringSet;
            proto.startOf = startOf;
            proto.subtract = subtract;
            proto.toArray = toArray;
            proto.toObject = toObject;
            proto.toDate = toDate;
            proto.toISOString = toISOString;
            proto.inspect = inspect;
            if (typeof Symbol !== 'undefined' && Symbol.for != null) {
                proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                    return 'Moment<' + this.format() + '>';
                };
            }
            proto.toJSON = toJSON;
            proto.toString = toString;
            proto.unix = unix;
            proto.valueOf = valueOf;
            proto.creationData = creationData;
            proto.eraName = getEraName;
            proto.eraNarrow = getEraNarrow;
            proto.eraAbbr = getEraAbbr;
            proto.eraYear = getEraYear;
            proto.year = getSetYear;
            proto.isLeapYear = getIsLeapYear;
            proto.weekYear = getSetWeekYear;
            proto.isoWeekYear = getSetISOWeekYear;
            proto.quarter = proto.quarters = getSetQuarter;
            proto.month = getSetMonth;
            proto.daysInMonth = getDaysInMonth;
            proto.week = proto.weeks = getSetWeek;
            proto.isoWeek = proto.isoWeeks = getSetISOWeek;
            proto.weeksInYear = getWeeksInYear;
            proto.weeksInWeekYear = getWeeksInWeekYear;
            proto.isoWeeksInYear = getISOWeeksInYear;
            proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
            proto.date = getSetDayOfMonth;
            proto.day = proto.days = getSetDayOfWeek;
            proto.weekday = getSetLocaleDayOfWeek;
            proto.isoWeekday = getSetISODayOfWeek;
            proto.dayOfYear = getSetDayOfYear;
            proto.hour = proto.hours = getSetHour;
            proto.minute = proto.minutes = getSetMinute;
            proto.second = proto.seconds = getSetSecond;
            proto.millisecond = proto.milliseconds = getSetMillisecond;
            proto.utcOffset = getSetOffset;
            proto.utc = setOffsetToUTC;
            proto.local = setOffsetToLocal;
            proto.parseZone = setOffsetToParsedOffset;
            proto.hasAlignedHourOffset = hasAlignedHourOffset;
            proto.isDST = isDaylightSavingTime;
            proto.isLocal = isLocal;
            proto.isUtcOffset = isUtcOffset;
            proto.isUtc = isUtc;
            proto.isUTC = isUtc;
            proto.zoneAbbr = getZoneAbbr;
            proto.zoneName = getZoneName;
            proto.dates = deprecate(
                'dates accessor is deprecated. Use date instead.',
                getSetDayOfMonth
            );
            proto.months = deprecate(
                'months accessor is deprecated. Use month instead',
                getSetMonth
            );
            proto.years = deprecate(
                'years accessor is deprecated. Use year instead',
                getSetYear
            );
            proto.zone = deprecate(
                'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
                getSetZone
            );
            proto.isDSTShifted = deprecate(
                'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
                isDaylightSavingTimeShifted
            );

            function createUnix(input) {
                return createLocal(input * 1000);
            }

            function createInZone() {
                return createLocal.apply(null, arguments).parseZone();
            }

            function preParsePostFormat(string) {
                return string;
            }

            var proto$1 = Locale.prototype;

            proto$1.calendar = calendar;
            proto$1.longDateFormat = longDateFormat;
            proto$1.invalidDate = invalidDate;
            proto$1.ordinal = ordinal;
            proto$1.preparse = preParsePostFormat;
            proto$1.postformat = preParsePostFormat;
            proto$1.relativeTime = relativeTime;
            proto$1.pastFuture = pastFuture;
            proto$1.set = set;
            proto$1.eras = localeEras;
            proto$1.erasParse = localeErasParse;
            proto$1.erasConvertYear = localeErasConvertYear;
            proto$1.erasAbbrRegex = erasAbbrRegex;
            proto$1.erasNameRegex = erasNameRegex;
            proto$1.erasNarrowRegex = erasNarrowRegex;

            proto$1.months = localeMonths;
            proto$1.monthsShort = localeMonthsShort;
            proto$1.monthsParse = localeMonthsParse;
            proto$1.monthsRegex = monthsRegex;
            proto$1.monthsShortRegex = monthsShortRegex;
            proto$1.week = localeWeek;
            proto$1.firstDayOfYear = localeFirstDayOfYear;
            proto$1.firstDayOfWeek = localeFirstDayOfWeek;

            proto$1.weekdays = localeWeekdays;
            proto$1.weekdaysMin = localeWeekdaysMin;
            proto$1.weekdaysShort = localeWeekdaysShort;
            proto$1.weekdaysParse = localeWeekdaysParse;

            proto$1.weekdaysRegex = weekdaysRegex;
            proto$1.weekdaysShortRegex = weekdaysShortRegex;
            proto$1.weekdaysMinRegex = weekdaysMinRegex;

            proto$1.isPM = localeIsPM;
            proto$1.meridiem = localeMeridiem;

            function get$1(format, index, field, setter) {
                var locale = getLocale(),
                    utc = createUTC().set(setter, index);
                return locale[field](utc, format);
            }

            function listMonthsImpl(format, index, field) {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';

                if (index != null) {
                    return get$1(format, index, field, 'month');
                }

                var i,
                    out = [];
                for (i = 0; i < 12; i++) {
                    out[i] = get$1(format, i, field, 'month');
                }
                return out;
            }

            // ()
            // (5)
            // (fmt, 5)
            // (fmt)
            // (true)
            // (true, 5)
            // (true, fmt, 5)
            // (true, fmt)
            function listWeekdaysImpl(localeSorted, format, index, field) {
                if (typeof localeSorted === 'boolean') {
                    if (isNumber(format)) {
                        index = format;
                        format = undefined;
                    }

                    format = format || '';
                } else {
                    format = localeSorted;
                    index = format;
                    localeSorted = false;

                    if (isNumber(format)) {
                        index = format;
                        format = undefined;
                    }

                    format = format || '';
                }

                var locale = getLocale(),
                    shift = localeSorted ? locale._week.dow : 0,
                    i,
                    out = [];

                if (index != null) {
                    return get$1(format, (index + shift) % 7, field, 'day');
                }

                for (i = 0; i < 7; i++) {
                    out[i] = get$1(format, (i + shift) % 7, field, 'day');
                }
                return out;
            }

            function listMonths(format, index) {
                return listMonthsImpl(format, index, 'months');
            }

            function listMonthsShort(format, index) {
                return listMonthsImpl(format, index, 'monthsShort');
            }

            function listWeekdays(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
            }

            function listWeekdaysShort(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
            }

            function listWeekdaysMin(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
            }

            getSetGlobalLocale('en', {
                eras: [
                    {
                        since: '0001-01-01',
                        until: +Infinity,
                        offset: 1,
                        name: 'Anno Domini',
                        narrow: 'AD',
                        abbr: 'AD',
                    },
                    {
                        since: '0000-12-31',
                        until: -Infinity,
                        offset: 1,
                        name: 'Before Christ',
                        narrow: 'BC',
                        abbr: 'BC',
                    },
                ],
                dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                ordinal: function (number) {
                    var b = number % 10,
                        output =
                            toInt((number % 100) / 10) === 1
                                ? 'th'
                                : b === 1
                                ? 'st'
                                : b === 2
                                    ? 'nd'
                                    : b === 3
                                        ? 'rd'
                                        : 'th';
                    return number + output;
                },
            });

            // Side effect imports

            hooks.lang = deprecate(
                'moment.lang is deprecated. Use moment.locale instead.',
                getSetGlobalLocale
            );
            hooks.langData = deprecate(
                'moment.langData is deprecated. Use moment.localeData instead.',
                getLocale
            );

            var mathAbs = Math.abs;

            function abs() {
                var data = this._data;

                this._milliseconds = mathAbs(this._milliseconds);
                this._days = mathAbs(this._days);
                this._months = mathAbs(this._months);

                data.milliseconds = mathAbs(data.milliseconds);
                data.seconds = mathAbs(data.seconds);
                data.minutes = mathAbs(data.minutes);
                data.hours = mathAbs(data.hours);
                data.months = mathAbs(data.months);
                data.years = mathAbs(data.years);

                return this;
            }

            function addSubtract$1(duration, input, value, direction) {
                var other = createDuration(input, value);

                duration._milliseconds += direction * other._milliseconds;
                duration._days += direction * other._days;
                duration._months += direction * other._months;

                return duration._bubble();
            }

            // supports only 2.0-style add(1, 's') or add(duration)
            function add$1(input, value) {
                return addSubtract$1(this, input, value, 1);
            }

            // supports only 2.0-style subtract(1, 's') or subtract(duration)
            function subtract$1(input, value) {
                return addSubtract$1(this, input, value, -1);
            }

            function absCeil(number) {
                if (number < 0) {
                    return Math.floor(number);
                } else {
                    return Math.ceil(number);
                }
            }

            function bubble() {
                var milliseconds = this._milliseconds,
                    days = this._days,
                    months = this._months,
                    data = this._data,
                    seconds,
                    minutes,
                    hours,
                    years,
                    monthsFromDays;

                // if we have a mix of positive and negative values, bubble down first
                // check: https://github.com/moment/moment/issues/2166
                if (
                    !(
                        (milliseconds >= 0 && days >= 0 && months >= 0) ||
                        (milliseconds <= 0 && days <= 0 && months <= 0)
                    )
                ) {
                    milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                    days = 0;
                    months = 0;
                }

                // The following code bubbles up values, see the tests for
                // examples of what that means.
                data.milliseconds = milliseconds % 1000;

                seconds = absFloor(milliseconds / 1000);
                data.seconds = seconds % 60;

                minutes = absFloor(seconds / 60);
                data.minutes = minutes % 60;

                hours = absFloor(minutes / 60);
                data.hours = hours % 24;

                days += absFloor(hours / 24);

                // convert days to months
                monthsFromDays = absFloor(daysToMonths(days));
                months += monthsFromDays;
                days -= absCeil(monthsToDays(monthsFromDays));

                // 12 months -> 1 year
                years = absFloor(months / 12);
                months %= 12;

                data.days = days;
                data.months = months;
                data.years = years;

                return this;
            }

            function daysToMonths(days) {
                // 400 years have 146097 days (taking into account leap year rules)
                // 400 years have 12 months === 4800
                return (days * 4800) / 146097;
            }

            function monthsToDays(months) {
                // the reverse of daysToMonths
                return (months * 146097) / 4800;
            }

            function as(units) {
                if (!this.isValid()) {
                    return NaN;
                }
                var days,
                    months,
                    milliseconds = this._milliseconds;

                units = normalizeUnits(units);

                if (units === 'month' || units === 'quarter' || units === 'year') {
                    days = this._days + milliseconds / 864e5;
                    months = this._months + daysToMonths(days);
                    switch (units) {
                        case 'month':
                            return months;
                        case 'quarter':
                            return months / 3;
                        case 'year':
                            return months / 12;
                    }
                } else {
                    // handle milliseconds separately because of floating point math errors (issue #1867)
                    days = this._days + Math.round(monthsToDays(this._months));
                    switch (units) {
                        case 'week':
                            return days / 7 + milliseconds / 6048e5;
                        case 'day':
                            return days + milliseconds / 864e5;
                        case 'hour':
                            return days * 24 + milliseconds / 36e5;
                        case 'minute':
                            return days * 1440 + milliseconds / 6e4;
                        case 'second':
                            return days * 86400 + milliseconds / 1000;
                        // Math.floor prevents floating point math errors here
                        case 'millisecond':
                            return Math.floor(days * 864e5) + milliseconds;
                        default:
                            throw new Error('Unknown unit ' + units);
                    }
                }
            }

            // TODO: Use this.as('ms')?
            function valueOf$1() {
                if (!this.isValid()) {
                    return NaN;
                }
                return (
                    this._milliseconds +
                    this._days * 864e5 +
                    (this._months % 12) * 2592e6 +
                    toInt(this._months / 12) * 31536e6
                );
            }

            function makeAs(alias) {
                return function () {
                    return this.as(alias);
                };
            }

            var asMilliseconds = makeAs('ms'),
                asSeconds = makeAs('s'),
                asMinutes = makeAs('m'),
                asHours = makeAs('h'),
                asDays = makeAs('d'),
                asWeeks = makeAs('w'),
                asMonths = makeAs('M'),
                asQuarters = makeAs('Q'),
                asYears = makeAs('y');

            function clone$1() {
                return createDuration(this);
            }

            function get$2(units) {
                units = normalizeUnits(units);
                return this.isValid() ? this[units + 's']() : NaN;
            }

            function makeGetter(name) {
                return function () {
                    return this.isValid() ? this._data[name] : NaN;
                };
            }

            var milliseconds = makeGetter('milliseconds'),
                seconds = makeGetter('seconds'),
                minutes = makeGetter('minutes'),
                hours = makeGetter('hours'),
                days = makeGetter('days'),
                months = makeGetter('months'),
                years = makeGetter('years');

            function weeks() {
                return absFloor(this.days() / 7);
            }

            var round = Math.round,
                thresholds = {
                    ss: 44, // a few seconds to seconds
                    s: 45, // seconds to minute
                    m: 45, // minutes to hour
                    h: 22, // hours to day
                    d: 26, // days to month/week
                    w: null, // weeks to month
                    M: 11, // months to year
                };

            // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
            function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
            }

            function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
                var duration = createDuration(posNegDuration).abs(),
                    seconds = round(duration.as('s')),
                    minutes = round(duration.as('m')),
                    hours = round(duration.as('h')),
                    days = round(duration.as('d')),
                    months = round(duration.as('M')),
                    weeks = round(duration.as('w')),
                    years = round(duration.as('y')),
                    a =
                        (seconds <= thresholds.ss && ['s', seconds]) ||
                        (seconds < thresholds.s && ['ss', seconds]) ||
                        (minutes <= 1 && ['m']) ||
                        (minutes < thresholds.m && ['mm', minutes]) ||
                        (hours <= 1 && ['h']) ||
                        (hours < thresholds.h && ['hh', hours]) ||
                        (days <= 1 && ['d']) ||
                        (days < thresholds.d && ['dd', days]);

                if (thresholds.w != null) {
                    a =
                        a ||
                        (weeks <= 1 && ['w']) ||
                        (weeks < thresholds.w && ['ww', weeks]);
                }
                a = a ||
                    (months <= 1 && ['M']) ||
                    (months < thresholds.M && ['MM', months]) ||
                    (years <= 1 && ['y']) || ['yy', years];

                a[2] = withoutSuffix;
                a[3] = +posNegDuration > 0;
                a[4] = locale;
                return substituteTimeAgo.apply(null, a);
            }

            // This function allows you to set the rounding function for relative time strings
            function getSetRelativeTimeRounding(roundingFunction) {
                if (roundingFunction === undefined) {
                    return round;
                }
                if (typeof roundingFunction === 'function') {
                    round = roundingFunction;
                    return true;
                }
                return false;
            }

            // This function allows you to set a threshold for relative time strings
            function getSetRelativeTimeThreshold(threshold, limit) {
                if (thresholds[threshold] === undefined) {
                    return false;
                }
                if (limit === undefined) {
                    return thresholds[threshold];
                }
                thresholds[threshold] = limit;
                if (threshold === 's') {
                    thresholds.ss = limit - 1;
                }
                return true;
            }

            function humanize(argWithSuffix, argThresholds) {
                if (!this.isValid()) {
                    return this.localeData().invalidDate();
                }

                var withSuffix = false,
                    th = thresholds,
                    locale,
                    output;

                if (typeof argWithSuffix === 'object') {
                    argThresholds = argWithSuffix;
                    argWithSuffix = false;
                }
                if (typeof argWithSuffix === 'boolean') {
                    withSuffix = argWithSuffix;
                }
                if (typeof argThresholds === 'object') {
                    th = Object.assign({}, thresholds, argThresholds);
                    if (argThresholds.s != null && argThresholds.ss == null) {
                        th.ss = argThresholds.s - 1;
                    }
                }

                locale = this.localeData();
                output = relativeTime$1(this, !withSuffix, th, locale);

                if (withSuffix) {
                    output = locale.pastFuture(+this, output);
                }

                return locale.postformat(output);
            }

            var abs$1 = Math.abs;

            function sign(x) {
                return (x > 0) - (x < 0) || +x;
            }

            function toISOString$1() {
                // for ISO strings we do not use the normal bubbling rules:
                //  * milliseconds bubble up until they become hours
                //  * days do not bubble at all
                //  * months bubble up until they become years
                // This is because there is no context-free conversion between hours and days
                // (think of clock changes)
                // and also not between days and months (28-31 days per month)
                if (!this.isValid()) {
                    return this.localeData().invalidDate();
                }

                var seconds = abs$1(this._milliseconds) / 1000,
                    days = abs$1(this._days),
                    months = abs$1(this._months),
                    minutes,
                    hours,
                    years,
                    s,
                    total = this.asSeconds(),
                    totalSign,
                    ymSign,
                    daysSign,
                    hmsSign;

                if (!total) {
                    // this is the same as C#'s (Noda) and python (isodate)...
                    // but not other JS (goog.date)
                    return 'P0D';
                }

                // 3600 seconds -> 60 minutes -> 1 hour
                minutes = absFloor(seconds / 60);
                hours = absFloor(minutes / 60);
                seconds %= 60;
                minutes %= 60;

                // 12 months -> 1 year
                years = absFloor(months / 12);
                months %= 12;

                // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
                s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

                totalSign = total < 0 ? '-' : '';
                ymSign = sign(this._months) !== sign(total) ? '-' : '';
                daysSign = sign(this._days) !== sign(total) ? '-' : '';
                hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

                return (
                    totalSign +
                    'P' +
                    (years ? ymSign + years + 'Y' : '') +
                    (months ? ymSign + months + 'M' : '') +
                    (days ? daysSign + days + 'D' : '') +
                    (hours || minutes || seconds ? 'T' : '') +
                    (hours ? hmsSign + hours + 'H' : '') +
                    (minutes ? hmsSign + minutes + 'M' : '') +
                    (seconds ? hmsSign + s + 'S' : '')
                );
            }

            var proto$2 = Duration.prototype;

            proto$2.isValid = isValid$1;
            proto$2.abs = abs;
            proto$2.add = add$1;
            proto$2.subtract = subtract$1;
            proto$2.as = as;
            proto$2.asMilliseconds = asMilliseconds;
            proto$2.asSeconds = asSeconds;
            proto$2.asMinutes = asMinutes;
            proto$2.asHours = asHours;
            proto$2.asDays = asDays;
            proto$2.asWeeks = asWeeks;
            proto$2.asMonths = asMonths;
            proto$2.asQuarters = asQuarters;
            proto$2.asYears = asYears;
            proto$2.valueOf = valueOf$1;
            proto$2._bubble = bubble;
            proto$2.clone = clone$1;
            proto$2.get = get$2;
            proto$2.milliseconds = milliseconds;
            proto$2.seconds = seconds;
            proto$2.minutes = minutes;
            proto$2.hours = hours;
            proto$2.days = days;
            proto$2.weeks = weeks;
            proto$2.months = months;
            proto$2.years = years;
            proto$2.humanize = humanize;
            proto$2.toISOString = toISOString$1;
            proto$2.toString = toISOString$1;
            proto$2.toJSON = toISOString$1;
            proto$2.locale = locale;
            proto$2.localeData = localeData;

            proto$2.toIsoString = deprecate(
                'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
                toISOString$1
            );
            proto$2.lang = lang;

            // FORMATTING

            addFormatToken('X', 0, 0, 'unix');
            addFormatToken('x', 0, 0, 'valueOf');

            // PARSING

            addRegexToken('x', matchSigned);
            addRegexToken('X', matchTimestamp);
            addParseToken('X', function (input, array, config) {
                config._d = new Date(parseFloat(input) * 1000);
            });
            addParseToken('x', function (input, array, config) {
                config._d = new Date(toInt(input));
            });

            //! moment.js

            hooks.version = '2.29.1';

            setHookCallback(createLocal);

            hooks.fn = proto;
            hooks.min = min;
            hooks.max = max;
            hooks.now = now;
            hooks.utc = createUTC;
            hooks.unix = createUnix;
            hooks.months = listMonths;
            hooks.isDate = isDate;
            hooks.locale = getSetGlobalLocale;
            hooks.invalid = createInvalid;
            hooks.duration = createDuration;
            hooks.isMoment = isMoment;
            hooks.weekdays = listWeekdays;
            hooks.parseZone = createInZone;
            hooks.localeData = getLocale;
            hooks.isDuration = isDuration;
            hooks.monthsShort = listMonthsShort;
            hooks.weekdaysMin = listWeekdaysMin;
            hooks.defineLocale = defineLocale;
            hooks.updateLocale = updateLocale;
            hooks.locales = listLocales;
            hooks.weekdaysShort = listWeekdaysShort;
            hooks.normalizeUnits = normalizeUnits;
            hooks.relativeTimeRounding = getSetRelativeTimeRounding;
            hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
            hooks.calendarFormat = getCalendarFormat;
            hooks.prototype = proto;

            // currently HTML5 input type only supports 24-hour formats
            hooks.HTML5_FMT = {
                DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
                DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
                DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
                DATE: 'YYYY-MM-DD', // <input type="date" />
                TIME: 'HH:mm', // <input type="time" />
                TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
                TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
                WEEK: 'GGGG-[W]WW', // <input type="week" />
                MONTH: 'YYYY-MM', // <input type="month" />
            };

            return hooks;

        })));
    });

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function createDateTimeOptions(format) {
        return ((format && {
                year: format.toLowerCase().includes('y'),
                quarter: format.toLowerCase().includes('q'),
                month: format.includes('M'),
                week: format.toLowerCase().includes('w'),
                day: format.toLowerCase().includes('d'),
                dayOfWeek: format.toLowerCase().includes('ddd'),
                hours: format.toLowerCase().includes('h') || format.includes('k'),
                minutes: format.includes('m'),
                seconds: format.includes('s'),
                meridian: format.toLowerCase().includes('a'),
                milliseconds: format.includes('S'),
            }) ||
            {});
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var _a$1;
    function isDateValid(date) {
        return date && date.getTime && !isNaN(date.getTime());
    }
    function resetUnusedDatePart(date, format) {
        return resetUnusedMomentPart(moment(date), format).toDate();
    }
    function resetUnusedMomentPart(date, format) {
        if (!date || !format) {
            return date;
        }
        var dateTimeOptions = createDateTimeOptions(format);
        var dateCopy = date;
        if (!dateTimeOptions.year) {
            dateCopy = resetYear(dateCopy, dateTimeOptions.dayOfWeek);
        }
        if (!dateTimeOptions.month && !dateTimeOptions.week && !dateTimeOptions.quarter && !dateTimeOptions.dayOfWeek) {
            dateCopy = resetMonth(dateCopy);
        }
        if (!dateTimeOptions.day && !dateTimeOptions.week && !dateTimeOptions.dayOfWeek) {
            dateCopy = resetDay(dateCopy);
        }
        if (dateTimeOptions.dayOfWeek && !dateTimeOptions.month) {
            dateCopy = resetDayOfWeek(dateCopy);
        }
        if (dateTimeOptions.quarter && !dateTimeOptions.month && !dateTimeOptions.day) {
            dateCopy = resetQuarter(dateCopy);
        }
        if (dateTimeOptions.week) {
            dateCopy = resetWeek(date);
        }
        if (!dateTimeOptions.hours) {
            dateCopy = resetHours(dateCopy);
        }
        if (!dateTimeOptions.minutes) {
            dateCopy = resetMinutes(dateCopy);
        }
        if (!dateTimeOptions.seconds) {
            dateCopy = resetSeconds(dateCopy);
        }
        if (!dateTimeOptions.milliseconds) {
            dateCopy = resetMilliseconds(dateCopy);
        }
        return dateCopy;
    }
    function resetYear(date, keepDayOfWeek) {
        if (keepDayOfWeek === void 0) { keepDayOfWeek = false; }
        if (keepDayOfWeek) {
            var diffYears = date.year() - 1970;
            var cloned = date.clone().subtract(diffYears * 52, 'week');
            if (cloned.year() === 1971) {
                return cloned.subtract(52, 'week');
            }
            else if (cloned.year() === 1969) {
                return cloned.add(52, 'week');
            }
            return cloned;
        }
        return date.clone().year(1970);
    }
    function resetMonth(date) {
        return date.clone().month(0);
    }
    function resetWeek(date) {
        if (date.week() === 1) {
            return date.clone().day('Thursday');
        }
        return date.clone().day('Monday');
    }
    function resetDayOfWeek(date) {
        return date.clone().week(2);
    }
    function resetQuarter(date) {
        return date.clone().startOf('quarter');
    }
    function resetDay(date) {
        return date.clone().date(1);
    }
    function resetHours(date) {
        return date.clone().hours(0);
    }
    function resetMinutes(date) {
        return date.clone().minutes(0);
    }
    function resetSeconds(date) {
        return date.clone().seconds(0);
    }
    function resetMilliseconds(date) {
        return date.clone().milliseconds(0);
    }
    function getSmallestDateUnit(format) {
        if (/[Sx]/.test(format)) {
            return 'millisecond';
        }
        if (/[sX]/.test(format)) {
            return 'second';
        }
        if (/[m]/.test(format)) {
            return 'minute';
        }
        if (/[H]/.test(format)) {
            return 'hour';
        }
        if (/[dDeE]/.test(format)) {
            return 'day';
        }
        if (/[gGwW]/.test(format)) {
            return 'week';
        }
        if (/[M]/.test(format)) {
            return 'month';
        }
        if (/[QY]/.test(format)) {
            return 'year';
        }
        return undefined;
    }
    var durationUnitToMomentUnitMap = (_a$1 = {},
        _a$1[exports.DurationUnit.Weeks] = 'weeks',
        _a$1[exports.DurationUnit.Days] = 'days',
        _a$1[exports.DurationUnit.Hours] = 'hours',
        _a$1[exports.DurationUnit.Minutes] = 'minutes',
        _a$1[exports.DurationUnit.Seconds] = 'seconds',
        _a$1);
    function addDurationToDate(date, durationCountsMap) {
        var dateMoment = moment(date);
        Object.keys(durationCountsMap).forEach(function (unit) {
            dateMoment.add(durationCountsMap[unit], durationUnitToMomentUnitMap[unit]);
        });
        return dateMoment.toDate();
    }
    var dateFormats = ['DD.MM.YYYY', 'YYYY-MM-DD', 'DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY', 'DD.MM.'];
    function parseMomentDate(value, expectedFormat, utc) {
        if (!value) {
            return null;
        }
        var formats = __spreadArrays([moment.ISO_8601], dateFormats);
        if (expectedFormat) {
            var result = utc ? moment.utc(value, [expectedFormat]) : moment(value, [expectedFormat]);
            if (result.isValid()) {
                return result;
            }
            formats.splice(1, 0, expectedFormat);
        }
        return utc ? moment.utc(value, formats) : moment(value, formats);
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function groupDocumentsByCollection(documents) {
        return (documents || []).reduce(function (map, document) {
            if (!map[document.collectionId]) {
                map[document.collectionId] = [];
            }
            map[document.collectionId].push(document);
            return map;
        }, {});
    }
    function mergeDocuments(documentsA, documentsB) {
        if (documentsA.length === 0 || documentsB.length === 0) {
            return documentsA.length > 0 ? documentsA : documentsB;
        }
        var documentsAIds = new Set(documentsA.map(function (collection) { return collection.id; }));
        var documentsBToAdd = documentsB.filter(function (collection) { return !documentsAIds.has(collection.id); });
        return documentsA.concat(documentsBToAdd);
    }
    function groupLinkInstancesByLinkTypes(linkInstances) {
        return (linkInstances || []).reduce(function (map, document) {
            if (!map[document.linkTypeId]) {
                map[document.linkTypeId] = [];
            }
            map[document.linkTypeId].push(document);
            return map;
        }, {});
    }
    function mergeLinkInstances(linkInstancesA, linkInstancesB) {
        if (linkInstancesA.length === 0 || linkInstancesB.length === 0) {
            return linkInstancesA.length > 0 ? linkInstancesA : linkInstancesB;
        }
        var documentsAIds = new Set(linkInstancesA.map(function (collection) { return collection.id; }));
        var documentsBToAdd = linkInstancesB.filter(function (collection) { return !documentsAIds.has(collection.id); });
        return linkInstancesA.concat(documentsBToAdd);
    }
    function getAttributesResourceType(attributesResource) {
        if (attributesResource && attributesResource.collectionIds) {
            return exports.AttributesResourceType.LinkType;
        }
        return exports.AttributesResourceType.Collection;
    }
    function filterAttributesByFilters(attributes, filters) {
        var attributesMap = objectsByIdMap(attributes);
        return uniqueAttributes((filters || []).reduce(function (attrs, filter) {
            var _a, _b, _c;
            var attribute = attributesMap[filter.attributeId];
            if (attribute) {
                attrs.push(attribute);
            }
            if (((_a = attribute === null || attribute === void 0 ? void 0 : attribute.constraint) === null || _a === void 0 ? void 0 : _a.type) === exports.ConstraintType.Action) {
                var config = attribute.constraint.config;
                var configFilters = ((_c = (_b = config === null || config === void 0 ? void 0 : config.equation) === null || _b === void 0 ? void 0 : _b.equations) === null || _c === void 0 ? void 0 : _c.map(function (eq) { return eq.filter; })) || [];
                attrs.push.apply(attrs, configFilters
                    .filter(function (configFilter) { return !!attributesMap[configFilter.attributeId]; })
                    .map(function (configFilter) { return attributesMap[configFilter.attributeId]; }));
            }
            return attrs;
        }, []));
    }
    function uniqueAttributes(attributes) {
        return objectValues(objectsByIdMap(attributes));
    }

    var numbro_min = createCommonjsModule(function (module, exports) {
        !function(e){module.exports=e();}(function(){return function a(o,u,c){function s(t,e){if(!u[t]){if(!o[t]){var r="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=u[t]={exports:{}};o[t][0].call(i.exports,function(e){return s(o[t][1][e]||e)},i,i.exports,a,o,u,c);}return u[t].exports}for(var l="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,r,t){!function(e){var t,T=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,U=Math.ceil,R=Math.floor,I="[BigNumber Error] ",$=I+"Number primitive has more than 15 significant digits: ",G=1e14,V=14,q=9007199254740991,Z=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],z=1e7,W=1e9;function H(e){var t=0|e;return 0<e||e===t?t:t-1}function Y(e){for(var t,r,n=1,i=e.length,a=e[0]+"";n<i;){for(t=e[n++]+"",r=V-t.length;r--;t="0"+t);a+=t;}for(i=a.length;48===a.charCodeAt(--i););return a.slice(0,i+1||1)}function K(e,t){var r,n,i=e.c,a=t.c,o=e.s,u=t.s,c=e.e,s=t.e;if(!o||!u)return null;if(r=i&&!i[0],n=a&&!a[0],r||n)return r?n?0:-u:o;if(o!=u)return o;if(r=o<0,n=c==s,!i||!a)return n?0:!i^r?1:-1;if(!n)return s<c^r?1:-1;for(u=(c=i.length)<(s=a.length)?c:s,o=0;o<u;o++)if(i[o]!=a[o])return i[o]>a[o]^r?1:-1;return c==s?0:s<c^r?1:-1}function J(e,t,r,n){if(e<t||r<e||e!==R(e))throw Error(I+(n||"Argument")+("number"==typeof e?e<t||r<e?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function X(e){var t=e.c.length-1;return H(e.e/V)==t&&e.c[t]%2!=0}function Q(e,t){return (1<e.length?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function ee(e,t,r){var n,i;if(t<0){for(i=r+".";++t;i+=r);e=i+e;}else if(++t>(n=e.length)){for(i=r,t-=n;--t;i+=r);e+=i;}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}(t=function e(t){var v,f,p,r,s,m,o,u,c,l,g,n=A.prototype={constructor:A,toString:null,valueOf:null},h=new A(1),y=20,b=4,d=-7,w=21,S=-1e7,O=1e7,x=!1,a=1,N=0,B={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},M="0123456789abcdefghijklmnopqrstuvwxyz";function A(e,t){var r,n,i,a,o,u,c,s,l=this;if(!(l instanceof A))return new A(e,t);if(null==t){if(e&&!0===e._isBigNumber)return l.s=e.s,void(!e.c||e.e>O?l.c=l.e=null:e.e<S?l.c=[l.e=0]:(l.e=e.e,l.c=e.c.slice()));if((u="number"==typeof e)&&0*e==0){if(l.s=1/e<0?(e=-e,-1):1,e===~~e){for(a=0,o=e;10<=o;o/=10,a++);return void(O<a?l.c=l.e=null:(l.e=a,l.c=[e]))}s=String(e);}else {if(!T.test(s=String(e)))return p(l,s,u);l.s=45==s.charCodeAt(0)?(s=s.slice(1),-1):1;}-1<(a=s.indexOf("."))&&(s=s.replace(".","")),0<(o=s.search(/e/i))?(a<0&&(a=o),a+=+s.slice(o+1),s=s.substring(0,o)):a<0&&(a=s.length);}else {if(J(t,2,M.length,"Base"),10==t)return j(l=new A(e),y+l.e+1,b);if(s=String(e),u="number"==typeof e){if(0*e!=0)return p(l,s,u,t);if(l.s=1/e<0?(s=s.slice(1),-1):1,A.DEBUG&&15<s.replace(/^0\.0*|\./,"").length)throw Error($+e)}else l.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1;for(r=M.slice(0,t),a=o=0,c=s.length;o<c;o++)if(r.indexOf(n=s.charAt(o))<0){if("."==n){if(a<o){a=c;continue}}else if(!i&&(s==s.toUpperCase()&&(s=s.toLowerCase())||s==s.toLowerCase()&&(s=s.toUpperCase()))){i=!0,o=-1,a=0;continue}return p(l,String(e),u,t)}u=!1,-1<(a=(s=f(s,t,10,l.s)).indexOf("."))?s=s.replace(".",""):a=s.length;}for(o=0;48===s.charCodeAt(o);o++);for(c=s.length;48===s.charCodeAt(--c););if(s=s.slice(o,++c)){if(c-=o,u&&A.DEBUG&&15<c&&(q<e||e!==R(e)))throw Error($+l.s*e);if((a=a-o-1)>O)l.c=l.e=null;else if(a<S)l.c=[l.e=0];else {if(l.e=a,l.c=[],o=(a+1)%V,a<0&&(o+=V),o<c){for(o&&l.c.push(+s.slice(0,o)),c-=V;o<c;)l.c.push(+s.slice(o,o+=V));o=V-(s=s.slice(o)).length;}else o-=c;for(;o--;s+="0");l.c.push(+s);}}else l.c=[l.e=0];}function D(e,t,r,n){for(var i,a,o=[0],u=0,c=e.length;u<c;){for(a=o.length;a--;o[a]*=t);for(o[0]+=n.indexOf(e.charAt(u++)),i=0;i<o.length;i++)o[i]>r-1&&(null==o[i+1]&&(o[i+1]=0),o[i+1]+=o[i]/r|0,o[i]%=r);}return o.reverse()}function F(e,t,r){var n,i,a,o,u=0,c=e.length,s=t%z,l=t/z|0;for(e=e.slice();c--;)u=((i=s*(a=e[c]%z)+(n=l*a+(o=e[c]/z|0)*s)%z*z+u)/r|0)+(n/z|0)+l*o,e[c]=i%r;return u&&(e=[u].concat(e)),e}function k(e,t,r,n){var i,a;if(r!=n)a=n<r?1:-1;else for(i=a=0;i<r;i++)if(e[i]!=t[i]){a=e[i]>t[i]?1:-1;break}return a}function E(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&1<e.length;e.splice(0,1));}function i(e,t,r,n){var i,a,o,u,c;if(null==r?r=b:J(r,0,8),!e.c)return e.toString();if(i=e.c[0],o=e.e,null==t)c=Y(e.c),c=1==n||2==n&&(o<=d||w<=o)?Q(c,o):ee(c,o,"0");else if(a=(e=j(new A(e),t,r)).e,u=(c=Y(e.c)).length,1==n||2==n&&(t<=a||a<=d)){for(;u<t;c+="0",u++);c=Q(c,a);}else if(t-=o,c=ee(c,a,"0"),u<a+1){if(0<--t)for(c+=".";t--;c+="0");}else if(0<(t+=a-u))for(a+1==u&&(c+=".");t--;c+="0");return e.s<0&&i?"-"+c:c}function _(e,t){for(var r,n=1,i=new A(e[0]);n<e.length;n++){if(!(r=new A(e[n])).s){i=r;break}t.call(i,r)&&(i=r);}return i}function L(e,t,r){for(var n=1,i=t.length;!t[--i];t.pop());for(i=t[0];10<=i;i/=10,n++);return (r=n+r*V-1)>O?e.c=e.e=null:r<S?e.c=[e.e=0]:(e.e=r,e.c=t),e}function j(e,t,r,n){var i,a,o,u,c,s,l,f=e.c,p=Z;if(f){e:{for(i=1,u=f[0];10<=u;u/=10,i++);if((a=t-i)<0)a+=V,o=t,l=(c=f[s=0])/p[i-o-1]%10|0;else if((s=U((a+1)/V))>=f.length){if(!n)break e;for(;f.length<=s;f.push(0));c=l=0,o=(a%=V)-V+(i=1);}else {for(c=u=f[s],i=1;10<=u;u/=10,i++);l=(o=(a%=V)-V+i)<0?0:c/p[i-o-1]%10|0;}if(n=n||t<0||null!=f[s+1]||(o<0?c:c%p[i-o-1]),n=r<4?(l||n)&&(0==r||r==(e.s<0?3:2)):5<l||5==l&&(4==r||n||6==r&&(0<a?0<o?c/p[i-o]:0:f[s-1])%10&1||r==(e.s<0?8:7)),t<1||!f[0])return f.length=0,n?(t-=e.e+1,f[0]=p[(V-t%V)%V],e.e=-t||0):f[0]=e.e=0,e;if(0==a?(f.length=s,u=1,s--):(f.length=s+1,u=p[V-a],f[s]=0<o?R(c/p[i-o]%p[o])*u:0),n)for(;;){if(0==s){for(a=1,o=f[0];10<=o;o/=10,a++);for(o=f[0]+=u,u=1;10<=o;o/=10,u++);a!=u&&(e.e++,f[0]==G&&(f[0]=1));break}if(f[s]+=u,f[s]!=G)break;f[s--]=0,u=1;}for(a=f.length;0===f[--a];f.pop());}e.e>O?e.c=e.e=null:e.e<S&&(e.c=[e.e=0]);}return e}function P(e){var t,r=e.e;return null===r?e.toString():(t=Y(e.c),t=r<=d||w<=r?Q(t,r):ee(t,r,"0"),e.s<0?"-"+t:t)}return A.clone=e,A.ROUND_UP=0,A.ROUND_DOWN=1,A.ROUND_CEIL=2,A.ROUND_FLOOR=3,A.ROUND_HALF_UP=4,A.ROUND_HALF_DOWN=5,A.ROUND_HALF_EVEN=6,A.ROUND_HALF_CEIL=7,A.ROUND_HALF_FLOOR=8,A.EUCLID=9,A.config=A.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(I+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(J(r=e[t],0,W,t),y=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(J(r=e[t],0,8,t),b=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(J(r[0],-W,0,t),J(r[1],0,W,t),d=r[0],w=r[1]):(J(r,-W,W,t),d=-(w=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)J(r[0],-W,-1,t),J(r[1],1,W,t),S=r[0],O=r[1];else {if(J(r,-W,W,t),!r)throw Error(I+t+" cannot be zero: "+r);S=-(O=r<0?-r:r);}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(I+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw x=!r,Error(I+"crypto unavailable");x=r;}else x=r;}if(e.hasOwnProperty(t="MODULO_MODE")&&(J(r=e[t],0,9,t),a=r),e.hasOwnProperty(t="POW_PRECISION")&&(J(r=e[t],0,W,t),N=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(I+t+" not an object: "+r);B=r;}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(I+t+" invalid: "+r);M=r;}}return {DECIMAL_PLACES:y,ROUNDING_MODE:b,EXPONENTIAL_AT:[d,w],RANGE:[S,O],CRYPTO:x,MODULO_MODE:a,POW_PRECISION:N,FORMAT:B,ALPHABET:M}},A.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return !1;if(!A.DEBUG)return !0;var t,r,n=e.c,i=e.e,a=e.s;e:if("[object Array]"=={}.toString.call(n)){if((1===a||-1===a)&&-W<=i&&i<=W&&i===R(i)){if(0===n[0]){if(0===i&&1===n.length)return !0;break e}if((t=(i+1)%V)<1&&(t+=V),String(n[0]).length==t){for(t=0;t<n.length;t++)if((r=n[t])<0||G<=r||r!==R(r))break e;if(0!==r)return !0}}}else if(null===n&&null===i&&(null===a||1===a||-1===a))return !0;throw Error(I+"Invalid BigNumber: "+e)},A.maximum=A.max=function(){return _(arguments,n.lt)},A.minimum=A.min=function(){return _(arguments,n.gt)},A.random=(r=9007199254740992,s=Math.random()*r&2097151?function(){return R(Math.random()*r)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,i,a,o=0,u=[],c=new A(h);if(null==e?e=y:J(e,0,W),i=U(e/V),x)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(i*=2));o<i;)9e15<=(a=131072*t[o]+(t[o+1]>>>11))?(r=crypto.getRandomValues(new Uint32Array(2)),t[o]=r[0],t[o+1]=r[1]):(u.push(a%1e14),o+=2);o=i/2;}else {if(!crypto.randomBytes)throw x=!1,Error(I+"crypto unavailable");for(t=crypto.randomBytes(i*=7);o<i;)9e15<=(a=281474976710656*(31&t[o])+1099511627776*t[o+1]+4294967296*t[o+2]+16777216*t[o+3]+(t[o+4]<<16)+(t[o+5]<<8)+t[o+6])?crypto.randomBytes(7).copy(t,o):(u.push(a%1e14),o+=7);o=i/7;}if(!x)for(;o<i;)(a=s())<9e15&&(u[o++]=a%1e14);for(i=u[--o],e%=V,i&&e&&(a=Z[V-e],u[o]=R(i/a)*a);0===u[o];u.pop(),o--);if(o<0)u=[n=0];else {for(n=-1;0===u[0];u.splice(0,1),n-=V);for(o=1,a=u[0];10<=a;a/=10,o++);o<V&&(n-=V-o);}return c.e=n,c.c=u,c}),A.sum=function(){for(var e=1,t=arguments,r=new A(t[0]);e<t.length;)r=r.plus(t[e++]);return r},m="0123456789",f=function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g=e.indexOf("."),d=y,h=b;for(0<=g&&(c=N,N=0,e=e.replace(".",""),l=(p=new A(t)).pow(e.length-g),N=c,p.c=D(ee(Y(l.c),l.e,"0"),10,r,m),p.e=p.c.length),u=c=(f=D(e,t,r,i?(a=M,m):(a=m,M))).length;0==f[--c];f.pop());if(!f[0])return a.charAt(0);if(g<0?--u:(l.c=f,l.e=u,l.s=n,f=(l=v(l,p,d,h,r)).c,s=l.r,u=l.e),g=f[o=u+d+1],c=r/2,s=s||o<0||null!=f[o+1],s=h<4?(null!=g||s)&&(0==h||h==(l.s<0?3:2)):c<g||g==c&&(4==h||s||6==h&&1&f[o-1]||h==(l.s<0?8:7)),o<1||!f[0])e=s?ee(a.charAt(1),-d,a.charAt(0)):a.charAt(0);else {if(f.length=o,s)for(--r;++f[--o]>r;)f[o]=0,o||(++u,f=[1].concat(f));for(c=f.length;!f[--c];);for(g=0,e="";g<=c;e+=a.charAt(f[g++]));e=ee(e,u,a.charAt(0));}return e},v=function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g,d,h,v,m,y,b,w,S,O=e.s==t.s?1:-1,x=e.c,N=t.c;if(!(x&&x[0]&&N&&N[0]))return new A(e.s&&t.s&&(x?!N||x[0]!=N[0]:N)?x&&0==x[0]||!N?0*O:O/0:NaN);for(g=(p=new A(O)).c=[],O=r+(o=e.e-t.e)+1,i||(i=G,o=H(e.e/V)-H(t.e/V),O=O/V|0),u=0;N[u]==(x[u]||0);u++);if(N[u]>(x[u]||0)&&o--,O<0)g.push(1),c=!0;else {for(y=x.length,w=N.length,O+=2,1<(s=R(i/(N[u=0]+1)))&&(N=F(N,s,i),x=F(x,s,i),w=N.length,y=x.length),m=w,h=(d=x.slice(0,w)).length;h<w;d[h++]=0);S=N.slice(),S=[0].concat(S),b=N[0],N[1]>=i/2&&b++;do{if(s=0,(a=k(N,d,w,h))<0){if(v=d[0],w!=h&&(v=v*i+(d[1]||0)),1<(s=R(v/b)))for(i<=s&&(s=i-1),f=(l=F(N,s,i)).length,h=d.length;1==k(l,d,f,h);)s--,E(l,w<f?S:N,f,i),f=l.length,a=1;else 0==s&&(a=s=1),f=(l=N.slice()).length;if(f<h&&(l=[0].concat(l)),E(d,l,h,i),h=d.length,-1==a)for(;k(N,d,w,h)<1;)s++,E(d,w<h?S:N,h,i),h=d.length;}else 0===a&&(s++,d=[0]);g[u++]=s,d[0]?d[h++]=x[m]||0:(d=[x[m]],h=1);}while((m++<y||null!=d[0])&&O--);c=null!=d[0],g[0]||g.splice(0,1);}if(i==G){for(u=1,O=g[0];10<=O;O/=10,u++);j(p,r+(p.e=u+o*V-1)+1,n,c);}else p.e=o,p.r=+c;return p},o=/^(-?)0([xbo])(?=\w[\w.]*$)/i,u=/^([^.]+)\.$/,c=/^\.([^.]+)$/,l=/^-?(Infinity|NaN)$/,g=/^\s*\+(?=[\w.])|^\s+|\s+$/g,p=function(e,t,r,n){var i,a=r?t:t.replace(g,"");if(l.test(a))e.s=isNaN(a)?null:a<0?-1:1;else {if(!r&&(a=a.replace(o,function(e,t,r){return i="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=i?e:t}),n&&(i=n,a=a.replace(u,"$1").replace(c,"0.$1")),t!=a))return new A(a,i);if(A.DEBUG)throw Error(I+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null;}e.c=e.e=null;},n.absoluteValue=n.abs=function(){var e=new A(this);return e.s<0&&(e.s=1),e},n.comparedTo=function(e,t){return K(this,new A(e,t))},n.decimalPlaces=n.dp=function(e,t){var r,n,i;if(null!=e)return J(e,0,W),null==t?t=b:J(t,0,8),j(new A(this),e+this.e+1,t);if(!(r=this.c))return null;if(n=((i=r.length-1)-H(this.e/V))*V,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},n.dividedBy=n.div=function(e,t){return v(this,new A(e,t),y,b)},n.dividedToIntegerBy=n.idiv=function(e,t){return v(this,new A(e,t),0,1)},n.exponentiatedBy=n.pow=function(e,t){var r,n,i,a,o,u,c,s,l=this;if((e=new A(e)).c&&!e.isInteger())throw Error(I+"Exponent not an integer: "+P(e));if(null!=t&&(t=new A(t)),o=14<e.e,!l.c||!l.c[0]||1==l.c[0]&&!l.e&&1==l.c.length||!e.c||!e.c[0])return s=new A(Math.pow(+P(l),o?2-X(e):+P(e))),t?s.mod(t):s;if(u=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new A(NaN);(n=!u&&l.isInteger()&&t.isInteger())&&(l=l.mod(t));}else {if(9<e.e&&(0<l.e||l.e<-1||(0==l.e?1<l.c[0]||o&&24e7<=l.c[1]:l.c[0]<8e13||o&&l.c[0]<=9999975e7)))return a=l.s<0&&X(e)?-0:0,-1<l.e&&(a=1/a),new A(u?1/a:a);N&&(a=U(N/V+2));}for(c=o?(r=new A(.5),u&&(e.s=1),X(e)):(i=Math.abs(+P(e)))%2,s=new A(h);;){if(c){if(!(s=s.times(l)).c)break;a?s.c.length>a&&(s.c.length=a):n&&(s=s.mod(t));}if(i){if(0===(i=R(i/2)))break;c=i%2;}else if(j(e=e.times(r),e.e+1,1),14<e.e)c=X(e);else {if(0==(i=+P(e)))break;c=i%2;}l=l.times(l),a?l.c&&l.c.length>a&&(l.c.length=a):n&&(l=l.mod(t));}return n?s:(u&&(s=h.div(s)),t?s.mod(t):a?j(s,N,b,void 0):s)},n.integerValue=function(e){var t=new A(this);return null==e?e=b:J(e,0,8),j(t,t.e+1,e)},n.isEqualTo=n.eq=function(e,t){return 0===K(this,new A(e,t))},n.isFinite=function(){return !!this.c},n.isGreaterThan=n.gt=function(e,t){return 0<K(this,new A(e,t))},n.isGreaterThanOrEqualTo=n.gte=function(e,t){return 1===(t=K(this,new A(e,t)))||0===t},n.isInteger=function(){return !!this.c&&H(this.e/V)>this.c.length-2},n.isLessThan=n.lt=function(e,t){return K(this,new A(e,t))<0},n.isLessThanOrEqualTo=n.lte=function(e,t){return -1===(t=K(this,new A(e,t)))||0===t},n.isNaN=function(){return !this.s},n.isNegative=function(){return this.s<0},n.isPositive=function(){return 0<this.s},n.isZero=function(){return !!this.c&&0==this.c[0]},n.minus=function(e,t){var r,n,i,a,o=this,u=o.s;if(t=(e=new A(e,t)).s,!u||!t)return new A(NaN);if(u!=t)return e.s=-t,o.plus(e);var c=o.e/V,s=e.e/V,l=o.c,f=e.c;if(!c||!s){if(!l||!f)return l?(e.s=-t,e):new A(f?o:NaN);if(!l[0]||!f[0])return f[0]?(e.s=-t,e):new A(l[0]?o:3==b?-0:0)}if(c=H(c),s=H(s),l=l.slice(),u=c-s){for((i=(a=u<0)?(u=-u,l):(s=c,f)).reverse(),t=u;t--;i.push(0));i.reverse();}else for(n=(a=(u=l.length)<(t=f.length))?u:t,u=t=0;t<n;t++)if(l[t]!=f[t]){a=l[t]<f[t];break}if(a&&(i=l,l=f,f=i,e.s=-e.s),0<(t=(n=f.length)-(r=l.length)))for(;t--;l[r++]=0);for(t=G-1;u<n;){if(l[--n]<f[n]){for(r=n;r&&!l[--r];l[r]=t);--l[r],l[n]+=G;}l[n]-=f[n];}for(;0==l[0];l.splice(0,1),--s);return l[0]?L(e,l,s):(e.s=3==b?-1:1,e.c=[e.e=0],e)},n.modulo=n.mod=function(e,t){var r,n,i=this;return e=new A(e,t),!i.c||!e.s||e.c&&!e.c[0]?new A(NaN):!e.c||i.c&&!i.c[0]?new A(i):(9==a?(n=e.s,e.s=1,r=v(i,e,0,3),e.s=n,r.s*=n):r=v(i,e,0,a),(e=i.minus(r.times(e))).c[0]||1!=a||(e.s=i.s),e)},n.multipliedBy=n.times=function(e,t){var r,n,i,a,o,u,c,s,l,f,p,g,d,h,v,m=this,y=m.c,b=(e=new A(e,t)).c;if(!(y&&b&&y[0]&&b[0]))return !m.s||!e.s||y&&!y[0]&&!b||b&&!b[0]&&!y?e.c=e.e=e.s=null:(e.s*=m.s,y&&b?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=H(m.e/V)+H(e.e/V),e.s*=m.s,(c=y.length)<(f=b.length)&&(d=y,y=b,b=d,i=c,c=f,f=i),i=c+f,d=[];i--;d.push(0));for(h=G,v=z,i=f;0<=--i;){for(r=0,p=b[i]%v,g=b[i]/v|0,a=i+(o=c);i<a;)r=((s=p*(s=y[--o]%v)+(u=g*s+(l=y[o]/v|0)*p)%v*v+d[a]+r)/h|0)+(u/v|0)+g*l,d[a--]=s%h;d[a]=r;}return r?++n:d.splice(0,1),L(e,d,n)},n.negated=function(){var e=new A(this);return e.s=-e.s||null,e},n.plus=function(e,t){var r,n=this,i=n.s;if(t=(e=new A(e,t)).s,!i||!t)return new A(NaN);if(i!=t)return e.s=-t,n.minus(e);var a=n.e/V,o=e.e/V,u=n.c,c=e.c;if(!a||!o){if(!u||!c)return new A(i/0);if(!u[0]||!c[0])return c[0]?e:new A(u[0]?n:0*i)}if(a=H(a),o=H(o),u=u.slice(),i=a-o){for((r=0<i?(o=a,c):(i=-i,u)).reverse();i--;r.push(0));r.reverse();}for((i=u.length)-(t=c.length)<0&&(r=c,c=u,u=r,t=i),i=0;t;)i=(u[--t]=u[t]+c[t]+i)/G|0,u[t]=G===u[t]?0:u[t]%G;return i&&(u=[i].concat(u),++o),L(e,u,o)},n.precision=n.sd=function(e,t){var r,n,i;if(null!=e&&e!==!!e)return J(e,1,W),null==t?t=b:J(t,0,8),j(new A(this),e,t);if(!(r=this.c))return null;if(n=(i=r.length-1)*V+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];10<=i;i/=10,n++);}return e&&this.e+1>n&&(n=this.e+1),n},n.shiftedBy=function(e){return J(e,-q,q),this.times("1e"+e)},n.squareRoot=n.sqrt=function(){var e,t,r,n,i,a=this,o=a.c,u=a.s,c=a.e,s=y+4,l=new A("0.5");if(1!==u||!o||!o[0])return new A(!u||u<0&&(!o||o[0])?NaN:o?a:1/0);if((r=0==(u=Math.sqrt(+P(a)))||u==1/0?(((t=Y(o)).length+c)%2==0&&(t+="0"),u=Math.sqrt(+t),c=H((c+1)/2)-(c<0||c%2),new A(t=u==1/0?"1e"+c:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+c)):new A(u+"")).c[0])for((u=(c=r.e)+s)<3&&(u=0);;)if(i=r,r=l.times(i.plus(v(a,i,s,1))),Y(i.c).slice(0,u)===(t=Y(r.c)).slice(0,u)){if(r.e<c&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(j(r,r.e+y+2,1),e=!r.times(r).eq(a));break}if(!n&&(j(i,i.e+y+2,0),i.times(i).eq(a))){r=i;break}s+=4,u+=4,n=1;}return j(r,r.e+y+1,b,e)},n.toExponential=function(e,t){return null!=e&&(J(e,0,W),e++),i(this,e,t,1)},n.toFixed=function(e,t){return null!=e&&(J(e,0,W),e=e+this.e+1),i(this,e,t)},n.toFormat=function(e,t,r){var n;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=B;else if("object"!=typeof r)throw Error(I+"Argument not an object: "+r);if(n=this.toFixed(e,t),this.c){var i,a=n.split("."),o=+r.groupSize,u=+r.secondaryGroupSize,c=r.groupSeparator||"",s=a[0],l=a[1],f=this.s<0,p=f?s.slice(1):s,g=p.length;if(u&&(i=o,o=u,g-=u=i),0<o&&0<g){for(i=g%o||o,s=p.substr(0,i);i<g;i+=o)s+=c+p.substr(i,o);0<u&&(s+=c+p.slice(i)),f&&(s="-"+s);}n=l?s+(r.decimalSeparator||"")+((u=+r.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):l):s;}return (r.prefix||"")+n+(r.suffix||"")},n.toFraction=function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g=this,d=g.c;if(null!=e&&(!(u=new A(e)).isInteger()&&(u.c||1!==u.s)||u.lt(h)))throw Error(I+"Argument "+(u.isInteger()?"out of range: ":"not an integer: ")+P(u));if(!d)return new A(g);for(t=new A(h),s=r=new A(h),n=c=new A(h),p=Y(d),a=t.e=p.length-g.e-1,t.c[0]=Z[(o=a%V)<0?V+o:o],e=!e||0<u.comparedTo(t)?0<a?t:s:u,o=O,O=1/0,u=new A(p),c.c[0]=0;l=v(u,t,0,1),1!=(i=r.plus(l.times(n))).comparedTo(e);)r=n,n=i,s=c.plus(l.times(i=s)),c=i,t=u.minus(l.times(i=t)),u=i;return i=v(e.minus(r),n,0,1),c=c.plus(i.times(s)),r=r.plus(i.times(n)),c.s=s.s=g.s,f=v(s,n,a*=2,b).minus(g).abs().comparedTo(v(c,r,a,b).minus(g).abs())<1?[s,n]:[c,r],O=o,f},n.toNumber=function(){return +P(this)},n.toPrecision=function(e,t){return null!=e&&J(e,1,W),i(this,e,t,2)},n.toString=function(e){var t,r=this,n=r.s,i=r.e;return null===i?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(t=null==e?i<=d||w<=i?Q(Y(r.c),i):ee(Y(r.c),i,"0"):10===e?ee(Y((r=j(new A(r),y+i+1,b)).c),r.e,"0"):(J(e,2,M.length,"Base"),f(ee(Y(r.c),i,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},n.valueOf=n.toJSON=function(){return P(this)},n._isBigNumber=!0,C&&(n[Symbol.toStringTag]="BigNumber",n[Symbol.for("nodejs.util.inspect.custom")]=n.valueOf),null!=t&&A.set(t),A}()).default=t.BigNumber=t,void 0!==r&&r.exports?r.exports=t:(e=e||("undefined"!=typeof self&&self?self:window)).BigNumber=t;}(this);},{}],2:[function(e,t,r){t.exports={languageTag:"en-US",delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},spaceSeparated:!1,ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1==t?"st":2==t?"nd":3==t?"rd":"th"},bytes:{binarySuffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],decimalSuffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]},currency:{symbol:"$",position:"prefix",code:"USD"},currencyFormat:{thousandSeparated:!0,totalLength:4,spaceSeparated:!0,spaceSeparatedCurrency:!0},formats:{fourDigits:{totalLength:4,spaceSeparated:!0},fullWithTwoDecimals:{output:"currency",thousandSeparated:!0,mantissa:2},fullWithTwoDecimalsNoCurrency:{thousandSeparated:!0,mantissa:2},fullWithNoDecimals:{output:"currency",thousandSeparated:!0,mantissa:0}}};},{}],3:[function(e,t,r){function I(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=e[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e;}finally{try{n||null==u.return||u.return();}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var $=e("./globalState"),o=e("./validating"),u=e("./parsing"),G={trillion:Math.pow(10,12),billion:Math.pow(10,9),million:Math.pow(10,6),thousand:Math.pow(10,3)},V={totalLength:0,characteristic:0,forceAverage:!1,average:!1,mantissa:-1,optionalMantissa:!0,thousandSeparated:!1,spaceSeparated:!1,negative:"sign",forceSign:!1,roundingFunction:Math.round,spaceSeparatedAbbreviation:!1},n=$.currentBytes(),d=n.binarySuffixes,h=n.decimalSuffixes,i={general:{scale:1024,suffixes:h,marker:"bd"},binary:{scale:1024,suffixes:d,marker:"b"},decimal:{scale:1e3,suffixes:h,marker:"d"}};function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=2<arguments.length?arguments[2]:void 0;if("string"==typeof t&&(t=u.parseFormat(t)),!o.validateFormat(t))return "ERROR: invalid format";var n=t.prefix||"",i=t.postfix||"",a=function(e,t,r){switch(t.output){case"currency":return t=c(t,$.currentCurrencyDefaultFormat()),function(e,t,r){var n=r.currentCurrency(),i=Object.assign({},V,t),a=void 0,o="",u=!!i.totalLength||!!i.forceAverage||i.average,c=t.currencyPosition||n.position,s=t.currencySymbol||n.symbol,l=void 0!==i.spaceSeparatedCurrency?i.spaceSeparatedCurrency:i.spaceSeparated;void 0===t.lowPrecision&&(t.lowPrecision=!1);l&&(o=" ");"infix"===c&&(a=o+s+o);var f=m({instance:e,providedFormat:t,state:r,decimalSeparator:a});"prefix"===c&&(f=e._value<0&&"sign"===i.negative?"-".concat(o).concat(s).concat(f.slice(1)):0<e._value&&i.forceSign?"+".concat(o).concat(s).concat(f.slice(1)):s+o+f);c&&"postfix"!==c||(o=!i.spaceSeparatedAbbreviation&&u?"":o,f=f+o+s);return f}(e,t,$);case"percent":return t=c(t,$.currentPercentageDefaultFormat()),function(e,t,r,n){var i=t.prefixSymbol,a=m({instance:n(100*e._value),providedFormat:t,state:r}),o=Object.assign({},V,t);if(i)return "%".concat(o.spaceSeparated?" ":"").concat(a);return "".concat(a).concat(o.spaceSeparated?" ":"","%")}(e,t,$,r);case"byte":return t=c(t,$.currentByteDefaultFormat()),function(e,t,r,n){var i=t.base||"binary",a=Object.assign({},V,t),o=r.currentBytes(),u=o.binarySuffixes,c=o.decimalSuffixes,s={general:{scale:1024,suffixes:c||h,marker:"bd"},binary:{scale:1024,suffixes:u||d,marker:"b"},decimal:{scale:1e3,suffixes:c||h,marker:"d"}}[i],l=v(e._value,s.suffixes,s.scale),f=l.value,p=l.suffix,g=m({instance:n(f),providedFormat:t,state:r,defaults:r.currentByteDefaultFormat()});return "".concat(g).concat(a.spaceSeparated?" ":"").concat(p)}(e,t,$,r);case"time":return t=c(t,$.currentTimeDefaultFormat()),function(e){var t=Math.floor(e._value/60/60),r=Math.floor((e._value-60*t*60)/60),n=Math.round(e._value-60*t*60-60*r);return "".concat(t,":").concat(r<10?"0":"").concat(r,":").concat(n<10?"0":"").concat(n)}(e);case"ordinal":return t=c(t,$.currentOrdinalDefaultFormat()),function(e,t,r){var n=r.currentOrdinal(),i=Object.assign({},V,t),a=m({instance:e,providedFormat:t,state:r}),o=n(e._value);return "".concat(a).concat(i.spaceSeparated?" ":"").concat(o)}(e,t,$);case"number":default:return m({instance:e,providedFormat:t,numbro:r})}}(e,t,r);return a=(a=n+a)+i}function v(e,t,r){var n=t[0],i=Math.abs(e);if(r<=i){for(var a=1;a<t.length;++a){var o=Math.pow(r,a),u=Math.pow(r,a+1);if(o<=i&&i<u){n=t[a],e/=o;break}}n===t[0]&&(e/=Math.pow(r,t.length-1),n=t[t.length-1]);}return {value:e,suffix:n}}function p(e){for(var t="",r=0;r<e;r++)t+="0";return t}function q(e,t,r){var n=2<arguments.length&&void 0!==r?r:Math.round;return -1!==e.toString().indexOf("e")?function(e,t){var r=e.toString(),n=I(r.split("e"),2),i=n[0],a=n[1],o=I(i.split("."),2),u=o[0],c=o[1],s=void 0===c?"":c;if(0<+a)r=u+s+p(a-s.length);else {var l=".";l=+u<0?"-0".concat(l):"0".concat(l);var f=(p(-a-1)+Math.abs(u)+s).substr(0,t);f.length<t&&(f+=p(t-f.length)),r=l+f;}return 0<+a&&0<t&&(r+=".".concat(p(t))),r}(e,t):(n(+"".concat(e,"e+").concat(t))/Math.pow(10,t)).toFixed(t)}function Z(e,t,r,n,i){var a=n.currentDelimiters(),o=a.thousands;i=i||a.decimal;var u=a.thousandsSize||3,c=e.toString(),s=c.split(".")[0],l=c.split(".")[1],f=t<0&&0===s.indexOf("-");r&&(f&&(s=s.slice(1)),function(e,t){for(var r=[],n=0,i=e;0<i;i--)n===t&&(r.unshift(i),n=0),n++;return r}(s.length,u).forEach(function(e,t){s=s.slice(0,e+t)+o+s.slice(e+t);}),f&&(s="-".concat(s)));return c=l?s+i+l:s}function m(e){var t=e.instance,r=e.providedFormat,n=e.state,i=void 0===n?$:n,a=e.decimalSeparator,o=e.defaults,u=void 0===o?i.currentDefaults():o,c=t._value;if(0===c&&i.hasZeroFormat())return i.getZeroFormat();if(!isFinite(c))return c.toString();var s,l,f,p,g,d,h,v,m=Object.assign({},V,u,r),y=m.totalLength,b=y?0:m.characteristic,w=m.optionalCharacteristic,S=m.forceAverage,O=m.lowPrecision,x=!!y||!!S||m.average,N=y?-1:x&&void 0===r.mantissa?0:m.mantissa,B=!y&&(void 0===r.optionalMantissa?-1===N:m.optionalMantissa),M=m.trimMantissa,A=m.thousandSeparated,D=m.spaceSeparated,F=m.negative,k=m.forceSign,E=m.exponential,_=m.roundingFunction,L="";if(x){var j=function(e){var t=e.value,r=e.forceAverage,n=e.lowPrecision,i=void 0===n||n,a=e.abbreviations,o=e.spaceSeparated,u=void 0!==o&&o,c=e.totalLength,s=void 0===c?0:c,l=e.roundingFunction,f=void 0===l?Math.round:l,p="",g=Math.abs(t),d=-1;if(r&&a[r]&&G[r]?(p=a[r],t/=G[r]):g>=G.trillion||i&&1===f(g/G.trillion)?(p=a.trillion,t/=G.trillion):g<G.trillion&&g>=G.billion||i&&1===f(g/G.billion)?(p=a.billion,t/=G.billion):g<G.billion&&g>=G.million||i&&1===f(g/G.million)?(p=a.million,t/=G.million):(g<G.million&&g>=G.thousand||i&&1===f(g/G.thousand))&&(p=a.thousand,t/=G.thousand),p=p&&(u?" ":"")+p,s){var h=t<0,v=t.toString().split(".")[0],m=h?v.length-1:v.length;d=Math.max(s-m,0);}return {value:t,abbreviation:p,mantissaPrecision:d}}({value:c,forceAverage:S,lowPrecision:O,abbreviations:i.currentAbbreviations(),spaceSeparated:D,roundingFunction:_,totalLength:y});c=j.value,L+=j.abbreviation,y&&(N=j.mantissaPrecision);}if(E){var P=(l=(s={value:c,characteristicPrecision:b}).value,f=s.characteristicPrecision,p=void 0===f?0:f,g=I(l.toExponential().split("e"),2),d=g[0],h=g[1],v=+d,p&&1<p&&(v*=Math.pow(10,p-1),h=0<=(h-=p-1)?"+".concat(h):h),{value:v,abbreviation:"e".concat(h)});c=P.value,L=P.abbreviation+L;}var T,C,U,R=function(e,t,r,n,i,a){if(-1===n)return e;var o=q(t,n,a),u=I(o.toString().split("."),2),c=u[0],s=u[1],l=void 0===s?"":s;if(l.match(/^0+$/)&&(r||i))return c;var f=l.match(/0+$/);return i&&f?"".concat(c,".").concat(l.toString().slice(0,f.index)):o.toString()}(c.toString(),c,B,N,M,_);return R=Z(R=function(e,t,r,n){var i=e,a=I(i.toString().split("."),2),o=a[0],u=a[1];if(o.match(/^-?0$/)&&r)return u?"".concat(o.replace("0",""),".").concat(u):o.replace("0","");var c=t<0&&0===o.indexOf("-");if(c&&(o=o.slice(1),i=i.slice(1)),o.length<n)for(var s=n-o.length,l=0;l<s;l++)i="0".concat(i);return c&&(i="-".concat(i)),i.toString()}(R,c,w,b),c,A,i,a),(x||E)&&(R=R+L),(k||c<0)&&(T=R,U=F,R=0===(C=c)?T:0==+T?T.replace("-",""):0<C?"+".concat(T):"sign"===U?T:"(".concat(T.replace("-",""),")")),R}function c(e,t){if(!e)return t;var r=Object.keys(e);return 1===r.length&&"output"===r[0]?t:e}t.exports=function(n){return {format:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return a.apply(void 0,t.concat([n]))},getByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=i.general;return v(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getBinaryByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=i.binary;return v(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getDecimalByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=i.decimal;return v(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},formatOrDefault:c}};},{"./globalState":4,"./parsing":8,"./validating":10}],4:[function(e,t,r){var i=e("./en-US"),n=e("./validating"),a=e("./parsing"),o={},u=void 0,c={},s=null,l={};function f(e){u=e;}function p(){return c[u]}o.languages=function(){return Object.assign({},c)},o.currentLanguage=function(){return u},o.currentBytes=function(){return p().bytes||{}},o.currentCurrency=function(){return p().currency},o.currentAbbreviations=function(){return p().abbreviations},o.currentDelimiters=function(){return p().delimiters},o.currentOrdinal=function(){return p().ordinal},o.currentDefaults=function(){return Object.assign({},p().defaults,l)},o.currentOrdinalDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().ordinalFormat)},o.currentByteDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().byteFormat)},o.currentPercentageDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().percentageFormat)},o.currentCurrencyDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().currencyFormat)},o.currentTimeDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().timeFormat)},o.setDefaults=function(e){e=a.parseFormat(e),n.validateFormat(e)&&(l=e);},o.getZeroFormat=function(){return s},o.setZeroFormat=function(e){return s="string"==typeof e?e:null},o.hasZeroFormat=function(){return null!==s},o.languageData=function(e){if(e){if(c[e])return c[e];throw new Error('Unknown tag "'.concat(e,'"'))}return p()},o.registerLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(!n.validateLanguage(e))throw new Error("Invalid language data");c[e.languageTag]=e,t&&f(e.languageTag);},o.setLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:i.languageTag;if(!c[e]){var r=e.split("-")[0],n=Object.keys(c).find(function(e){return e.split("-")[0]===r});return c[n]?void f(n):void f(t)}f(e);},o.registerLanguage(i),u=i.languageTag,t.exports=o;},{"./en-US":2,"./parsing":8,"./validating":10}],5:[function(n,e,t){e.exports=function(t){return {loadLanguagesInNode:function(e){return r=t,void e.forEach(function(t){var e=void 0;try{e=n("../languages/".concat(t));}catch(e){console.error('Unable to load "'.concat(t,'". No matching language file found.'));}e&&r.registerLanguage(e);});var r;}}};},{}],6:[function(e,t,r){var c=e("bignumber.js");function a(e,t,r){var n=new c(e._value),i=t;return r.isNumbro(t)&&(i=t._value),i=new c(i),e._value=n.minus(i).toNumber(),e}t.exports=function(u){return {add:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.plus(o).toNumber(),r;var r,n,i,a,o;},subtract:function(e,t){return a(e,t,u)},multiply:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.times(o).toNumber(),r;var r,n,i,a,o;},divide:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.dividedBy(o).toNumber(),r;var r,n,i,a,o;},set:function(e,t){return r=e,i=n=t,u.isNumbro(n)&&(i=n._value),r._value=i,r;var r,n,i;},difference:function(e,t){return r=t,a(i=(n=u)(e._value),r,n),Math.abs(i._value);var r,n,i;},BigNumber:c}};},{"bignumber.js":1}],7:[function(e,t,r){function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var a=e("./globalState"),n=e("./validating"),o=e("./loading")(g),u=e("./unformatting"),c=e("./formatting")(g),s=e("./manipulating")(g),l=e("./parsing"),f=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._value=e;}var e,r;return e=t,(r=[{key:"clone",value:function(){return g(this._value)}},{key:"format",value:function(e){var t=0<arguments.length&&void 0!==e?e:{};return c.format(this,t)}},{key:"formatCurrency",value:function(e){return "string"==typeof e&&(e=l.parseFormat(e)),(e=c.formatOrDefault(e,a.currentCurrencyDefaultFormat())).output="currency",c.format(this,e)}},{key:"formatTime",value:function(e){var t=0<arguments.length&&void 0!==e?e:{};return t.output="time",c.format(this,t)}},{key:"binaryByteUnits",value:function(){return c.getBinaryByteUnit(this)}},{key:"decimalByteUnits",value:function(){return c.getDecimalByteUnit(this)}},{key:"byteUnits",value:function(){return c.getByteUnit(this)}},{key:"difference",value:function(e){return s.difference(this,e)}},{key:"add",value:function(e){return s.add(this,e)}},{key:"subtract",value:function(e){return s.subtract(this,e)}},{key:"multiply",value:function(e){return s.multiply(this,e)}},{key:"divide",value:function(e){return s.divide(this,e)}},{key:"set",value:function(e){return s.set(this,p(e))}},{key:"value",value:function(){return this._value}},{key:"valueOf",value:function(){return this._value}}])&&i(e.prototype,r),t}();function p(e){var t=e;return g.isNumbro(e)?t=e._value:"string"==typeof e?t=g.unformat(e):isNaN(e)&&(t=NaN),t}function g(e){return new f(p(e))}g.version="2.3.2",g.isNumbro=function(e){return e instanceof f},g.language=a.currentLanguage,g.registerLanguage=a.registerLanguage,g.setLanguage=a.setLanguage,g.languages=a.languages,g.languageData=a.languageData,g.zeroFormat=a.setZeroFormat,g.defaultFormat=a.currentDefaults,g.setDefaults=a.setDefaults,g.defaultCurrencyFormat=a.currentCurrencyDefaultFormat,g.validate=n.validate,g.loadLanguagesInNode=o.loadLanguagesInNode,g.unformat=u.unformat,g.BigNumber=s.BigNumber,t.exports=g;},{"./formatting":3,"./globalState":4,"./loading":5,"./manipulating":6,"./parsing":8,"./unformatting":9,"./validating":10}],8:[function(e,t,r){t.exports={parseFormat:function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g,d,h,v,m,y,b,w,S,O,x=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return "string"!=typeof e?e:(r=x,e=(n=(t=e).match(/^{([^}]*)}/))?(r.prefix=n[1],t.slice(n[0].length)):t,a=x,function(e,t){if(-1===e.indexOf("$")){if(-1===e.indexOf("%"))return -1!==e.indexOf("bd")?(t.output="byte",t.base="general"):-1!==e.indexOf("b")?(t.output="byte",t.base="binary"):-1!==e.indexOf("d")?(t.output="byte",t.base="decimal"):-1===e.indexOf(":")?-1!==e.indexOf("o")&&(t.output="ordinal"):t.output="time";t.output="percent";}else t.output="currency";}(e=(o=(i=e).match(/{([^}]*)}$/))?(a.postfix=o[1],i.slice(0,-o[0].length)):i,x),u=x,(c=e.match(/[1-9]+[0-9]*/))&&(u.totalLength=+c[0]),s=x,(l=e.split(".")[0].match(/0+/))&&(s.characteristic=l[0].length),function(e,t){if(-1!==e.indexOf(".")){var r=e.split(".")[0];t.optionalCharacteristic=-1===r.indexOf("0");}}(e,x),f=x,-1!==e.indexOf("a")&&(f.average=!0),g=x,-1!==(p=e).indexOf("K")?g.forceAverage="thousand":-1!==p.indexOf("M")?g.forceAverage="million":-1!==p.indexOf("B")?g.forceAverage="billion":-1!==p.indexOf("T")&&(g.forceAverage="trillion"),function(e,t){var r=e.split(".")[1];if(r){var n=r.match(/0+/);n&&(t.mantissa=n[0].length);}}(e,x),h=x,(d=e).match(/\[\.]/)?h.optionalMantissa=!0:d.match(/\./)&&(h.optionalMantissa=!1),v=x,(m=e.split(".")[1])&&(v.trimMantissa=-1!==m.indexOf("[")),y=x,-1!==e.indexOf(",")&&(y.thousandSeparated=!0),b=x,-1!==e.indexOf(" ")&&(b.spaceSeparated=!0,b.spaceSeparatedCurrency=!0,(b.average||b.forceAverage)&&(b.spaceSeparatedAbbreviation=!0)),S=x,(w=e).match(/^\+?\([^)]*\)$/)&&(S.negative="parenthesis"),w.match(/^\+?-/)&&(S.negative="sign"),O=x,e.match(/^\+/)&&(O.forceSign=!0),x)}};},{}],9:[function(p,e,t){var M=[{key:"ZiB",factor:Math.pow(1024,7)},{key:"ZB",factor:Math.pow(1e3,7)},{key:"YiB",factor:Math.pow(1024,8)},{key:"YB",factor:Math.pow(1e3,8)},{key:"TiB",factor:Math.pow(1024,4)},{key:"TB",factor:Math.pow(1e3,4)},{key:"PiB",factor:Math.pow(1024,5)},{key:"PB",factor:Math.pow(1e3,5)},{key:"MiB",factor:Math.pow(1024,2)},{key:"MB",factor:Math.pow(1e3,2)},{key:"KiB",factor:Math.pow(1024,1)},{key:"KB",factor:Math.pow(1e3,1)},{key:"GiB",factor:Math.pow(1024,3)},{key:"GB",factor:Math.pow(1e3,3)},{key:"EiB",factor:Math.pow(1024,6)},{key:"EB",factor:Math.pow(1e3,6)},{key:"B",factor:1}];function A(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function g(e,t,r,n,i,a,o){var u=2<arguments.length&&void 0!==r?r:"",c=3<arguments.length?n:void 0,s=4<arguments.length?i:void 0,l=5<arguments.length?a:void 0,f=6<arguments.length?o:void 0;if(""!==e)return e===s?0:function e(t,r,n,i,a,o,u){var c=2<arguments.length&&void 0!==n?n:"",s=3<arguments.length?i:void 0,l=4<arguments.length?a:void 0,f=5<arguments.length?o:void 0,p=6<arguments.length?u:void 0;if(!isNaN(+t))return +t;var g="",d=t.replace(/(^[^(]*)\((.*)\)([^)]*$)/,"$1$2$3");if(d!==t)return -1*e(d,r,c,s,l,f,p);for(var h=0;h<M.length;h++){var v=M[h];if((g=t.replace(v.key,""))!==t)return e(g,r,c,s,l,f,p)*v.factor}if((g=t.replace("%",""))!==t)return e(g,r,c,s,l,f,p)/100;var m=parseFloat(t);if(!isNaN(m)){var y=s(m);if(y&&"."!==y&&(g=t.replace(new RegExp("".concat(A(y),"$")),""))!==t)return e(g,r,c,s,l,f,p);var b={};Object.keys(f).forEach(function(e){b[f[e]]=e;});for(var w=Object.keys(b).sort().reverse(),S=w.length,O=0;O<S;O++){var x=w[O],N=b[x];if((g=t.replace(x,""))!==t){var B=void 0;switch(N){case"thousand":B=Math.pow(10,3);break;case"million":B=Math.pow(10,6);break;case"billion":B=Math.pow(10,9);break;case"trillion":B=Math.pow(10,12);}return e(g,r,c,s,l,f,p)*B}}}}(function(e,t,r){var n=2<arguments.length&&void 0!==r?r:"",i=e.replace(n,"");return i=(i=i.replace(new RegExp("([0-9])".concat(A(t.thousands),"([0-9])"),"g"),"$1$2")).replace(t.decimal,".")}(e,t,u),t,u,c,s,l,f)}e.exports={unformat:function(e,t){var r,n,i,a=p("./globalState"),o=a.currentDelimiters(),u=a.currentCurrency().symbol,c=a.currentOrdinal(),s=a.getZeroFormat(),l=a.currentAbbreviations(),f=void 0;if("string"==typeof e)f=function(e,t){if(e.indexOf(":")&&":"!==t.thousands){var r=e.split(":");if(3===r.length){var n=+r[0],i=+r[1],a=+r[2];return !isNaN(n)&&!isNaN(i)&&!isNaN(a)}}}(e,o)?(r=e.split(":"),n=+r[0],i=+r[1],+r[2]+60*i+3600*n):g(e,o,u,c,s,l,t);else {if("number"!=typeof e)return;f=e;}if(void 0!==f)return f}};},{"./globalState":4}],10:[function(e,t,r){function n(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(e){return (f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=e("./unformatting"),a=/^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/,p={output:{type:"string",validValues:["currency","percent","byte","time","ordinal","number"]},base:{type:"string",validValues:["decimal","binary","general"],restriction:function(e,t){return "byte"===t.output},message:"`base` must be provided only when the output is `byte`",mandatory:function(e){return "byte"===e.output}},characteristic:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},prefix:"string",postfix:"string",forceAverage:{type:"string",validValues:["trillion","billion","million","thousand"]},average:"boolean",lowPrecision:{type:"boolean",restriction:function(e,t){return !0===t.average},message:"`lowPrecision` must be provided only when the option `average` is set"},currencyPosition:{type:"string",validValues:["prefix","infix","postfix"]},currencySymbol:"string",totalLength:{type:"number",restrictions:[{restriction:function(e){return 0<=e},message:"value must be positive"},{restriction:function(e,t){return !t.exponential},message:"`totalLength` is incompatible with `exponential`"}]},mantissa:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},optionalMantissa:"boolean",trimMantissa:"boolean",roundingFunction:"function",optionalCharacteristic:"boolean",thousandSeparated:"boolean",spaceSeparated:"boolean",spaceSeparatedCurrency:"boolean",spaceSeparatedAbbreviation:"boolean",abbreviations:{type:"object",children:{thousand:"string",million:"string",billion:"string",trillion:"string"}},negative:{type:"string",validValues:["sign","parenthesis"]},forceSign:"boolean",exponential:{type:"boolean"},prefixSymbol:{type:"boolean",restriction:function(e,t){return "percent"===t.output},message:"`prefixSymbol` can be provided only when the output is `percent`"}},o={languageTag:{type:"string",mandatory:!0,restriction:function(e){return e.match(a)},message:"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)"},delimiters:{type:"object",children:{thousands:"string",decimal:"string",thousandsSize:"number"},mandatory:!0},abbreviations:{type:"object",children:{thousand:{type:"string",mandatory:!0},million:{type:"string",mandatory:!0},billion:{type:"string",mandatory:!0},trillion:{type:"string",mandatory:!0}},mandatory:!0},spaceSeparated:"boolean",spaceSeparatedCurrency:"boolean",ordinal:{type:"function",mandatory:!0},bytes:{type:"object",children:{binarySuffixes:"object",decimalSuffixes:"object"}},currency:{type:"object",children:{symbol:"string",position:"string",code:"string"},mandatory:!0},defaults:"format",ordinalFormat:"format",byteFormat:"format",percentageFormat:"format",currencyFormat:"format",timeDefaults:"format",formats:{type:"object",children:{fourDigits:{type:"format",mandatory:!0},fullWithTwoDecimals:{type:"format",mandatory:!0},fullWithTwoDecimalsNoCurrency:{type:"format",mandatory:!0},fullWithNoDecimals:{type:"format",mandatory:!0}}}};function u(e){return void 0!==i.unformat(e)}function g(c,s,l,e){var t=3<arguments.length&&void 0!==e&&e,r=Object.keys(c).map(function(e){if(!s[e])return console.error("".concat(l," Invalid key: ").concat(e)),!1;var t=c[e],r=s[e];if("string"==typeof r&&(r={type:r}),"format"===r.type){if(!g(t,p,"[Validate ".concat(e,"]"),!0))return !1}else if(f(t)!==r.type)return console.error("".concat(l," ").concat(e,' type mismatched: "').concat(r.type,'" expected, "').concat(f(t),'" provided')),!1;if(r.restrictions&&r.restrictions.length)for(var n=r.restrictions.length,i=0;i<n;i++){var a=r.restrictions[i],o=a.restriction,u=a.message;if(!o(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(u)),!1}if(r.restriction&&!r.restriction(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(r.message)),!1;if(r.validValues&&-1===r.validValues.indexOf(t))return console.error("".concat(l," ").concat(e," invalid value: must be among ").concat(JSON.stringify(r.validValues),', "').concat(t,'" provided')),!1;if(r.children&&!g(t,r.children,"[Validate ".concat(e,"]")))return !1;return !0});return t||r.push.apply(r,n(Object.keys(s).map(function(e){var t=s[e];if("string"==typeof t&&(t={type:t}),t.mandatory){var r=t.mandatory;if("function"==typeof r&&(r=r(c)),r&&void 0===c[e])return console.error("".concat(l,' Missing mandatory key "').concat(e,'"')),!1}return !0}))),r.reduce(function(e,t){return e&&t},!0)}function c(e){return g(e,p,"[Validate format]")}t.exports={validate:function(e,t){var r=u(e),n=c(t);return r&&n},validateFormat:c,validateInput:u,validateLanguage:function(e){return g(e,o,"[Validate language]")}};},{"./unformatting":9}]},{},[7])(7)});

    });

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var sortedDurationUnits = [
        exports.DurationUnit.Weeks,
        exports.DurationUnit.Days,
        exports.DurationUnit.Hours,
        exports.DurationUnit.Minutes,
        exports.DurationUnit.Seconds,
    ];
    function durationConstraintUnitMaxValue(unit) {
        switch (unit) {
            case exports.DurationUnit.Weeks:
                return 7;
            case exports.DurationUnit.Days:
                return 24;
            case exports.DurationUnit.Hours:
                return 60;
            case exports.DurationUnit.Minutes:
                return 60;
            case exports.DurationUnit.Seconds:
                return 1000;
        }
        return 1;
    }
    function getDefaultDurationUnitConversion(type, unit) {
        switch (unit) {
            case exports.DurationUnit.Weeks:
                return type === exports.DurationType.Work ? 5 : 7; // to days
            case exports.DurationUnit.Days:
                return type === exports.DurationType.Work ? 8 : 24; // to hours
            case exports.DurationUnit.Hours:
                return 60; // to minutes
            case exports.DurationUnit.Minutes:
                return 60; // to seconds
            case exports.DurationUnit.Seconds:
                return 1000; // to milliseconds
        }
    }
    function getDurationSaveValue(value, config, durationUnitsMap) {
        if (isDurationDataValueValid(value, durationUnitsMap)) {
            if (isNumeric(value)) {
                var bigValue = convertToBig(value);
                if (bigValue) {
                    return bigValue.toFixed(0);
                }
                return toNumber(value);
            }
            else if (isDurationValidByNativeLetters(value, durationUnitsMap)) {
                var durationToMillisMap = getDurationUnitToMillisMap(config, durationUnitsMap);
                return parseValueToDurationValue(value, durationToMillisMap);
            }
            else if (isDurationValidByGlobalLetters(value)) {
                var durationToMillisMap = getDurationUnitToMillisMap(config);
                return parseValueToDurationValue(value, durationToMillisMap);
            }
            return 0;
        }
        return String(value || '');
    }
    function getDurationUnitToMillisMap(config, durationUnitsMap) {
        return objectValues(exports.DurationUnit).reduce(function (map, unit) {
            var value = getDurationUnitToMillis(unit, config.type || exports.DurationType.Work, config.conversions);
            var key = (durationUnitsMap && durationUnitsMap[unit]) || unit;
            map[key] = value;
            return map;
        }, {});
    }
    function getDurationUnitToMillis(unit, type, conversions) {
        var conversion = (conversions && conversions[unit]) || getDefaultDurationUnitConversion(type, unit);
        switch (unit) {
            case exports.DurationUnit.Weeks:
            case exports.DurationUnit.Days:
            case exports.DurationUnit.Hours:
            case exports.DurationUnit.Minutes:
                var descendantUnit = getNextDurationUnit(unit);
                return conversion * getDurationUnitToMillis(descendantUnit, type, conversions);
            case exports.DurationUnit.Seconds:
                return conversion;
            default:
                return 1;
        }
    }
    function getNextDurationUnit(unit) {
        var index = sortedDurationUnits.indexOf(unit);
        return sortedDurationUnits[index + 1];
    }
    function getPreviousDurationUnit(unit) {
        var index = sortedDurationUnits.indexOf(unit);
        return sortedDurationUnits[index - 1];
    }
    function parseValueToDurationValue(value, unitToMillisMap) {
        var lettersRegexPart = Object.keys(unitToMillisMap).join('|');
        var regex = new RegExp("\\d*(" + lettersRegexPart + ")", 'g');
        var groups = prepareDurationValue(value).match(regex) || [];
        var millis = new Big(0);
        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
            var group = groups_1[_i];
            var millisPerGroup = new Big(unitToMillisMap[group[group.length - 1]]);
            var groupNumber = group.replace(/[^\d]/g, '').trim();
            var multiplier = convertToBig(groupNumber, 1);
            millis = millis.add(millisPerGroup.times(multiplier));
        }
        return millis.toFixed(0);
    }
    function isDurationDataValueValid(value, durationUnitsMap) {
        return ((isNumeric(value) && toNumber(value) >= 0) ||
            isDurationValidByGlobalLetters(value) ||
            isDurationValidByNativeLetters(value, durationUnitsMap));
    }
    function isDurationValidByGlobalLetters(value) {
        var stringValue = prepareDurationValue(value);
        var globalLetters = objectValues(exports.DurationUnit);
        var globalRegex = durationInvalidityTestRegex(globalLetters);
        return !stringValue.match(globalRegex);
    }
    function prepareDurationValue(value) {
        return (value || '').toString().trim().toLowerCase().replace(/\s/g, '');
    }
    function isDurationValidByNativeLetters(value, durationUnitsMap) {
        var stringValue = prepareDurationValue(value);
        var nativeLetters = objectValues(durationUnitsMap || {});
        var nativeRegex = durationInvalidityTestRegex(nativeLetters);
        return !stringValue.match(nativeRegex);
    }
    function durationInvalidityTestRegex(letters) {
        return new RegExp("[^" + letters.join('') + "0-9]", 'g');
    }
    function formatDurationDataValue(value, config, durationUnitsMap, overrideConfig) {
        var saveValue = getDurationSaveValue(value, config, durationUnitsMap);
        if (isNumeric(saveValue) && toNumber(saveValue) >= 0) {
            var unitsCountMap = createDurationUnitsCountsMap(saveValue, config, overrideConfig);
            var decimalPlaces = (overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.decimalPlaces) || config.decimalPlaces || 0;
            var resultValue = durationCountsMapToString(unitsCountMap, decimalPlaces, durationUnitsMap);
            return resultValue || (toNumber(saveValue) > 0 ? '0' : '');
        }
        return saveValue;
    }
    function createDurationUnitsCountsMap(saveValue, config, overrideConfig) {
        if (isNumeric(saveValue) && toNumber(saveValue) >= 0) {
            var durationToMillisMap_1 = getDurationUnitToMillisMap(config);
            var currentDuration_1 = convertToBig(saveValue, 0);
            var usedNumUnits_1 = 0;
            var maximumUnits_1 = (overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.maxUnits) || config.maxUnits || Number.MAX_SAFE_INTEGER;
            var durationUnits = __spreadArrays(sortedDurationUnits);
            if (config.maxUnit) {
                var index = durationUnits.indexOf(config.maxUnit);
                durationUnits = durationUnits.slice(index, index + 2);
            }
            var decimalPlaces_1 = (overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.decimalPlaces) || config.decimalPlaces || 0;
            return durationUnits.reduce(function (result, unit) {
                var unitToMillis = durationToMillisMap_1[unit];
                if (unitToMillis) {
                    if (usedNumUnits_1 >= maximumUnits_1) {
                        return result;
                    }
                    var unitToMillisBig = new Big(unitToMillis);
                    var numUnits = currentDuration_1.div(unitToMillisBig).round(decimalPlaces_1, 0 /* RoundDown */);
                    if (numUnits.lt(new Big(1))) {
                        result[unit] = 0;
                        return result;
                    }
                    currentDuration_1 = currentDuration_1.sub(numUnits.times(unitToMillisBig));
                    if (usedNumUnits_1 + 1 === maximumUnits_1 && currentDuration_1.cmp(unitToMillisBig.div(2)) === 1 /* GT */) {
                        numUnits = numUnits.add(1);
                    }
                    result[unit] = toNumber(numUnits.toFixed(decimalPlaces_1));
                    usedNumUnits_1++;
                }
                return result;
            }, {});
        }
        return {};
    }
    function durationCountsMapToString(durationCountsMap, decimalPlaces, durationUnitsMap) {
        if (decimalPlaces === void 0) { decimalPlaces = 0; }
        return __spreadArrays(sortedDurationUnits).reduce(function (result, unit) {
            var numUnits = new Big(durationCountsMap[unit] || 0);
            if (numUnits.cmp(new Big(0)) === 1 /* GT */) {
                var unitString = (durationUnitsMap === null || durationUnitsMap === void 0 ? void 0 : durationUnitsMap[unit]) || unit;
                return result + parseResultUnitsString(numUnits, decimalPlaces) + unitString;
            }
            return result;
        }, '');
    }
    function parseResultUnitsString(numUnits, decimalPlaces) {
        if (decimalPlaces === 0) {
            return numUnits.toFixed(0);
        }
        return numbro_min(numUnits.toFixed(decimalPlaces)).format({ trimMantissa: true, mantissa: decimalPlaces });
    }

    function hasRoleByPermissions(role, permissions) {
        switch (role) {
            case "READ" /* Read */:
                return permissions === null || permissions === void 0 ? void 0 : permissions.readWithView;
            case "WRITE" /* Write */:
                return permissions === null || permissions === void 0 ? void 0 : permissions.writeWithView;
            case "MANAGE" /* Manage */:
                return permissions === null || permissions === void 0 ? void 0 : permissions.manageWithView;
            default:
                return false;
        }
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function conditionTypeNumberOfInputs(condition) {
        switch (condition) {
            case exports.ConditionType.IsEmpty:
            case exports.ConditionType.NotEmpty:
            case exports.ConditionType.Enabled:
            case exports.ConditionType.Disabled:
                return 0;
            case exports.ConditionType.Between:
            case exports.ConditionType.NotBetween:
                return 2;
            default:
                return 1;
        }
    }
    function queryIsNotEmptyExceptPagination(query) {
        return (query.stems && query.stems.length > 0) || (query.fulltexts && query.fulltexts.length > 0);
    }
    function queryIsEmptyExceptPagination(query) {
        return !queryIsNotEmptyExceptPagination(query);
    }
    function queryStemAttributesResourcesOrder(stem, collections, linkTypes) {
        var baseCollection = stem && (collections || []).find(function (collection) { return collection.id === stem.collectionId; });
        if (!baseCollection) {
            return [];
        }
        var chain = [__assign({}, baseCollection)];
        var previousCollection = baseCollection;
        var _loop_1 = function (i) {
            var linkType = (linkTypes || []).find(function (lt) { return lt.id === stem.linkTypeIds[i]; });
            var otherCollectionId = linkType && getOtherLinkedCollectionId(linkType, previousCollection.id);
            var otherCollection = otherCollectionId && (collections || []).find(function (collection) { return collection.id === otherCollectionId; });
            if (otherCollection && linkType) {
                chain.push(__assign(__assign({}, linkType), { collections: [previousCollection, otherCollection] }));
                chain.push(__assign({}, otherCollection));
                previousCollection = otherCollection;
            }
            else {
                return "break";
            }
        };
        for (var i = 0; i < (stem.linkTypeIds || []).length; i++) {
            var state_1 = _loop_1(i);
            if (state_1 === "break")
                break;
        }
        return chain;
    }
    function getOtherLinkedCollectionId(linkType, collectionId) {
        var collectionIds = linkType === null || linkType === void 0 ? void 0 : linkType.collectionIds;
        return collectionIds[0] === collectionId ? collectionIds[1] : collectionIds[0];
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var validDataColors = {
        black: '#000000',
        silver: '#c0c0c0',
        gray: '#808080',
        white: '#ffffff',
        maroon: '#800000',
        red: '#ff0000',
        purple: '#800080',
        fuchsia: '#ff00ff',
        green: '#008000',
        lime: '#00ff00',
        olive: '#808000',
        yellow: '#ffff00',
        navy: '#000080',
        blue: '#0000ff',
        teal: '#008080',
        orange: '#ffa500',
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        blanchedalmond: '#ffebcd',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        aqua: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        oldlace: '#fdf5e6',
        olivedrab: '#6b8e23',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        whitesmoke: '#f5f5f5',
        yellowgreen: '#9acd32',
        rebeccapurple: '#663399',
    };

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function dataValuesMeetConditionByText(condition, value, otherValues) {
        switch (condition) {
            case exports.ConditionType.Equals:
                return value === otherValues[0];
            case exports.ConditionType.NotEquals:
                return value !== otherValues[0];
            case exports.ConditionType.Contains:
                return value.includes(otherValues[0]);
            case exports.ConditionType.NotContains:
                return !value.includes(otherValues[0]);
            case exports.ConditionType.StartsWith:
                return value.startsWith(otherValues[0]);
            case exports.ConditionType.EndsWith:
                return value.endsWith(otherValues[0]);
            case exports.ConditionType.IsEmpty:
                return value.length === 0;
            case exports.ConditionType.NotEmpty:
                return value.length > 0;
            default:
                return false;
        }
    }
    function valueByConditionText(condition, value) {
        switch (condition) {
            case exports.ConditionType.Equals:
            case exports.ConditionType.Contains:
            case exports.ConditionType.StartsWith:
            case exports.ConditionType.EndsWith:
                return value;
            case exports.ConditionType.NotEquals:
                return value ? '' : 'a';
            case exports.ConditionType.NotContains:
                return createValueNotIncludes(value);
            case exports.ConditionType.NotEmpty:
                return 'a';
            case exports.ConditionType.IsEmpty:
                return '';
            default:
                return '';
        }
    }
    function createValueNotIncludes(value) {
        var letters = 'abcdefghijklmnopqrstuvwxyz';
        var createdValue = '';
        var position = 0;
        while (value.includes(createdValue)) {
            for (var i = 0; i < letters.length; i++) {
                createdValue = setCharAt(createdValue, position, letters[i]);
                if (!value.includes(createdValue)) {
                    break;
                }
            }
            position++;
        }
        return createdValue;
    }
    function dataValuesMeetConditionByNumber(condition, big, otherBigNumbers, value, otherValues) {
        if (!big && !otherBigNumbers[0]) {
            if (condition === exports.ConditionType.Equals) {
                return (!value && !otherValues[0]) || value === otherValues[0];
            }
        }
        else if (!big || !otherBigNumbers[0]) {
            if (condition === exports.ConditionType.NotEquals) {
                return true;
            }
        }
        switch (condition) {
            case exports.ConditionType.Equals:
                return big && otherBigNumbers[0] && big.eq(otherBigNumbers[0]);
            case exports.ConditionType.NotEquals:
                return big && otherBigNumbers[0] && !big.eq(otherBigNumbers[0]);
            case exports.ConditionType.GreaterThan:
                return big && otherBigNumbers[0] && big.gt(otherBigNumbers[0]);
            case exports.ConditionType.GreaterThanEquals:
                return big && otherBigNumbers[0] && big.gte(otherBigNumbers[0]);
            case exports.ConditionType.LowerThan:
                return big && otherBigNumbers[0] && big.lt(otherBigNumbers[0]);
            case exports.ConditionType.LowerThanEquals:
                return big && otherBigNumbers[0] && big.lte(otherBigNumbers[0]);
            case exports.ConditionType.Between:
                return (big && otherBigNumbers[0] && otherBigNumbers[1] && big.gte(otherBigNumbers[0]) && big.lte(otherBigNumbers[1]));
            case exports.ConditionType.NotBetween:
                return (big && otherBigNumbers[0] && otherBigNumbers[1] && (big.lt(otherBigNumbers[0]) || big.gt(otherBigNumbers[1])));
            case exports.ConditionType.IsEmpty:
                return isNullOrUndefined(value) || String(value).trim().length === 0;
            case exports.ConditionType.NotEmpty:
                return isNotNullOrUndefined(value) && String(value).trim().length > 0;
            default:
                return false;
        }
    }
    function valueByConditionNumber(dataValue, condition, values, exampleValue, divider) {
        if (divider === void 0) { divider = 1; }
        switch (condition) {
            case exports.ConditionType.Equals:
            case exports.ConditionType.GreaterThanEquals:
            case exports.ConditionType.LowerThanEquals:
                return values[0].value;
            case exports.ConditionType.NotEquals:
                return values[0].value ? '' : exampleValue;
            case exports.ConditionType.LowerThan:
            case exports.ConditionType.NotBetween:
                return dataValue.copy(values[0].value).decrement().serialize();
            case exports.ConditionType.GreaterThan:
                return dataValue.copy(values[0].value).increment().serialize();
            case exports.ConditionType.Between:
                var firstValue = dataValue.copy(values[0].value).number;
                var secondValue = dataValue.copy(values[1].value).number;
                if (firstValue && secondValue) {
                    var firstValueDivided = firstValue.div(new Big(divider));
                    var bigValue = firstValueDivided
                        .minus(secondValue.div(new Big(divider)))
                        .abs()
                        .div(new Big(2))
                        .plus(firstValueDivided);
                    return dataValue.copy(bigValue.toFixed()).serialize();
                }
                return values[0].value || values[1].value;
            case exports.ConditionType.IsEmpty:
                return '';
            case exports.ConditionType.NotEmpty:
                return exampleValue;
            default:
                return '';
        }
    }
    function valueMeetFulltexts(value, fulltexts) {
        var formattedValue = removeAccentFromString(value || '').trim();
        return (fulltexts || [])
            .map(function (fulltext) { return fulltext.toLowerCase().trim(); })
            .every(function (fulltext) { return formattedValue.includes(fulltext); });
    }
    function initialConditionType(constraint) {
        return constraint.conditions()[0];
    }
    function initialConditionValues(condition, constraint) {
        var numInputs = conditionTypeNumberOfInputs(condition);
        switch (constraint.type) {
            case exports.ConstraintType.Boolean:
                return createRange(0, numInputs).map(function () { return ({ value: true }); });
            default:
                return createRange(0, numInputs).map(function () { return ({}); });
        }
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var ActionDataValue = /** @class */ (function () {
        function ActionDataValue(config) {
            this.config = config;
            this.value = null;
        }
        ActionDataValue.prototype.format = function () {
            return '';
        };
        ActionDataValue.prototype.preview = function () {
            return this.format();
        };
        ActionDataValue.prototype.title = function () {
            return this.config.title;
        };
        ActionDataValue.prototype.editValue = function () {
            return this.format();
        };
        ActionDataValue.prototype.serialize = function () {
            return null;
        };
        ActionDataValue.prototype.isValid = function (ignoreConfig) {
            return true; // any value can be converted to boolean
        };
        ActionDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        ActionDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        ActionDataValue.prototype.compareTo = function (otherValue) {
            return 0;
        };
        ActionDataValue.prototype.copy = function (newValue) {
            return new ActionDataValue(this.config);
        };
        ActionDataValue.prototype.parseInput = function (inputValue) {
            return new ActionDataValue(this.config);
        };
        ActionDataValue.prototype.meetCondition = function (condition, values) {
            return true;
        };
        ActionDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.title(), fulltexts);
        };
        ActionDataValue.prototype.valueByCondition = function (condition, values) {
            return true;
        };
        return ActionDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var AddressDataValue = /** @class */ (function () {
        function AddressDataValue(value, config, constraintData, inputValue) {
            var _a;
            this.value = value;
            this.config = config;
            this.constraintData = constraintData;
            this.inputValue = inputValue;
            if (isObject$1(value)) {
                this.address = value;
            }
            else {
                var addressesMap = (constraintData === null || constraintData === void 0 ? void 0 : constraintData.addressesMap) || {};
                this.address = (_a = addressesMap === null || addressesMap === void 0 ? void 0 : addressesMap[value]) === null || _a === void 0 ? void 0 : _a[0];
            }
        }
        AddressDataValue.prototype.format = function () {
            var _this = this;
            var _a;
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if (!this.address) {
                return this.value || '';
            }
            var fields = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.fields) || [];
            var nonEmptyFields = fields.filter(function (fieldName) { return !!_this.address[fieldName]; });
            var streetFields = [exports.AddressField.HouseNumber, exports.AddressField.Street];
            return nonEmptyFields.reduce(function (formattedAddress, fieldName, index) {
                var fieldValue = _this.address[fieldName];
                if (index === 0) {
                    return fieldValue;
                }
                if (streetFields.includes(fieldName) && streetFields.includes(nonEmptyFields[index - 1])) {
                    return formattedAddress.concat(' ', fieldValue);
                }
                else {
                    return formattedAddress.concat(', ', fieldValue);
                }
            }, '');
        };
        AddressDataValue.prototype.preview = function () {
            return this.format();
        };
        AddressDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        AddressDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        AddressDataValue.prototype.serialize = function () {
            return escapeHtml(this.address ? this.format() : this.value);
        };
        AddressDataValue.prototype.isValid = function (ignoreConfig) {
            return true; // users can enter any text, address constraint just provides hints
        };
        AddressDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        AddressDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        AddressDataValue.prototype.compareTo = function (otherValue) {
            if (deepObjectsEquals(this.address, otherValue.address)) {
                return 0;
            }
            return String(this.value).localeCompare(String(otherValue.value), undefined, { sensitivity: 'base' });
        };
        AddressDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new AddressDataValue(value, this.config, this.constraintData);
        };
        AddressDataValue.prototype.parseInput = function (inputValue) {
            return new AddressDataValue(inputValue, this.config, this.constraintData, inputValue);
        };
        AddressDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new AddressDataValue(value.value, _this.config, _this.constraintData); });
            var formattedValue = this.format().toLowerCase().trim();
            var otherFormattedValues = dataValues.map(function (dataValue) { return dataValue.format().toLowerCase().trim(); });
            return dataValuesMeetConditionByText(condition, formattedValue, otherFormattedValues);
        };
        AddressDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        AddressDataValue.prototype.valueByCondition = function (condition, values) {
            var _a;
            return valueByConditionText(condition, (_a = values === null || values === void 0 ? void 0 : values[0]) === null || _a === void 0 ? void 0 : _a.value);
        };
        return AddressDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var truthyValues = [true, 'true', 'yes', 'ja', 'ano', 'áno', 'sí', 'si', 'sim', 'да', '是', 'はい', 'vâng', 'כן'];
    var BooleanDataValue = /** @class */ (function () {
        function BooleanDataValue(value) {
            this.value = value;
            this.config = {};
            this.value = isArray$1(value) ? value.every(function (val) { return !!val; }) : value;
            this.booleanValue = truthyValues.includes(typeof this.value === 'string' ? this.value.toLocaleLowerCase() : this.value);
        }
        BooleanDataValue.prototype.format = function () {
            return String(this.booleanValue); // TODO format based on language
        };
        BooleanDataValue.prototype.preview = function () {
            return this.format();
        };
        BooleanDataValue.prototype.title = function () {
            return this.format();
        };
        BooleanDataValue.prototype.editValue = function () {
            return this.format();
        };
        BooleanDataValue.prototype.serialize = function () {
            return this.booleanValue;
        };
        BooleanDataValue.prototype.isValid = function (ignoreConfig) {
            return true; // any value can be converted to boolean
        };
        BooleanDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        BooleanDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        BooleanDataValue.prototype.compareTo = function (otherValue) {
            if (this.booleanValue === otherValue.booleanValue) {
                return 0;
            }
            return this.booleanValue ? 1 : -1;
        };
        BooleanDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new BooleanDataValue(value);
        };
        BooleanDataValue.prototype.parseInput = function (inputValue) {
            return new BooleanDataValue(inputValue);
        };
        BooleanDataValue.prototype.meetCondition = function (condition, values) {
            var dataValues = (values || []).map(function (value) { return new BooleanDataValue(value.value); });
            var otherBooleanValue = dataValues.length > 0 && dataValues[0].booleanValue;
            switch (condition) {
                case exports.ConditionType.Equals:
                    return this.booleanValue === otherBooleanValue;
                case exports.ConditionType.NotEquals:
                    return this.booleanValue !== otherBooleanValue;
                default:
                    return false;
            }
        };
        BooleanDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        BooleanDataValue.prototype.valueByCondition = function (condition, values) {
            switch (condition) {
                case exports.ConditionType.Equals:
                    return values[0].value;
                case exports.ConditionType.NotEquals:
                    return !values[0].value;
                default:
                    return null;
            }
        };
        return BooleanDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var ColorDataValue = /** @class */ (function () {
        function ColorDataValue(value, config, inputValue) {
            this.value = value;
            this.config = config;
            this.inputValue = inputValue;
            this.hexCode = value || value === 0 ? parseColorHexCode(value) : null;
            this.numberCode = convertColorHexCodeToNumber(this.hexCode);
        }
        ColorDataValue.prototype.format = function () {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            return this.hexCode || formatUnknownDataValue(this.value);
        };
        ColorDataValue.prototype.preview = function () {
            return this.format();
        };
        ColorDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        ColorDataValue.prototype.editValue = function () {
            return this.format();
        };
        ColorDataValue.prototype.serialize = function () {
            return this.hexCode || escapeHtml(this.value);
        };
        ColorDataValue.prototype.isValid = function (ignoreConfig) {
            return isNotNullOrUndefined(this.inputValue) || !this.value || !!this.hexCode;
        };
        ColorDataValue.prototype.increment = function () {
            if (!this.hexCode) {
                return null;
            }
            if (this.hexCode === '#ffffff') {
                return new ColorDataValue('#000000', this.config);
            }
            var value = (this.numberCode + 1).toString(16);
            return new ColorDataValue(value, this.config);
        };
        ColorDataValue.prototype.decrement = function () {
            if (!this.hexCode) {
                return null;
            }
            if (this.hexCode === '#000000') {
                return new ColorDataValue('#ffffff', this.config);
            }
            var value = (this.numberCode - 1).toString(16);
            return new ColorDataValue(value, this.config);
        };
        ColorDataValue.prototype.compareTo = function (otherValue) {
            return this.numberCode - otherValue.numberCode;
        };
        ColorDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new ColorDataValue(value, this.config);
        };
        ColorDataValue.prototype.parseInput = function (inputValue) {
            return new ColorDataValue(inputValue, this.config, inputValue);
        };
        ColorDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new ColorDataValue(value.value, _this.config); });
            var formattedValue = this.format().trim().toLowerCase();
            var otherFormattedValues = dataValues.map(function (dataValue) { return dataValue.format().trim().toLowerCase(); });
            return dataValuesMeetConditionByText(condition, formattedValue, otherFormattedValues);
        };
        ColorDataValue.prototype.meetFullTexts = function (fulltexts) {
            var _this = this;
            var formattedFulltexts = (fulltexts || []).map(function (fulltext) { return _this.copy(fulltext).format(); });
            return valueMeetFulltexts(this.format(), formattedFulltexts) || valueMeetFulltexts(this.readableColor(), fulltexts);
        };
        ColorDataValue.prototype.readableColor = function () {
            var _this = this;
            var formattedValue = this.format();
            var colorEntry = Object.keys(validDataColors).find(function (key) { return validDataColors[key] === _this.hexCode; });
            return colorEntry || formattedValue;
        };
        ColorDataValue.prototype.valueByCondition = function (condition, values) {
            switch (condition) {
                case exports.ConditionType.Equals:
                    return values[0].value;
                case exports.ConditionType.NotEquals:
                    return objectValues(validDataColors).find(function (color) { return color !== values[0].value; });
                case exports.ConditionType.IsEmpty:
                    return '';
                case exports.ConditionType.NotEmpty:
                    return '#00b388';
                default:
                    return '';
            }
        };
        return ColorDataValue;
    }());
    function parseColorHexCode(rawValue) {
        var value = String(rawValue || '')
            .trim()
            .toLowerCase();
        if (validDataColors[value]) {
            return validDataColors[value];
        }
        else if (/^#?[0-9a-f]{6}$/.test(value)) {
            return value.startsWith('#') ? value : "#" + value;
        }
        else if (/^#?[0-9a-f]{3}$/.test(value)) {
            return prolongShortHexColor(value);
        }
        else if (/^rgb\([\s]*[0-9]{1,3}[\s]*,[\s]*[0-9]{1,3}[\s]*,[\s]*[0-9]{1,3}[\s]*\)$/.test(value)) {
            return convertRgbColorToHex(value);
        }
        else if (/^hsl\([\s]*[0-9]{1,3}[\s]*,[\s]*[0-9]{1,3}[\s]%*,[\s]*[0-9]{1,3}%[\s]*\)$/.test(value)) {
            return convertHslColorToHex(value);
        }
        else {
            return '';
        }
    }
    function convertColorHexCodeToNumber(hexCode) {
        return hexCode && parseInt(hexCode.slice(1), 16);
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var CoordinatesDataValue = /** @class */ (function () {
        function CoordinatesDataValue(value, config, inputValue) {
            this.value = value;
            this.config = config;
            this.inputValue = inputValue;
            this.coordinates = parseCoordinates(value);
        }
        CoordinatesDataValue.prototype.format = function () {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if (!this.coordinates) {
                return formatUnknownDataValue(this.value);
            }
            return formatCoordinates(this.coordinates, this.config.format, this.config.precision);
        };
        CoordinatesDataValue.prototype.preview = function () {
            return this.format();
        };
        CoordinatesDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        CoordinatesDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        CoordinatesDataValue.prototype.serialize = function () {
            return this.coordinates ? formatCoordinates(this.coordinates, exports.CoordinatesFormat.DecimalDegrees, 6) : '';
        };
        CoordinatesDataValue.prototype.isValid = function (ignoreConfig) {
            return isNotNullOrUndefined(this.inputValue) || !!this.coordinates;
        };
        CoordinatesDataValue.prototype.increment = function () {
            return undefined; // not supported at the moment but can be implemented later
        };
        CoordinatesDataValue.prototype.decrement = function () {
            return undefined; // not supported at the moment but can be implemented later
        };
        CoordinatesDataValue.prototype.compareTo = function (otherValue) {
            if (deepObjectsEquals(this.coordinates, otherValue.coordinates)) {
                return 0;
            }
            return this.format().localeCompare(otherValue.format());
        };
        CoordinatesDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new CoordinatesDataValue(value, this.config);
        };
        CoordinatesDataValue.prototype.parseInput = function (inputValue) {
            return new CoordinatesDataValue(inputValue, this.config, inputValue);
        };
        CoordinatesDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new CoordinatesDataValue(value.value, _this.config); });
            var formattedValue = this.format().trim().toLowerCase();
            var otherFormattedValues = dataValues.map(function (dataValue) { return dataValue.format().trim().toLowerCase(); });
            return dataValuesMeetConditionByText(condition, formattedValue, otherFormattedValues);
        };
        CoordinatesDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        CoordinatesDataValue.prototype.valueByCondition = function (condition, values) {
            var exampleCoordinates = '49.2019854,16.4378783';
            switch (condition) {
                case exports.ConditionType.Equals:
                    return values[0].value;
                case exports.ConditionType.NotEquals:
                    return values[0].value ? '' : exampleCoordinates;
                case exports.ConditionType.IsEmpty:
                    return '';
                case exports.ConditionType.NotEmpty:
                    return exampleCoordinates;
                default:
                    return '';
            }
        };
        return CoordinatesDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var DateTimeDataValue = /** @class */ (function () {
        function DateTimeDataValue(value, config, inputValue) {
            var _a, _b, _c, _d, _e, _f;
            this.value = value;
            this.config = config;
            this.inputValue = inputValue;
            if (inputValue) {
                this.momentDate = parseMomentDate(this.value, (_a = this.config) === null || _a === void 0 ? void 0 : _a.format, (_b = this.config) === null || _b === void 0 ? void 0 : _b.asUtc);
            }
            else if (isDateValid(this.value)) {
                this.momentDate = this.parseMoment(this.value);
                this.value = this.value.getTime();
            }
            else if (this.value) {
                this.momentDate = isISOFormat(this.value)
                    ? this.parseMoment(this.value)
                    : parseMomentDate(this.value, (_c = this.config) === null || _c === void 0 ? void 0 : _c.format, (_d = this.config) === null || _d === void 0 ? void 0 : _d.asUtc);
            }
            this.momentDate = ((_e = this.momentDate) === null || _e === void 0 ? void 0 : _e.isValid()) ? resetUnusedMomentPart(this.momentDate, (_f = this.config) === null || _f === void 0 ? void 0 : _f.format)
                : this.momentDate;
        }
        DateTimeDataValue.prototype.parseMoment = function (value) {
            var _a;
            return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.asUtc) ? moment.utc(value) : moment(value);
        };
        DateTimeDataValue.prototype.serialize = function () {
            return this.momentDate ? this.momentDate.toISOString() : '';
        };
        DateTimeDataValue.prototype.preview = function () {
            return this.format();
        };
        DateTimeDataValue.prototype.format = function (showInvalid) {
            var _a;
            if (showInvalid === void 0) { showInvalid = true; }
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if ([undefined, null, ''].includes(this.value)) {
                return '';
            }
            if (!this.isValidMomentDate()) {
                return showInvalid ? formatUnknownDataValue(this.value, true) : '';
            }
            return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.format) ? this.momentDate.format(this.config.format) : formatUnknownDataValue(this.value);
        };
        DateTimeDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        DateTimeDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        DateTimeDataValue.prototype.isValid = function (ignoreConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return true;
            }
            if (!this.value && this.value !== 0) {
                return true;
            }
            if (!this.isValidMomentDate()) {
                return false;
            }
            return ignoreConfig || this.isWithinRange();
        };
        DateTimeDataValue.prototype.isValidMomentDate = function () {
            return this.momentDate && this.momentDate.isValid();
        };
        DateTimeDataValue.prototype.isWithinRange = function () {
            if (!this.config || !this.momentDate) {
                return true;
            }
            var _a = this.config, format = _a.format, minValue = _a.minValue, maxValue = _a.maxValue;
            var momentDate = resetUnusedMomentPart(this.momentDate, format);
            if (minValue) {
                var minDate = resetUnusedMomentPart(parseMomentDate(minValue, format), format);
                if (momentDate.diff(minDate) < 0) {
                    return false;
                }
            }
            if (maxValue) {
                var maxDate = resetUnusedMomentPart(parseMomentDate(maxValue, format), format);
                if (momentDate.diff(maxDate) > 0) {
                    return false;
                }
            }
            return true;
        };
        DateTimeDataValue.prototype.increment = function () {
            var _a;
            var smallestUnit = getSmallestDateUnit(((_a = this.config) === null || _a === void 0 ? void 0 : _a.format) || '');
            var nextValue = this.momentDate.add(1, smallestUnit).toISOString();
            return new DateTimeDataValue(nextValue, this.config);
        };
        DateTimeDataValue.prototype.decrement = function () {
            var _a;
            var smallestUnit = getSmallestDateUnit(((_a = this.config) === null || _a === void 0 ? void 0 : _a.format) || '');
            var nextValue = this.momentDate.subtract(1, smallestUnit).toISOString();
            return new DateTimeDataValue(nextValue, this.config);
        };
        DateTimeDataValue.prototype.compareTo = function (otherValue) {
            var _a, _b;
            if (!this.momentDate || !otherValue.momentDate) {
                return this.momentDate ? 1 : -1;
            }
            return resetUnusedMomentPart(this.momentDate, (_a = this.config) === null || _a === void 0 ? void 0 : _a.format).diff(resetUnusedMomentPart(otherValue.momentDate, (_b = otherValue.config) === null || _b === void 0 ? void 0 : _b.format));
        };
        DateTimeDataValue.prototype.copy = function (newValue) {
            var _a;
            var value = newValue !== undefined ? newValue : (_a = this.momentDate) === null || _a === void 0 ? void 0 : _a.toDate();
            return new DateTimeDataValue(value, this.config);
        };
        DateTimeDataValue.prototype.toDate = function () {
            var value = this.serialize();
            return value ? new Date(value) : null;
        };
        DateTimeDataValue.prototype.parseInput = function (inputValue) {
            return new DateTimeDataValue(inputValue, this.config, inputValue);
        };
        DateTimeDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var otherMomentValues = this.mapConditionValues(values);
            var momentDates = otherMomentValues
                .map(function (value) { return resetUnusedMomentPart(_this.momentDate, value.format); })
                .sort(function (a, b) { return _this.compareMoments(a, b); });
            var otherMoment = otherMomentValues[0] && otherMomentValues[0].moment;
            if (!this.momentDate && !otherMoment) {
                if (condition === exports.ConditionType.Equals) {
                    var otherValue = values[0] && values[0].value;
                    return (!this.value && !otherValue) || this.value === otherValue;
                }
            }
            else if (!this.momentDate || !otherMoment) {
                if (condition === exports.ConditionType.NotEquals) {
                    return true;
                }
            }
            var allMomentDatesDefined = createRange(0, conditionTypeNumberOfInputs(condition)).every(function (index) { return momentDates[index] && otherMomentValues[index].moment; });
            if (!allMomentDatesDefined) {
                return false;
            }
            switch (condition) {
                case exports.ConditionType.Equals:
                    return momentDates[0].isSame(otherMoment);
                case exports.ConditionType.NotEquals:
                    return !momentDates[0].isSame(otherMoment);
                case exports.ConditionType.GreaterThan:
                    return momentDates[0].isAfter(otherMoment);
                case exports.ConditionType.GreaterThanEquals:
                    return momentDates[0].isSameOrAfter(otherMoment);
                case exports.ConditionType.LowerThan:
                    return momentDates[0].isBefore(otherMoment);
                case exports.ConditionType.LowerThanEquals:
                    return momentDates[0].isSameOrBefore(otherMoment);
                case exports.ConditionType.Between:
                    return momentDates[0].isSameOrAfter(otherMoment) && momentDates[1].isSameOrBefore(otherMomentValues[1].moment);
                case exports.ConditionType.NotBetween:
                    return momentDates[0].isBefore(otherMoment) || momentDates[1].isAfter(otherMomentValues[1].moment);
                case exports.ConditionType.IsEmpty:
                    return isNullOrUndefined(this.value) || String(this.value).trim().length === 0;
                case exports.ConditionType.NotEmpty:
                    return isNotNullOrUndefined(this.value) && String(this.value).trim().length > 0;
                default:
                    return false;
            }
        };
        DateTimeDataValue.prototype.mapConditionValues = function (values) {
            var _this = this;
            return (values || [])
                .map(function (value) {
                    var _a;
                    if (value.type) {
                        return {
                            moment: constraintConditionValueMoment(value.type),
                            format: constraintConditionValueFormat(value.type),
                        };
                    }
                    var format = (_a = _this.config) === null || _a === void 0 ? void 0 : _a.format;
                    return {
                        moment: resetUnusedMomentPart(new DateTimeDataValue(value.value, _this.config).momentDate, format),
                        format: format,
                    };
                })
                .sort(function (a, b) { return _this.compareMoments(a.moment, b.moment); });
        };
        DateTimeDataValue.prototype.compareMoments = function (a, b) {
            if (!a || !b) {
                return a ? 1 : b ? -1 : 0;
            }
            return a.diff(b);
        };
        DateTimeDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(true), fulltexts);
        };
        DateTimeDataValue.prototype.valueByCondition = function (condition, values) {
            var dates = this.mapConditionValues(values).map(function (value) { return value.moment.toDate(); });
            switch (condition) {
                case exports.ConditionType.Equals:
                case exports.ConditionType.GreaterThanEquals:
                case exports.ConditionType.LowerThanEquals:
                    return this.copy(dates[0]).serialize();
                case exports.ConditionType.GreaterThan:
                case exports.ConditionType.Between:
                    if (dates[0] && dates[1] && dates[0].getTime() === dates[1].getTime()) {
                        return this.copy(dates[0]).serialize();
                    }
                    return this.copy(dates[0]).increment().serialize();
                case exports.ConditionType.LowerThan:
                case exports.ConditionType.NotBetween:
                    return this.copy(dates[0]).decrement().serialize();
                case exports.ConditionType.NotEquals:
                    return values[0].value || values[0].type ? '' : this.copy(new Date()).serialize();
                case exports.ConditionType.IsEmpty:
                    return '';
                case exports.ConditionType.NotEmpty:
                    return this.copy(new Date()).serialize();
                default:
                    return null;
            }
        };
        return DateTimeDataValue;
    }());
    function constraintConditionValueFormat(value) {
        switch (value) {
            case exports.DateTimeConstraintConditionValue.Yesterday:
            case exports.DateTimeConstraintConditionValue.Tomorrow:
            case exports.DateTimeConstraintConditionValue.Today:
                return 'DD M Y';
            case exports.DateTimeConstraintConditionValue.LastWeek:
            case exports.DateTimeConstraintConditionValue.NextWeek:
            case exports.DateTimeConstraintConditionValue.ThisWeek:
                return 'W Y';
            case exports.DateTimeConstraintConditionValue.LastMonth:
            case exports.DateTimeConstraintConditionValue.NextMonth:
            case exports.DateTimeConstraintConditionValue.ThisMonth:
                return 'M Y';
            default:
                return '';
        }
    }
    function isISOFormat(value) {
        var _a;
        return ((_a = String(value || '').match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}/g)) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    function constraintConditionValueMoment(value) {
        switch (value) {
            case exports.DateTimeConstraintConditionValue.Yesterday:
                return moment().startOf('day').subtract(1, 'day');
            case exports.DateTimeConstraintConditionValue.Tomorrow:
                return moment().startOf('day').add(1, 'day');
            case exports.DateTimeConstraintConditionValue.Today:
                return moment().startOf('day');
            case exports.DateTimeConstraintConditionValue.LastWeek:
                return resetWeek(moment().startOf('day').subtract(1, 'week'));
            case exports.DateTimeConstraintConditionValue.NextWeek:
                return resetWeek(moment().startOf('day').add(1, 'week'));
            case exports.DateTimeConstraintConditionValue.ThisWeek:
                return resetWeek(moment().startOf('day'));
            case exports.DateTimeConstraintConditionValue.LastMonth:
                return moment().startOf('month').subtract(1, 'month');
            case exports.DateTimeConstraintConditionValue.NextMonth:
                return moment().startOf('month').add(1, 'month');
            case exports.DateTimeConstraintConditionValue.ThisMonth:
                return moment().startOf('month');
            default:
                return null;
        }
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var DurationDataValue = /** @class */ (function () {
        function DurationDataValue(value, config, constraintData, inputValue) {
            var _a;
            this.value = value;
            this.config = config;
            this.constraintData = constraintData;
            this.inputValue = inputValue;
            var durationUnitsMap = (_a = this.constraintData) === null || _a === void 0 ? void 0 : _a.durationUnitsMap;
            this.parsedValue = this.inputValue ? parseInputValue(this.inputValue) : value;
            if (isDurationDataValueValid(this.parsedValue, durationUnitsMap)) {
                var saveValue = getDurationSaveValue(this.parsedValue, this.config, durationUnitsMap);
                this.number = convertToBig(saveValue);
                this.roundedNumber = roundBigNumber(this.number, config === null || config === void 0 ? void 0 : config.decimalPlaces);
                this.unitsCountMap = createDurationUnitsCountsMap(saveValue, this.config);
            }
        }
        DurationDataValue.prototype.format = function (overrideConfig) {
            var _a;
            return this.formatWithUnitsMap((_a = this.constraintData) === null || _a === void 0 ? void 0 : _a.durationUnitsMap, overrideConfig);
        };
        DurationDataValue.prototype.formatToNativeLocale = function () {
            return this.formatWithUnitsMap();
        };
        DurationDataValue.prototype.formatWithUnitsMap = function (durationUnitsMap, overrideConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if (!this.number) {
                return formatUnknownDataValue(this.value);
            }
            return formatDurationDataValue(this.value, this.config, durationUnitsMap, overrideConfig);
        };
        DurationDataValue.prototype.preview = function (overrideConfig) {
            return this.format(overrideConfig);
        };
        DurationDataValue.prototype.title = function (overrideConfig) {
            return unescapeHtml(this.format(overrideConfig));
        };
        DurationDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        DurationDataValue.prototype.serialize = function () {
            if (this.number) {
                return convertBigToNumberSafely(this.number, 0);
            }
            return escapeHtml(formatUnknownDataValue(this.value));
        };
        DurationDataValue.prototype.isValid = function (ignoreConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.copy(this.inputValue).isValid(ignoreConfig);
            }
            return !!this.number;
        };
        DurationDataValue.prototype.increment = function () {
            return this.addToSmallestUnit();
        };
        DurationDataValue.prototype.addToSmallestUnit = function (multiplier) {
            if (multiplier === void 0) { multiplier = 1; }
            var one = new Big(1);
            if (this.number) {
                var formatted = this.formatToNativeLocale();
                var unitsMap = getDurationUnitToMillisMap(this.config);
                for (var i = sortedDurationUnits.length - 1; i >= 0; i--) {
                    if (formatted.includes(sortedDurationUnits[i])) {
                        var millis = unitsMap[sortedDurationUnits[i]] || 1;
                        if (this.number.div(new Big(millis)).gte(one)) {
                            return this.copy(this.number.add(millis * multiplier).toFixed());
                        }
                    }
                }
            }
            return this.copy();
        };
        DurationDataValue.prototype.decrement = function () {
            return this.addToSmallestUnit(-1);
        };
        DurationDataValue.prototype.compareTo = function (otherValue) {
            return compareBigNumbers(this.roundedNumber, otherValue.roundedNumber);
        };
        DurationDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new DurationDataValue(value, this.config, this.constraintData);
        };
        DurationDataValue.prototype.parseInput = function (inputValue) {
            return new DurationDataValue(inputValue, this.config, this.constraintData, inputValue);
        };
        DurationDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new DurationDataValue(value.value, _this.config, _this.constraintData); });
            var otherBigNumbers = dataValues.map(function (value) { return value.roundedNumber; });
            var otherValues = dataValues.map(function (value) { return value.parsedValue; });
            return dataValuesMeetConditionByNumber(condition, this.roundedNumber, otherBigNumbers, this.parsedValue, otherValues);
        };
        DurationDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        DurationDataValue.prototype.valueByCondition = function (condition, values) {
            return valueByConditionNumber(this, condition, values, '19s');
        };
        return DurationDataValue;
    }());
    function parseInputValue(value) {
        if (isNumeric(value)) {
            return toNumber(value) * 1000;
        }
        return value;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var FilesDataValue = /** @class */ (function () {
        function FilesDataValue(value, config) {
            this.value = value;
            this.config = config;
        }
        FilesDataValue.prototype.format = function () {
            return this.value || this.value === 0 ? String(this.value) : '';
        };
        FilesDataValue.prototype.preview = function () {
            return this.format();
        };
        FilesDataValue.prototype.serialize = function () {
            return escapeHtml(this.value);
        };
        FilesDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        FilesDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        FilesDataValue.prototype.isValid = function (ignoreConfig) {
            return true; // only file names are stored in the value
        };
        FilesDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        FilesDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        FilesDataValue.prototype.compareTo = function (otherValue) {
            return String(this.value).localeCompare(String(otherValue.value));
        };
        FilesDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new FilesDataValue(value, this.config);
        };
        FilesDataValue.prototype.parseInput = function (inputValue) {
            return new FilesDataValue(inputValue, this.config);
        };
        FilesDataValue.prototype.meetCondition = function (condition, values) {
            switch (condition) {
                case exports.ConditionType.IsEmpty:
                    return !this.value;
                case exports.ConditionType.NotEmpty:
                    return this.value;
                default:
                    return false;
            }
        };
        FilesDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        FilesDataValue.prototype.valueByCondition = function (condition, values) {
            switch (condition) {
                case exports.ConditionType.IsEmpty:
                    return '';
                case exports.ConditionType.NotEmpty:
                    return 'a';
            }
        };
        return FilesDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    /*
     * Saved value is formatted as 'Link [Text]'
     */
    var LinkDataValue = /** @class */ (function () {
        function LinkDataValue(value, config, inputValue) {
            this.value = value;
            this.config = config;
            this.inputValue = inputValue;
            var _a = parseLinkValue(inputValue || value || ''), link = _a.link, title = _a.title;
            this.linkValue = link || '';
            this.titleValue = title || '';
        }
        LinkDataValue.prototype.format = function () {
            if (this.linkValue) {
                return "<a href=\"" + completeLinkValue(this.linkValue) + "\" target=\"_blank\">" + (this.titleValue || this.linkValue) + "</a>";
            }
            return this.titleValue || '';
        };
        LinkDataValue.prototype.editValue = function () {
            return formatLinkValue(this.linkValue, this.titleValue);
        };
        LinkDataValue.prototype.preview = function () {
            return this.format();
        };
        LinkDataValue.prototype.serialize = function () {
            return formatLinkValue(this.linkValue, this.titleValue);
        };
        LinkDataValue.prototype.title = function () {
            return this.titleValue || this.linkValue;
        };
        LinkDataValue.prototype.compareTo = function (otherValue) {
            return this.title().localeCompare(otherValue.title());
        };
        LinkDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new LinkDataValue(value, this.config);
        };
        LinkDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        LinkDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        LinkDataValue.prototype.isValid = function (ignoreConfig) {
            return !!this.linkValue;
        };
        LinkDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new LinkDataValue(value.value, _this.config); });
            var formattedValue = this.format().toLowerCase().trim();
            var otherFormattedValues = dataValues.map(function (dataValue) { return dataValue.format().toLowerCase().trim(); });
            return dataValuesMeetConditionByText(condition, formattedValue, otherFormattedValues);
        };
        LinkDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.titleValue || this.linkValue, fulltexts);
        };
        LinkDataValue.prototype.parseInput = function (inputValue) {
            return new LinkDataValue(inputValue, this.config, inputValue);
        };
        LinkDataValue.prototype.valueByCondition = function (condition, values) {
            var _a;
            return valueByConditionText(condition, (_a = values === null || values === void 0 ? void 0 : values[0]) === null || _a === void 0 ? void 0 : _a.value);
        };
        return LinkDataValue;
    }());
    function completeLinkValue(link) {
        if (link) {
            return linkHasValidProtocol(link) ? link : "https://" + link;
        }
        return '';
    }
    function linkHasValidProtocol(link) {
        // https://en.wikipedia.org/wiki/List_of_URI_schemes
        var protocols = [
            'http://',
            'https://',
            'ftp://',
            'mailto:',
            'callto:',
            'spotify:',
            'bitcoin:',
            'dns:',
            'facetime:',
            'file://',
            'geo:',
            'git://',
            'imap://',
            'lastfm://',
            'market://',
            'pop://',
            'imap://',
            's3://',
            'sftp://',
            'skype:',
            'sms:',
            'ssh://',
            'svn://',
            'tag:',
            'tel:',
            'slack://',
            'zoommtg://',
            'app://',
        ];
        return protocols.some(function (protocol) { return (link || '').startsWith(protocol); });
    }
    function formatLinkValue(link, title) {
        if (link && title) {
            return link + " [" + title + "]";
        }
        else if (link || title) {
            return link || title;
        }
        return '';
    }
    function parseLinkValue(value) {
        var trimmedValue = value ? value.trim() : value;
        if (trimmedValue && trimmedValue[trimmedValue.length - 1] === ']') {
            var titleStartIndex = trimmedValue.lastIndexOf('[');
            if (titleStartIndex !== -1) {
                var title = trimmedValue.substring(titleStartIndex + 1, trimmedValue.length - 1);
                return {
                    link: trimmedValue.substring(0, titleStartIndex).trim() || title,
                    title: title,
                };
            }
        }
        return { link: trimmedValue };
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var definedLanguages = new Set();
    function registerAndSetLanguage(tag, locale, currencyData) {
        if (definedLanguages.has(tag)) {
            numbro_min.setLanguage(tag);
        }
        else {
            numbro_min.registerLanguage(getNumbroLanguage(tag, locale, currencyData), true);
        }
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var NumberDataValue = /** @class */ (function () {
        function NumberDataValue(value, config, constraintData, inputValue) {
            var _a;
            this.value = value;
            this.config = config;
            this.constraintData = constraintData;
            this.inputValue = inputValue;
            this.locale = (config === null || config === void 0 ? void 0 : config.locale) || exports.LanguageTag.USA;
            registerAndSetLanguage((config === null || config === void 0 ? void 0 : config.currency) || this.locale, this.locale, (_a = this.constraintData) === null || _a === void 0 ? void 0 : _a.currencyData);
            this.parsedValue = this.parseValue(value, config, inputValue);
            var unformatted = numbro_min.unformat(this.parsedValue, parseNumbroConfig(config));
            this.number = convertToBig(unformatted);
            this.roundedNumber = roundBigNumber(this.number, config === null || config === void 0 ? void 0 : config.decimals);
        }
        NumberDataValue.prototype.parseValue = function (value, config, inputValue) {
            if (typeof value === 'number' || (isNullOrUndefined(inputValue) && isNumeric(value))) {
                return toNumber(value);
            }
            if ((config === null || config === void 0 ? void 0 : config.separated) || (config === null || config === void 0 ? void 0 : config.currency)) {
                return inputValue || value;
            }
            return decimalUserToStore(String(inputValue || value || '')).replace(',', '.').trim();
        };
        NumberDataValue.prototype.format = function (overrideConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return removeNonNumberCharacters(this.inputValue);
            }
            if (this.number) {
                return this.formatBigNumber(this.number, overrideConfig);
            }
            return formatUnknownDataValue(this.value);
        };
        NumberDataValue.prototype.formatBigNumber = function (big, overrideConfig) {
            var _a, _b, _c;
            var numbroConfig = parseNumbroConfig(this.config, overrideConfig);
            if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.currency) {
                registerAndSetLanguage(exports.LanguageTag.USA, this.locale, (_b = this.constraintData) === null || _b === void 0 ? void 0 : _b.currencyData);
                var numbroObject = numbro_min(this.number.toFixed());
                registerAndSetLanguage(this.config.currency, this.locale, (_c = this.constraintData) === null || _c === void 0 ? void 0 : _c.currencyData);
                return numbroObject.formatCurrency(numbroConfig);
            }
            return numbro_min(big.toFixed()).format(numbroConfig);
        };
        NumberDataValue.prototype.preview = function (overrideConfig) {
            return this.format(overrideConfig);
        };
        NumberDataValue.prototype.title = function (overrideConfig) {
            return unescapeHtml(this.format(overrideConfig));
        };
        NumberDataValue.prototype.editValue = function () {
            if (isNotNullOrUndefined(this.inputValue)) {
                return removeNonNumberCharacters(this.inputValue);
            }
            if (this.number) {
                var separator = this.getCurrencyDecimalSeparator();
                return decimalStoreToUser(this.number.toFixed(), separator);
            }
            return unescapeHtml(formatUnknownDataValue(this.value));
        };
        NumberDataValue.prototype.getCurrencyDecimalSeparator = function () {
            var _a, _b;
            return (_b = (_a = numbro_min.languageData()) === null || _a === void 0 ? void 0 : _a.delimiters) === null || _b === void 0 ? void 0 : _b.decimal;
        };
        NumberDataValue.prototype.serialize = function () {
            if (this.number) {
                return this.number.toFixed();
            }
            return isNotNullOrUndefined(this.value) ? escapeHtml(decimalUserToStore(String(this.value).trim())) : null;
        };
        NumberDataValue.prototype.isValid = function (ignoreConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue === '' || !!this.number;
            }
            if (!this.value) {
                return true;
            }
            if (!this.number) {
                return false;
            }
            return Boolean(ignoreConfig) || checkNumberRange(this.number, this.config);
        };
        NumberDataValue.prototype.increment = function () {
            return this.number && new NumberDataValue(this.number.add(1), this.config, this.constraintData);
        };
        NumberDataValue.prototype.decrement = function () {
            return this.number && new NumberDataValue(this.number.sub(1), this.config, this.constraintData);
        };
        NumberDataValue.prototype.compareTo = function (otherValue) {
            return compareBigNumbers(this.roundedNumber, otherValue.roundedNumber);
        };
        NumberDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new NumberDataValue(value, this.config, this.constraintData);
        };
        NumberDataValue.prototype.parseInput = function (inputValue) {
            return new NumberDataValue(inputValue, this.config, this.constraintData, inputValue);
        };
        NumberDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new NumberDataValue(value.value, _this.config, _this.constraintData); });
            var otherBigNumbers = dataValues.map(function (value) { return value.roundedNumber; });
            var otherValues = dataValues.map(function (value) { return value.parsedValue; });
            return dataValuesMeetConditionByNumber(condition, this.roundedNumber, otherBigNumbers, this.parsedValue, otherValues);
        };
        NumberDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        NumberDataValue.prototype.valueByCondition = function (condition, values) {
            return valueByConditionNumber(this, condition, values, '19');
        };
        return NumberDataValue;
    }());
    function parseNumbroConfig(config, overrideConfig) {
        if (!config && !overrideConfig) {
            return {};
        }
        var numbroConfig = {};
        if ((overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.forceSign) || config.forceSign) {
            numbroConfig.forceSign = true;
        }
        if ((overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.separated) || config.separated) {
            numbroConfig.thousandSeparated = true;
            numbroConfig.spaceSeparated = true;
        }
        if ((overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.currency) || config.currency) {
            numbroConfig.spaceSeparatedCurrency = numbro_min.languageData().currencyFormat.spaceSeparatedCurrency || false;
        }
        numbroConfig.average = (overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.compact) || config.compact || false;
        if ((overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.negative) || config.negative) {
            numbroConfig.negative = 'parenthesis';
        }
        var decimals = isNotNullOrUndefined(overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.decimals) ? overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.decimals : config.decimals;
        if (isNumeric(decimals)) {
            numbroConfig.mantissa = decimals;
            numbroConfig.trimMantissa = isNumeric(overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.decimals);
        }
        return numbroConfig;
    }
    function checkNumberRange(n, config) {
        var passed = true;
        if (config === null || config === void 0 ? void 0 : config.minValue) {
            passed = n.gte(config.minValue);
        }
        if (config === null || config === void 0 ? void 0 : config.maxValue) {
            passed = passed && n.lte(config.maxValue);
        }
        return passed;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var PercentageDataValue = /** @class */ (function () {
        function PercentageDataValue(value, config, inputValue) {
            this.value = value;
            this.config = config;
            this.inputValue = inputValue;
            var containerPercentageSign = String(value).trim().endsWith('%');
            this.parsedValue = containerPercentageSign || isNotNullOrUndefined(inputValue) ? parseInputValue$1(value) : value;
            this.number = convertPercentageToBig(this.parsedValue);
            this.roundedNumber = roundBigNumber(this.number, config === null || config === void 0 ? void 0 : config.decimals);
        }
        PercentageDataValue.prototype.format = function (overrideConfig, suffix) {
            var _a;
            if (suffix === void 0) { suffix = '%'; }
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            var bigNumber = overrideConfig
                ? roundBigNumber(this.number, (overrideConfig === null || overrideConfig === void 0 ? void 0 : overrideConfig.decimals) || ((_a = this.config) === null || _a === void 0 ? void 0 : _a.decimals))
                : this.roundedNumber;
            if (!bigNumber) {
                return formatUnknownDataValue(this.value);
            }
            return decimalStoreToUser(bigNumber.toString()) + suffix;
        };
        PercentageDataValue.prototype.preview = function (overrideConfig) {
            return this.format(overrideConfig);
        };
        PercentageDataValue.prototype.title = function (overrideConfig) {
            return unescapeHtml(this.format(overrideConfig));
        };
        PercentageDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format(null, ''));
        };
        PercentageDataValue.prototype.serialize = function () {
            var _a;
            if (!this.number) {
                return this.value ? escapeHtml(String(this.value)) : '';
            }
            var decimals = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.decimals) >= 0 ? this.config.decimals + 2 : undefined;
            return convertBigToNumberSafely(this.number.div(100), decimals);
        };
        PercentageDataValue.prototype.isValid = function (ignoreConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.copy(this.inputValue).isValid(ignoreConfig);
            }
            if (!this.value) {
                return true;
            }
            return Boolean(this.number && (ignoreConfig || this.isPercentageWithinRange()));
        };
        PercentageDataValue.prototype.isPercentageWithinRange = function () {
            if (!this.config) {
                return true;
            }
            var _a = this.config, minValue = _a.minValue, maxValue = _a.maxValue;
            if ((minValue || minValue === 0) && this.compareTo(this.copy(minValue)) < 0) {
                return false;
            }
            return !((maxValue || maxValue === 0) && this.compareTo(this.copy(maxValue)) > 0);
        };
        PercentageDataValue.prototype.increment = function () {
            return ((this.number && new PercentageDataValue(this.number.add(1).div(100).toFixed(), this.config)) || this.copy());
        };
        PercentageDataValue.prototype.decrement = function () {
            return ((this.number && new PercentageDataValue(this.number.sub(1).div(100).toFixed(), this.config)) || this.copy());
        };
        PercentageDataValue.prototype.compareTo = function (otherValue) {
            return compareBigNumbers(this.roundedNumber, otherValue.roundedNumber);
        };
        PercentageDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new PercentageDataValue(value, this.config);
        };
        PercentageDataValue.prototype.parseInput = function (inputValue) {
            return new PercentageDataValue(inputValue, this.config, inputValue);
        };
        PercentageDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new PercentageDataValue(value.value, _this.config); });
            var otherBigNumbers = dataValues.map(function (value) { return value.roundedNumber; });
            var otherValues = dataValues.map(function (value) { return value.parsedValue; });
            return dataValuesMeetConditionByNumber(condition, this.roundedNumber, otherBigNumbers, this.parsedValue, otherValues);
        };
        PercentageDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        PercentageDataValue.prototype.valueByCondition = function (condition, values) {
            return valueByConditionNumber(this, condition, values, '0.19', 100);
        };
        return PercentageDataValue;
    }());
    function parseInputValue$1(inputValue) {
        var text = decimalUserToStore(String(inputValue).trim());
        if (text && text.endsWith('%')) {
            var prefix = text.slice(0, -1);
            if (isNumeric(prefix)) {
                return parseNumericPercentageInput(prefix, inputValue);
            }
        }
        else {
            if (text !== undefined && text.length === 0) {
                return '';
            }
            if (isNumeric(text)) {
                return parseNumericPercentageInput(text);
            }
        }
        return String(inputValue);
    }
    function parseNumericPercentageInput(value, defaultValue) {
        try {
            return createBigWithoutTrailingZeros(moveDecimalComma(toNumber(value), -2)).toString();
        }
        catch (e) {
            return defaultValue !== undefined ? defaultValue : value;
        }
    }
    function moveDecimalComma(value, offset) {
        var big = new Big(value);
        big.e = big.e + offset;
        return big.toString();
    }
    function convertPercentageToBig(value, decimals) {
        var big = convertToBig(value);
        if (!big) {
            return null;
        }
        big.e = big.e + 2;
        // prevents extra zeroes after moving the decimal point
        if (big.eq('0')) {
            big = new Big('0');
        }
        if (decimals >= 0) {
            big = big.round(decimals);
        }
        return createBigWithoutTrailingZeros(big);
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var SelectDataValue = /** @class */ (function () {
        function SelectDataValue(value, config, constraintData, inputValue) {
            this.value = value;
            this.config = config;
            this.constraintData = constraintData;
            this.inputValue = inputValue;
            this.options = findOptionsByValue(config, value);
        }
        SelectDataValue.prototype.format = function () {
            var _this = this;
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if (this.options.length) {
                return this.options
                    .map(function (option) { var _a; return (((_a = _this.config) === null || _a === void 0 ? void 0 : _a.displayValues) ? option.displayValue || option.value : option.value); })
                    .join(', ');
            }
            return formatUnknownDataValue(this.value);
        };
        SelectDataValue.prototype.preview = function () {
            return this.format();
        };
        SelectDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        SelectDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        SelectDataValue.prototype.serialize = function () {
            var _a;
            if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.multi) {
                return this.options.map(function (option) { return option.value; });
            }
            return this.options.length > 0 ? this.options[0].value : null;
        };
        SelectDataValue.prototype.isValid = function (ignoreConfig) {
            var _this = this;
            if (isNotNullOrUndefined(this.inputValue)) {
                return true;
            }
            return !this.value || this.options.every(function (option) { return _this.config.options.some(function (o) { return o.value === option.value; }); });
        };
        SelectDataValue.prototype.increment = function () {
            if (this.options.length === 0) {
                return null;
            }
            var nextOption = this.shiftOption(1, this.options[0]);
            return new SelectDataValue(nextOption.value, this.config, this.constraintData);
        };
        SelectDataValue.prototype.decrement = function () {
            if (this.options.length === 0) {
                return null;
            }
            var previousOption = this.shiftOption(-1, this.options[0]);
            return new SelectDataValue(previousOption.value, this.config, this.constraintData);
        };
        SelectDataValue.prototype.compareTo = function (otherValue) {
            var _this = this;
            if (this.options.length > 1 || otherValue.options.length > 1) {
                return 0;
            }
            var options = this.config.options;
            var thisIndex = options.findIndex(function (option) { var _a; return ((_a = _this.options[0]) === null || _a === void 0 ? void 0 : _a.value) === option.value; });
            var otherIndex = options.findIndex(function (option) { var _a; return ((_a = otherValue.options[0]) === null || _a === void 0 ? void 0 : _a.value) === option.value; });
            return thisIndex - otherIndex;
        };
        SelectDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new SelectDataValue(value, this.config, this.constraintData);
        };
        SelectDataValue.prototype.parseInput = function (inputValue) {
            return new SelectDataValue(this.value, this.config, this.constraintData, inputValue);
        };
        SelectDataValue.prototype.shiftOption = function (indexDelta, option) {
            var options = this.config.options;
            var index = options.indexOf(option);
            var nextIndex = (index + indexDelta) % options.length;
            return options[nextIndex];
        };
        SelectDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new SelectDataValue(value.value, _this.config, _this.constraintData); });
            var otherOptions = (dataValues.length > 0 && dataValues[0].options) || [];
            switch (condition) {
                case exports.ConditionType.HasSome:
                case exports.ConditionType.Equals:
                    return this.options.some(function (option) { return otherOptions.some(function (otherOption) { return otherOption.value === option.value; }); });
                case exports.ConditionType.HasNoneOf:
                case exports.ConditionType.NotEquals:
                    return this.options.every(function (option) { return otherOptions.every(function (otherOption) { return otherOption.value !== option.value; }); });
                case exports.ConditionType.In:
                    return (this.options.length > 0 &&
                        this.options.every(function (option) { return otherOptions.some(function (otherOption) { return otherOption.value === option.value; }); }));
                case exports.ConditionType.HasAll:
                    return (arrayIntersection(otherOptions.map(function (o) { return o.value; }), this.options.map(function (o) { return o.value; })).length === otherOptions.length);
                case exports.ConditionType.IsEmpty:
                    return this.options.length === 0 && this.format().trim().length === 0;
                case exports.ConditionType.NotEmpty:
                    return this.options.length > 0 || this.format().trim().length > 0;
                default:
                    return false;
            }
        };
        SelectDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        SelectDataValue.prototype.valueByCondition = function (condition, values) {
            var _this = this;
            var _a, _b, _c, _d;
            var dataValues = (values || []).map(function (value) { return new SelectDataValue(value.value, _this.config, _this.constraintData); });
            var otherOptions = (dataValues.length > 0 && dataValues[0].options) || [];
            switch (condition) {
                case exports.ConditionType.HasSome:
                case exports.ConditionType.Equals:
                case exports.ConditionType.In:
                    return otherOptions[0].value;
                case exports.ConditionType.HasAll:
                    return values[0].value;
                case exports.ConditionType.HasNoneOf:
                case exports.ConditionType.NotEquals:
                    var noneOptions = (((_a = this.config) === null || _a === void 0 ? void 0 : _a.options) || []).filter(function (option) { return !otherOptions.some(function (otherOption) { return otherOption.value === option.value; }); });
                    return noneOptions[0] && noneOptions[0].value;
                case exports.ConditionType.IsEmpty:
                    return '';
                case exports.ConditionType.NotEmpty:
                    return (_d = (_c = (_b = this.config) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.value;
                default:
                    return null;
            }
        };
        return SelectDataValue;
    }());
    function findOptionsByValue(config, value) {
        var options = (config === null || config === void 0 ? void 0 : config.options) || [];
        var values = (isArray$1(value) ? value : [value]).filter(function (val) { return isNotNullOrUndefined(val) && String(val).trim(); });
        return values
            .map(function (val) {
                var option = options.find(function (opt) { return String(opt.value) === String(val); });
                if (option) {
                    return __assign(__assign({}, option), { displayValue: (config === null || config === void 0 ? void 0 : config.displayValues) ? option.displayValue : option.value });
                }
                return { value: val, displayValue: val };
            })
            .filter(function (option) { return !!option; });
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var TextDataValue = /** @class */ (function () {
        function TextDataValue(value, config, inputValue) {
            this.value = value;
            this.config = config;
            this.inputValue = inputValue;
        }
        TextDataValue.prototype.format = function () {
            var _a;
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if (typeof this.value !== 'string') {
                return formatUnknownDataValue(this.value, true);
            }
            return transformTextBasedOnCaseStyle(this.value, (_a = this.config) === null || _a === void 0 ? void 0 : _a.caseStyle);
        };
        TextDataValue.prototype.preview = function () {
            return stripTextHtmlTags(this.format());
        };
        TextDataValue.prototype.title = function () {
            return unescapeHtml(stripTextHtmlTags(this.format(), false));
        };
        TextDataValue.prototype.editValue = function () {
            return this.format();
        };
        TextDataValue.prototype.serialize = function () {
            var formattedValue = this.format();
            if (numberOfPTags(formattedValue) === 1 && numberOfTags(formattedValue) === 1) {
                return stripTextHtmlTags(formattedValue, false);
            }
            return formattedValue;
        };
        TextDataValue.prototype.isValid = function (ignoreConfig) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.copy(this.inputValue).isValid(ignoreConfig);
            }
            if (!this.value || ignoreConfig) {
                return true;
            }
            if (this.config) {
                var strippedValue = stripTextHtmlTags(this.format(), false);
                if (this.config.minLength && strippedValue.length < this.config.minLength) {
                    return false;
                }
                if (this.config.maxLength && strippedValue.length > this.config.maxLength) {
                    return false;
                }
            }
            return true;
        };
        TextDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        TextDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        TextDataValue.prototype.compareTo = function (otherValue) {
            return stripTextHtmlTags(this.format(), false).localeCompare(stripTextHtmlTags(otherValue.format(), false));
        };
        TextDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new TextDataValue(value, this.config);
        };
        TextDataValue.prototype.parseInput = function (inputValue) {
            return new TextDataValue(inputValue, this.config, replaceNbspFromString(inputValue));
        };
        TextDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = (values || []).map(function (value) { return new TextDataValue(value.value, _this.config); });
            var formattedValue = stripTextHtmlTags(this.format(), false).toLowerCase().trim();
            var otherFormattedValues = dataValues.map(function (dataValue) {
                return stripTextHtmlTags(dataValue.format(), false).toLowerCase().trim();
            });
            return dataValuesMeetConditionByText(condition, formattedValue, otherFormattedValues);
        };
        TextDataValue.prototype.meetFullTexts = function (fulltexts) {
            var formattedValue = removeAccentFromString(stripTextHtmlTags(this.format(), false).trim());
            return (fulltexts || [])
                .map(function (fulltext) { return stripTextHtmlTags(fulltext, false).toLowerCase().trim(); })
                .every(function (fulltext) { return formattedValue.includes(fulltext); });
        };
        TextDataValue.prototype.valueByCondition = function (condition, values) {
            return valueByConditionText(condition, (values === null || values === void 0 ? void 0 : values[0]) && stripTextHtmlTags(values[0].value, false));
        };
        return TextDataValue;
    }());
    function numberOfTags(value) {
        var match = value.match(/<([a-z]+)([0-9]*)(?=[\s>])(?:[^>=]|='[^']*'|="[^"]*"|=[^'"\s]*)*\s?\/?>/g);
        return match ? match.length : 0;
    }
    function numberOfPTags(value) {
        var match = value.match(/<p.*?>.+?<\/p>/g);
        return match ? match.length : 0;
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var UnknownDataValue = /** @class */ (function () {
        function UnknownDataValue(value, inputValue) {
            this.value = value;
            this.inputValue = inputValue;
            this.config = {};
        }
        UnknownDataValue.prototype.format = function () {
            if (isNotNullOrUndefined(this.inputValue)) {
                return String(this.inputValue);
            }
            return formatUnknownDataValue(this.value);
        };
        UnknownDataValue.prototype.preview = function () {
            return this.format();
        };
        UnknownDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        UnknownDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        UnknownDataValue.prototype.serialize = function () {
            return escapeHtml(this.value);
        };
        UnknownDataValue.prototype.isValid = function (ignoreConfig) {
            return true;
        };
        UnknownDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        UnknownDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        UnknownDataValue.prototype.compareTo = function (otherValue) {
            var aValue = isNumeric(this.value) ? toNumber(this.value) : this.value;
            var bValue = isNumeric(otherValue.value) ? toNumber(otherValue.value) : otherValue.value;
            if (aValue > bValue) {
                return 1;
            }
            else if (bValue > aValue) {
                return -1;
            }
            return 0;
        };
        UnknownDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new UnknownDataValue(value);
        };
        UnknownDataValue.prototype.parseInput = function (inputValue) {
            return new UnknownDataValue(inputValue);
        };
        UnknownDataValue.prototype.meetCondition = function (condition, values) {
            var dataValues = (values || []).map(function (value) { return new UnknownDataValue(value.value); });
            var formattedValue = this.format().toLowerCase().trim();
            var otherFormattedValues = dataValues.map(function (dataValue) { return dataValue.format().toLowerCase().trim(); });
            return dataValuesMeetConditionByText(condition, formattedValue, otherFormattedValues);
        };
        UnknownDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        UnknownDataValue.prototype.valueByCondition = function (condition, values) {
            return valueByConditionText(condition, values[0] && values[0].value);
        };
        return UnknownDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var UserDataValue = /** @class */ (function () {
        function UserDataValue(value, config, constraintData, inputValue) {
            this.value = value;
            this.config = config;
            this.constraintData = constraintData;
            this.inputValue = inputValue;
            this.users = this.createUsers();
        }
        UserDataValue.prototype.createUsers = function () {
            var _a;
            var users = ((_a = this.constraintData) === null || _a === void 0 ? void 0 : _a.users) || [];
            var userValues = (isArray$1(this.value) ? this.value : [this.value]).filter(function (val) { return isNotNullOrUndefined(val) && String(val).trim(); });
            return userValues
                .map(function (userValue) {
                    var user = users.find(function (u) { return u.email === userValue; });
                    if (user) {
                        return user;
                    }
                    return { email: String(userValue), name: String(userValue), groupsMap: {} };
                })
                .filter(function (user) { return !!user; });
        };
        UserDataValue.prototype.format = function (preferEmail) {
            if (isNotNullOrUndefined(this.inputValue)) {
                return this.inputValue;
            }
            if (this.users.length) {
                return this.users.map(function (user) { return (preferEmail ? user.email || user.name : user.name || user.email); }).join(', ');
            }
            return formatUnknownDataValue(this.value);
        };
        UserDataValue.prototype.preview = function () {
            return this.format();
        };
        UserDataValue.prototype.title = function () {
            return unescapeHtml(this.format());
        };
        UserDataValue.prototype.editValue = function () {
            return unescapeHtml(this.format());
        };
        UserDataValue.prototype.serialize = function () {
            var _a, _b, _c;
            if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.multi) {
                return this.users.map(function (user) { return user.email; });
            }
            return ((_c = (_b = this.users) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.email) || null;
        };
        UserDataValue.prototype.isValid = function (ignoreConfig) {
            var _this = this;
            if (isNotNullOrUndefined(this.inputValue)) {
                return true;
            }
            return !this.value || this.users.every(function (user) { return _this.isUserValid(user); });
        };
        UserDataValue.prototype.isUserValid = function (user) {
            var _a, _b, _c;
            if ((_b = (_a = this.constraintData) === null || _a === void 0 ? void 0 : _a.users) === null || _b === void 0 ? void 0 : _b.some(function (u) { return u.email === user.email; })) {
                return true;
            }
            return ((_c = this.config) === null || _c === void 0 ? void 0 : _c.externalUsers) && isEmailValid(user.email);
        };
        UserDataValue.prototype.increment = function () {
            return undefined; // not supported
        };
        UserDataValue.prototype.decrement = function () {
            return undefined; // not supported
        };
        UserDataValue.prototype.compareTo = function (otherValue) {
            if (this.users.length > 1 || otherValue.users.length > 1) {
                return 0;
            }
            if (this.users[0] && otherValue.users[0]) {
                return (this.users[0].name || this.users[0].email).localeCompare(otherValue.users[0].name || otherValue.users[0].email);
            }
            return String(this.value).localeCompare(String(otherValue.value));
        };
        UserDataValue.prototype.copy = function (newValue) {
            var value = newValue !== undefined ? newValue : this.value;
            return new UserDataValue(value, this.config, this.constraintData);
        };
        UserDataValue.prototype.parseInput = function (inputValue) {
            return new UserDataValue(inputValue, this.config, this.constraintData, inputValue);
        };
        UserDataValue.prototype.meetCondition = function (condition, values) {
            var _this = this;
            var dataValues = values === null || values === void 0 ? void 0 : values.map(function (value) { return _this.mapQueryConditionValue(value); });
            var otherUsers = (dataValues.length > 0 && dataValues[0].users) || [];
            switch (condition) {
                case exports.ConditionType.HasSome:
                case exports.ConditionType.Equals:
                    return this.users.some(function (option) { return (otherUsers || []).some(function (otherOption) { return otherOption.email === option.email; }); });
                case exports.ConditionType.HasNoneOf:
                case exports.ConditionType.NotEquals:
                    return this.users.every(function (option) { return (otherUsers || []).every(function (otherOption) { return otherOption.email !== option.email; }); });
                case exports.ConditionType.In:
                    return (this.users.length > 0 &&
                        this.users.every(function (user) { return otherUsers.some(function (otherOption) { return otherOption.email === user.email; }); }));
                case exports.ConditionType.HasAll:
                    return (arrayIntersection(otherUsers.map(function (o) { return o.email; }), this.users.map(function (o) { return o.email; })).length === otherUsers.length);
                case exports.ConditionType.IsEmpty:
                    return this.users.length === 0 && this.format().trim().length === 0;
                case exports.ConditionType.NotEmpty:
                    return this.users.length > 0 || this.format().trim().length > 0;
                default:
                    return false;
            }
        };
        UserDataValue.prototype.mapQueryConditionValue = function (value) {
            var _a;
            if (value.type === exports.UserConstraintConditionValue.CurrentUser) {
                var currentUser = (_a = this.constraintData) === null || _a === void 0 ? void 0 : _a.currentUser;
                return new UserDataValue(currentUser === null || currentUser === void 0 ? void 0 : currentUser.email, this.config, this.constraintData);
            }
            return new UserDataValue(value.value, this.config, this.constraintData);
        };
        UserDataValue.prototype.meetFullTexts = function (fulltexts) {
            return valueMeetFulltexts(this.format(), fulltexts);
        };
        UserDataValue.prototype.valueByCondition = function (condition, values) {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g;
            var dataValues = values === null || values === void 0 ? void 0 : values.map(function (value) { return _this.mapQueryConditionValue(value); });
            var otherUsers = ((_a = dataValues === null || dataValues === void 0 ? void 0 : dataValues[0]) === null || _a === void 0 ? void 0 : _a.users) || [];
            switch (condition) {
                case exports.ConditionType.HasSome:
                case exports.ConditionType.Equals:
                case exports.ConditionType.In:
                    return (_b = otherUsers === null || otherUsers === void 0 ? void 0 : otherUsers[0]) === null || _b === void 0 ? void 0 : _b.email;
                case exports.ConditionType.HasAll:
                    return values[0].value;
                case exports.ConditionType.HasNoneOf:
                case exports.ConditionType.NotEquals:
                    var noneOptions = (((_c = this.constraintData) === null || _c === void 0 ? void 0 : _c.users) || []).filter(function (user) { return !otherUsers.some(function (otherUser) { return otherUser.email === user.email; }); });
                    return (_d = noneOptions === null || noneOptions === void 0 ? void 0 : noneOptions[0]) === null || _d === void 0 ? void 0 : _d.email;
                case exports.ConditionType.IsEmpty:
                    return '';
                case exports.ConditionType.NotEmpty:
                    return (_g = (_f = (_e = this.constraintData) === null || _e === void 0 ? void 0 : _e.users) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.email;
                default:
                    return null;
            }
        };
        return UserDataValue;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var FilesConstraint = /** @class */ (function () {
        function FilesConstraint() {
            this.type = exports.ConstraintType.Files;
            this.config = {};
            this.isTextRepresentation = false;
        }
        FilesConstraint.prototype.createDataValue = function (value) {
            return new FilesDataValue(value, this.config);
        };
        FilesConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new FilesDataValue(value, this.config);
        };
        FilesConstraint.prototype.conditions = function () {
            return [exports.ConditionType.IsEmpty, exports.ConditionType.NotEmpty];
        };
        FilesConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        FilesConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        FilesConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        FilesConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        FilesConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        FilesConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        FilesConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        FilesConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return FilesConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var AddressConstraint = /** @class */ (function () {
        function AddressConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Address;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        AddressConstraint.prototype.createDataValue = function (value, constraintData) {
            return new AddressDataValue(value, this.config, constraintData);
        };
        AddressConstraint.prototype.createInputDataValue = function (inputValue, value, constraintData) {
            return new AddressDataValue(value, this.config, constraintData, inputValue);
        };
        AddressConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.Contains,
                exports.ConditionType.NotContains,
                exports.ConditionType.StartsWith,
                exports.ConditionType.EndsWith,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        AddressConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        AddressConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        AddressConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        AddressConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        AddressConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        AddressConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        AddressConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        AddressConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return AddressConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var BooleanConstraint = /** @class */ (function () {
        function BooleanConstraint() {
            this.type = exports.ConstraintType.Boolean;
            this.config = {};
            this.isDirectlyEditable = true;
            this.allowEditFunction = true;
        }
        BooleanConstraint.prototype.createDataValue = function (value) {
            return new BooleanDataValue(value);
        };
        BooleanConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new BooleanDataValue(value);
        };
        BooleanConstraint.prototype.conditions = function () {
            return [exports.ConditionType.Equals, exports.ConditionType.NotEquals];
        };
        BooleanConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        BooleanConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        BooleanConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        BooleanConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        BooleanConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        BooleanConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        BooleanConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        BooleanConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return BooleanConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var ActionConstraint = /** @class */ (function () {
        function ActionConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Action;
            this.isDirectlyEditable = true;
        }
        ActionConstraint.prototype.createDataValue = function (value) {
            return new ActionDataValue(this.config);
        };
        ActionConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new ActionDataValue(this.config);
        };
        ActionConstraint.prototype.conditions = function () {
            return [exports.ConditionType.Enabled, exports.ConditionType.Disabled];
        };
        ActionConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        ActionConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        ActionConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        ActionConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        ActionConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        ActionConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        ActionConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        ActionConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return ActionConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var ColorConstraint = /** @class */ (function () {
        function ColorConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Color;
            this.allowEditFunction = true;
        }
        ColorConstraint.prototype.createDataValue = function (value) {
            return new ColorDataValue(value, this.config);
        };
        ColorConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new ColorDataValue(value, this.config, inputValue);
        };
        ColorConstraint.prototype.conditions = function () {
            return [exports.ConditionType.Equals, exports.ConditionType.NotEquals, exports.ConditionType.IsEmpty, exports.ConditionType.NotEmpty];
        };
        ColorConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        ColorConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        ColorConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        ColorConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        ColorConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        ColorConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        ColorConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        ColorConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return ColorConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var CoordinatesConstraint = /** @class */ (function () {
        function CoordinatesConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Coordinates;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        CoordinatesConstraint.prototype.createDataValue = function (value) {
            return new CoordinatesDataValue(value, this.config);
        };
        CoordinatesConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new CoordinatesDataValue(value, this.config, inputValue);
        };
        CoordinatesConstraint.prototype.conditions = function () {
            return [exports.ConditionType.Equals, exports.ConditionType.NotEquals, exports.ConditionType.IsEmpty, exports.ConditionType.NotEmpty];
        };
        CoordinatesConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        CoordinatesConstraint.prototype.max = function (values, onlyNumeric) {
            var _a;
            return (_a = this.sortedValues(values, true)[0]) === null || _a === void 0 ? void 0 : _a.serialize();
        };
        CoordinatesConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        CoordinatesConstraint.prototype.min = function (values, onlyNumeric) {
            var _a;
            return (_a = this.sortedValues(values)[0]) === null || _a === void 0 ? void 0 : _a.serialize();
        };
        CoordinatesConstraint.prototype.sortedValues = function (values, desc) {
            var _this = this;
            return values.map(function (value) { return _this.createDataValue(value); }).sort(function (a, b) { return a.compareTo(b) * (desc ? -1 : 1); });
        };
        CoordinatesConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        CoordinatesConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        CoordinatesConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        CoordinatesConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return CoordinatesConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var DateTimeConstraint = /** @class */ (function () {
        function DateTimeConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.DateTime;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        DateTimeConstraint.prototype.createDataValue = function (value) {
            return new DateTimeDataValue(value, this.config);
        };
        DateTimeConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new DateTimeDataValue(value, this.config, inputValue);
        };
        DateTimeConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.GreaterThan,
                exports.ConditionType.LowerThan,
                exports.ConditionType.GreaterThanEquals,
                exports.ConditionType.LowerThanEquals,
                exports.ConditionType.Between,
                exports.ConditionType.NotBetween,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        DateTimeConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        DateTimeConstraint.prototype.max = function (values) {
            var _a;
            return (_a = this.sortedValues(values, true)[0]) === null || _a === void 0 ? void 0 : _a.serialize();
        };
        DateTimeConstraint.prototype.sortedValues = function (values, desc) {
            var _this = this;
            return values.map(function (value) { return _this.createDataValue(value); }).sort(function (a, b) { return a.compareTo(b) * (desc ? -1 : 1); });
        };
        DateTimeConstraint.prototype.median = function (values, onlyNumeric) {
            // TODO
            return medianInAnyValues(values, onlyNumeric);
        };
        DateTimeConstraint.prototype.min = function (values, onlyNumeric) {
            var _a;
            return (_a = this.sortedValues(values)[0]) === null || _a === void 0 ? void 0 : _a.serialize();
        };
        DateTimeConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        DateTimeConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        DateTimeConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        DateTimeConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return DateTimeConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var DurationConstraint = /** @class */ (function () {
        function DurationConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Duration;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        DurationConstraint.prototype.createDataValue = function (value, constraintData) {
            return new DurationDataValue(value, this.config, constraintData);
        };
        DurationConstraint.prototype.createInputDataValue = function (inputValue, value, constraintData) {
            return new DurationDataValue(value, this.config, constraintData, inputValue);
        };
        DurationConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.GreaterThan,
                exports.ConditionType.LowerThan,
                exports.ConditionType.GreaterThanEquals,
                exports.ConditionType.LowerThanEquals,
                exports.ConditionType.Between,
                exports.ConditionType.NotBetween,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        DurationConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgNumericValues(values, onlyNumeric);
        };
        DurationConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInNumericValues(values, onlyNumeric);
        };
        DurationConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInNumericValues(values, onlyNumeric);
        };
        DurationConstraint.prototype.min = function (values, onlyNumeric) {
            return minInNumericValues(values, onlyNumeric);
        };
        DurationConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumNumericValues(values, onlyNumeric);
        };
        DurationConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        DurationConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        DurationConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return DurationConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var NumberConstraint = /** @class */ (function () {
        function NumberConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Number;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        NumberConstraint.prototype.createDataValue = function (value, constraintData) {
            return new NumberDataValue(value, this.config, constraintData);
        };
        NumberConstraint.prototype.createInputDataValue = function (inputValue, value, constraintData) {
            return new NumberDataValue(value, this.config, constraintData, inputValue);
        };
        NumberConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.GreaterThan,
                exports.ConditionType.LowerThan,
                exports.ConditionType.GreaterThanEquals,
                exports.ConditionType.LowerThanEquals,
                exports.ConditionType.Between,
                exports.ConditionType.NotBetween,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        NumberConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgNumericValues(values, onlyNumeric);
        };
        NumberConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInNumericValues(values, onlyNumeric);
        };
        NumberConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInNumericValues(values, onlyNumeric);
        };
        NumberConstraint.prototype.min = function (values, onlyNumeric) {
            return minInNumericValues(values, onlyNumeric);
        };
        NumberConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumNumericValues(values, onlyNumeric);
        };
        NumberConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        NumberConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        NumberConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return NumberConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var PercentageConstraint = /** @class */ (function () {
        function PercentageConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Percentage;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        PercentageConstraint.prototype.createDataValue = function (value) {
            return new PercentageDataValue(value, this.config);
        };
        PercentageConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new PercentageDataValue(value, this.config, inputValue);
        };
        PercentageConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.GreaterThan,
                exports.ConditionType.LowerThan,
                exports.ConditionType.GreaterThanEquals,
                exports.ConditionType.LowerThanEquals,
                exports.ConditionType.Between,
                exports.ConditionType.NotBetween,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        PercentageConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgNumericValues(values, onlyNumeric);
        };
        PercentageConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInNumericValues(values, onlyNumeric);
        };
        PercentageConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInNumericValues(values, onlyNumeric);
        };
        PercentageConstraint.prototype.min = function (values, onlyNumeric) {
            return minInNumericValues(values, onlyNumeric);
        };
        PercentageConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumNumericValues(values, onlyNumeric);
        };
        PercentageConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        PercentageConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        PercentageConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return PercentageConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var SelectConstraint = /** @class */ (function () {
        function SelectConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Select;
            this.allowEditFunction = true;
        }
        SelectConstraint.prototype.createDataValue = function (value, constraintData) {
            return new SelectDataValue(value, this.config, constraintData);
        };
        SelectConstraint.prototype.createInputDataValue = function (inputValue, value, constraintData) {
            return new SelectDataValue(value, this.config, constraintData, inputValue);
        };
        SelectConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.HasSome,
                exports.ConditionType.HasNoneOf,
                exports.ConditionType.In,
                exports.ConditionType.HasAll,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        SelectConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        SelectConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        SelectConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        SelectConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        SelectConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        SelectConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        SelectConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        SelectConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            var _a, _b, _c;
            var invalidValues = new Set();
            var validValues = new Set(((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.map(function (option) { return option.value; })) || []);
            for (var i = 0; i < (objects === null || objects === void 0 ? void 0 : objects.length); i++) {
                var value = (_c = objects[i].data) === null || _c === void 0 ? void 0 : _c[attributeId];
                if (isNotNullOrUndefined(value)) {
                    var values = isArray$1(value) ? value : [value];
                    for (var j = 0; j < values.length; j++) {
                        if (!validValues.has(values[j])) {
                            invalidValues.add(values[j]);
                        }
                    }
                }
            }
            return invalidValues;
        };
        return SelectConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var TextConstraint = /** @class */ (function () {
        function TextConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Text;
            this.isTextRepresentation = true;
            this.allowEditFunction = true;
        }
        TextConstraint.prototype.createDataValue = function (value) {
            return new TextDataValue(value, this.config);
        };
        TextConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new TextDataValue(value, this.config, inputValue);
        };
        TextConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.Contains,
                exports.ConditionType.NotContains,
                exports.ConditionType.StartsWith,
                exports.ConditionType.EndsWith,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        TextConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        TextConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        TextConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        TextConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        TextConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        TextConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        TextConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        TextConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return TextConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var UserConstraint = /** @class */ (function () {
        function UserConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.User;
            this.allowEditFunction = true;
        }
        UserConstraint.prototype.createDataValue = function (value, constraintData) {
            return new UserDataValue(value, this.config, constraintData);
        };
        UserConstraint.prototype.createInputDataValue = function (inputValue, value, constraintData) {
            return new UserDataValue(value, this.config, constraintData, inputValue);
        };
        UserConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.HasSome,
                exports.ConditionType.HasNoneOf,
                exports.ConditionType.In,
                exports.ConditionType.HasAll,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        UserConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        UserConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        UserConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        UserConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        UserConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        UserConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        UserConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        UserConstraint.prototype.filterInvalidValues = function (objects, attributeId, constraintData) {
            var _a, _b;
            var invalidValues = new Set();
            var validValues = new Set(((_a = constraintData === null || constraintData === void 0 ? void 0 : constraintData.users) === null || _a === void 0 ? void 0 : _a.map(function (option) { return option.email; })) || []);
            for (var i = 0; i < (objects === null || objects === void 0 ? void 0 : objects.length); i++) {
                var value = (_b = objects[i].data) === null || _b === void 0 ? void 0 : _b[attributeId];
                if (isNotNullOrUndefined(value)) {
                    var values = isArray$1(value) ? value : [value];
                    for (var j = 0; j < values.length; j++) {
                        if (!validValues.has(values[j])) {
                            invalidValues.add(values[j]);
                        }
                    }
                }
            }
            return invalidValues;
        };
        return UserConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var LinkConstraint = /** @class */ (function () {
        function LinkConstraint(config) {
            this.config = config;
            this.type = exports.ConstraintType.Link;
            this.allowEditFunction = true;
        }
        LinkConstraint.prototype.createDataValue = function (value) {
            return new LinkDataValue(value, this.config);
        };
        LinkConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new LinkDataValue(value, this.config, inputValue);
        };
        LinkConstraint.prototype.conditions = function () {
            return [exports.ConditionType.Equals, exports.ConditionType.NotEquals, exports.ConditionType.IsEmpty, exports.ConditionType.NotEmpty];
        };
        LinkConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        LinkConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        LinkConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        LinkConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        LinkConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        LinkConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        LinkConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        LinkConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return LinkConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    var UnknownConstraint = /** @class */ (function () {
        function UnknownConstraint() {
            this.type = exports.ConstraintType.Unknown;
            this.config = {};
            this.allowEditFunction = true;
            this.isTextRepresentation = true;
        }
        UnknownConstraint.prototype.createDataValue = function (value) {
            return new UnknownDataValue(value);
        };
        UnknownConstraint.prototype.createInputDataValue = function (inputValue, value) {
            return new UnknownDataValue(value, inputValue);
        };
        UnknownConstraint.prototype.conditions = function () {
            return [
                exports.ConditionType.Equals,
                exports.ConditionType.NotEquals,
                exports.ConditionType.Contains,
                exports.ConditionType.NotContains,
                exports.ConditionType.StartsWith,
                exports.ConditionType.EndsWith,
                exports.ConditionType.IsEmpty,
                exports.ConditionType.NotEmpty,
            ];
        };
        UnknownConstraint.prototype.avg = function (values, onlyNumeric) {
            return avgAnyValues(values, onlyNumeric);
        };
        UnknownConstraint.prototype.max = function (values, onlyNumeric) {
            return maxInAnyValues(values, onlyNumeric);
        };
        UnknownConstraint.prototype.median = function (values, onlyNumeric) {
            return medianInAnyValues(values, onlyNumeric);
        };
        UnknownConstraint.prototype.min = function (values, onlyNumeric) {
            return minInAnyValues(values, onlyNumeric);
        };
        UnknownConstraint.prototype.sum = function (values, onlyNumeric) {
            return sumAnyValues(values, onlyNumeric);
        };
        UnknownConstraint.prototype.unique = function (values) {
            return uniqueValuesCount(values);
        };
        UnknownConstraint.prototype.count = function (values) {
            return countValues(values);
        };
        UnknownConstraint.prototype.filterInvalidValues = function (objects, attributeId) {
            return new Set();
        };
        return UnknownConstraint;
    }());

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function createConstraint(type, config, locale) {
        switch (type) {
            case exports.ConstraintType.Address:
                return new AddressConstraint(config);
            case exports.ConstraintType.Boolean:
                return new BooleanConstraint();
            case exports.ConstraintType.Action:
                return new ActionConstraint(config);
            case exports.ConstraintType.Color:
                return new ColorConstraint(config);
            case exports.ConstraintType.Coordinates:
                return new CoordinatesConstraint(config);
            case exports.ConstraintType.DateTime:
                return new DateTimeConstraint(config);
            case exports.ConstraintType.Duration:
                return new DurationConstraint(config);
            case exports.ConstraintType.Files:
                return new FilesConstraint();
            case exports.ConstraintType.Number:
                return new NumberConstraint(__assign(__assign({}, config), { locale: locale }));
            case exports.ConstraintType.Percentage:
                return new PercentageConstraint(config);
            case exports.ConstraintType.Select:
                return new SelectConstraint(config);
            case exports.ConstraintType.Text:
                return new TextConstraint(config);
            case exports.ConstraintType.User:
                return new UserConstraint(config);
            case exports.ConstraintType.Link:
                return new LinkConstraint(config);
            default:
                return new UnknownConstraint();
        }
    }
    function createConstraintsInCollections(collections, locale) {
        return collections.map(function (collection) { return createConstraintsInCollection(collection, locale); });
    }
    function createConstraintsInCollection(collection, locale) {
        return __assign(__assign({}, collection), { attributes: createConstraintsInAttributes(collection === null || collection === void 0 ? void 0 : collection.attributes, locale) });
    }
    function createConstraintsInAttributes(attributes, locale) {
        return (attributes || []).map(function (attribute) { var _a, _b; return (__assign(__assign({}, attribute), { constraint: createConstraint((_a = attribute.constraint) === null || _a === void 0 ? void 0 : _a.type, (_b = attribute.constraint) === null || _b === void 0 ? void 0 : _b.config, locale) })); });
    }
    function createConstraintsInLinkTypes(linkTypes, locale) {
        return linkTypes.map(function (collection) { return createConstraintsInLinkType(collection, locale); });
    }
    function createConstraintsInLinkType(linkType, locale) {
        return __assign(__assign({}, linkType), { attributes: createConstraintsInAttributes(linkType === null || linkType === void 0 ? void 0 : linkType.attributes, locale) });
    }

    /*
     * Lumeer: Modern Data Definition and Processing Platform
     *
     * Copyright (C) since 2017 Lumeer.io, s.r.o. and/or its affiliates.
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation, either version 3 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     */
    function filterDocumentsAndLinksIdsFromJson(json) {
        var jsObject = JSON.parse(json);
        var documents = jsObject.documents;
        var linkInstances = jsObject.linkInstances;
        var collections = jsObject.collections;
        var linkTypes = jsObject.linkTypes;
        var query = jsObject.query;
        var collectionsPermissions = jsObject.collectionsPermissions;
        var linkTypePermissions = jsObject.linkTypePermissions;
        var constraintData = jsObject.constraintData;
        var includeChildren = jsObject.includeChildren;
        var language = jsObject.language;
        var collectionsWithConstraints = createConstraintsInCollections(collections, language);
        var linkTypesWithConstraints = createConstraintsInLinkTypes(linkTypes, language);
        var _a = filterDocumentsAndLinksByQuery(documents, collectionsWithConstraints, linkTypesWithConstraints, linkInstances, query, collectionsPermissions, linkTypePermissions, constraintData, includeChildren), filteredDocuments = _a.documents, filteredLinkInstances = _a.linkInstances;
        return {
            documentsIds: filteredDocuments.map(function (document) { return document.id; }),
            linkInstancesIds: filteredLinkInstances.map(function (linkInstance) { return linkInstance.id; }),
        };
    }
    function filterDocumentsAndLinksByQuery(documents, collections, linkTypes, linkInstances, query, collectionsPermissions, linkTypePermissions, constraintData, includeChildren) {
        var _a;
        if (!query || queryIsEmptyExceptPagination(query)) {
            return { documents: paginate(documents, query), linkInstances: linkInstances };
        }
        var documentsByStems = [];
        var linkInstancesByStems = [];
        var stems = (query.stems || []).length > 0
            ? __spreadArrays(query.stems) : (collections || []).map(function (collection) { return ({ collectionId: collection.id }); });
        var documentsByCollections = groupDocumentsByCollection(documents);
        var linkInstancesByLinkTypes = groupLinkInstancesByLinkTypes(linkInstances);
        var escapedFulltexts = (_a = query.fulltexts) === null || _a === void 0 ? void 0 : _a.map(function (fullText) { return removeAccentFromString(escapeHtml(fullText)); });
        stems.forEach(function (stem) {
            var _a = filterDocumentsAndLinksByStem(collections, documentsByCollections, linkTypes, linkInstancesByLinkTypes, collectionsPermissions, linkTypePermissions, constraintData, stem, escapedFulltexts, includeChildren), allDocuments = _a.allDocuments, allLinkInstances = _a.allLinkInstances;
            documentsByStems = mergeDocuments(documentsByStems, allDocuments);
            linkInstancesByStems = mergeLinkInstances(linkInstancesByStems, allLinkInstances);
        });
        return { documents: paginate(documentsByStems, query), linkInstances: linkInstancesByStems };
    }
    function filterDocumentsAndLinksByStem(collections, documentsByCollections, linkTypes, linkInstancesByLinkTypes, collectionsPermissions, linkTypePermissions, constraintData, stem, fulltexts, includeChildren) {
        var _a, _b;
        if (fulltexts === void 0) { fulltexts = []; }
        var filtered = {
            allDocuments: [],
            pipelineDocuments: [],
            allLinkInstances: [],
            pipelineLinkInstances: [],
        };
        var attributesResources = queryStemAttributesResourcesOrder(stem, collections, linkTypes);
        var pipeline = attributesResources.map(function (resource) {
            var type = getAttributesResourceType(resource);
            var filters = type === exports.AttributesResourceType.Collection
                ? (stem.filters || []).filter(function (filter) { return filter.collectionId === resource.id; })
                : (stem.linkFilters || []).filter(function (filter) { return filter.linkTypeId === resource.id; });
            var dataResources = type === exports.AttributesResourceType.Collection
                ? documentsByCollections[resource.id] || []
                : linkInstancesByLinkTypes[resource.id] || [];
            var permissions = type === exports.AttributesResourceType.Collection
                ? collectionsPermissions === null || collectionsPermissions === void 0 ? void 0 : collectionsPermissions[resource.id] : linkTypePermissions === null || linkTypePermissions === void 0 ? void 0 : linkTypePermissions[resource.id];
            var attributes = filterAttributesByFilters(resource.attributes, filters);
            var documentIds = new Set(stem.documentIds || []);
            return { resource: resource, fulltexts: fulltexts, filters: filters, dataResources: dataResources, permissions: permissions, attributes: attributes, documentIds: documentIds };
        });
        if (!pipeline[0]) {
            return filtered;
        }
        var pushedIds = new Set();
        var currentPipeline = pipeline[0];
        var attributesMap = objectsByIdMap((_a = currentPipeline.resource) === null || _a === void 0 ? void 0 : _a.attributes);
        var documentsMap = includeChildren ? documentChildrenMap(currentPipeline.dataResources) : {};
        for (var _i = 0, _c = currentPipeline.dataResources; _i < _c.length; _i++) {
            var dataResource = _c[_i];
            var dataValues = createDataValuesMap(dataResource.data, currentPipeline.attributes, constraintData);
            if (dataValuesMeetsFilters(dataValues, currentPipeline.filters, attributesMap, currentPipeline.permissions, constraintData)) {
                var searchDocuments = includeChildren
                    ? getDocumentsWithChildren(dataResource, documentsMap)
                    : [dataResource];
                var parentDocumentContainsByDocumentIds = pipelineContainsDocumentByIds(currentPipeline, dataResource);
                for (var _d = 0, searchDocuments_1 = searchDocuments; _d < searchDocuments_1.length; _d++) {
                    var document_1 = searchDocuments_1[_d];
                    if (!pushedIds.has(document_1.id) &&
                        (checkAndFillDataResources(document_1, pipeline, filtered, constraintData, 1, !currentPipeline.fulltexts.length ||
                            dataMeetsFulltexts(dataResource.data, currentPipeline.fulltexts, (_b = currentPipeline.resource) === null || _b === void 0 ? void 0 : _b.attributes, constraintData)) || parentDocumentContainsByDocumentIds || pipelineContainsDocumentByIds(currentPipeline, document_1))) {
                        pushedIds.add(document_1.id);
                        filtered.allDocuments.push(document_1);
                        pushToMatrix(filtered.pipelineDocuments, document_1, 0);
                    }
                }
            }
        }
        return filtered;
    }
    function pushToMatrix(matrix, value, index) {
        if (!matrix[index]) {
            matrix[index] = [];
        }
        matrix[index].push(value);
    }
    function checkAndFillDataResources(previousDataResource, pipeline, filtered, constraintData, pipelineIndex, fulltextFound) {
        var _a, _b;
        if (pipelineIndex >= pipeline.length) {
            return pipeline[0].documentIds.size > 0 ? false : !pipeline[0].fulltexts.length || fulltextFound;
        }
        var currentPipeline = pipeline[pipelineIndex];
        var type = getAttributesResourceType(currentPipeline.resource);
        if (type === exports.AttributesResourceType.LinkType) {
            var previousDocument_1 = previousDataResource;
            var linkInstances = pipeline[pipelineIndex].dataResources;
            var linkedLinks = linkInstances.filter(function (linkInstance) {
                return linkInstance.documentIds.includes(previousDocument_1.id) &&
                    dataMeetsFilters(linkInstance.data, currentPipeline.attributes, currentPipeline.filters, currentPipeline.permissions, constraintData);
            });
            if (linkedLinks.length === 0 && containsAnyFilterInPipeline(pipeline, pipelineIndex)) {
                return false;
            }
            var someLinkPassed = (!currentPipeline.fulltexts.length || fulltextFound) && linkedLinks.length === 0;
            for (var _i = 0, linkedLinks_1 = linkedLinks; _i < linkedLinks_1.length; _i++) {
                var linkedLink = linkedLinks_1[_i];
                if (checkAndFillDataResources(linkedLink, pipeline, filtered, constraintData, pipelineIndex + 1, fulltextFound ||
                    dataMeetsFulltexts(linkedLink.data, currentPipeline.fulltexts, (_a = currentPipeline.resource) === null || _a === void 0 ? void 0 : _a.attributes, constraintData)) || pipelineContainsLinkByIds(currentPipeline, linkedLink)) {
                    someLinkPassed = true;
                    filtered.allLinkInstances.push(linkedLink);
                    pushToMatrix(filtered.pipelineLinkInstances, linkedLink, Math.floor(pipelineIndex / 2));
                }
            }
            return someLinkPassed;
        }
        else {
            var previousLink_1 = previousDataResource;
            var documents = pipeline[pipelineIndex].dataResources;
            var linkedDocuments = documents.filter(function (document) {
                return previousLink_1.documentIds.includes(document.id) &&
                    dataMeetsFilters(document.data, currentPipeline.attributes, currentPipeline.filters, currentPipeline.permissions, constraintData);
            });
            if (linkedDocuments.length === 0 && containsAnyFilterInPipeline(pipeline, pipelineIndex)) {
                return false;
            }
            var someDocumentPassed = (!currentPipeline.fulltexts.length || fulltextFound) && linkedDocuments.length === 0;
            for (var _c = 0, linkedDocuments_1 = linkedDocuments; _c < linkedDocuments_1.length; _c++) {
                var linkedDocument = linkedDocuments_1[_c];
                if (checkAndFillDataResources(linkedDocument, pipeline, filtered, constraintData, pipelineIndex + 1, fulltextFound ||
                    dataMeetsFulltexts(linkedDocument.data, currentPipeline.fulltexts, (_b = currentPipeline.resource) === null || _b === void 0 ? void 0 : _b.attributes, constraintData)) || pipelineContainsDocumentByIds(currentPipeline, linkedDocument)) {
                    someDocumentPassed = true;
                    filtered.allDocuments.push(linkedDocument);
                    pushToMatrix(filtered.pipelineDocuments, linkedDocument, Math.floor(pipelineIndex / 2));
                }
            }
            return someDocumentPassed;
        }
    }
    function pipelineContainsDocumentByIds(pipeline, document) {
        return pipeline.documentIds.size > 0 && pipeline.documentIds.has(document.id);
    }
    function pipelineContainsLinkByIds(pipeline, linkInstance) {
        var _a;
        return pipeline.documentIds.size > 0 && (((_a = linkInstance.documentIds) === null || _a === void 0 ? void 0 : _a.length) === 2 && pipeline.documentIds.has(linkInstance.documentIds[0]) || pipeline.documentIds.has(linkInstance.documentIds[1]));
    }
    function containsAnyFilterInPipeline(pipeline, fromIndex) {
        return pipeline.slice(fromIndex, pipeline.length).some(function (pipe) { return (pipe.filters || []).length > 0; });
    }
    function getDocumentsWithChildren(document, documentsMap) {
        var documentsWithChildren = [];
        var currentDocumentsIds = new Set();
        var documentsQueue = [document];
        while (documentsQueue.length) {
            var currentDocument = documentsQueue.splice(0, 1)[0];
            if (currentDocument && !currentDocumentsIds.has(currentDocument.id)) {
                documentsWithChildren.push(currentDocument);
                currentDocumentsIds.add(currentDocument.id);
                var childDocuments = (documentsMap === null || documentsMap === void 0 ? void 0 : documentsMap[currentDocument.id]) || [];
                documentsQueue.push.apply(documentsQueue, childDocuments);
            }
        }
        return documentsWithChildren;
    }
    function someDocumentMeetFulltexts(documents, collection, fulltexts, constraintData) {
        for (var _i = 0, documents_1 = documents; _i < documents_1.length; _i++) {
            var document_2 = documents_1[_i];
            if (dataMeetsFulltexts(document_2.data, fulltexts, collection === null || collection === void 0 ? void 0 : collection.attributes, constraintData)) {
                return true;
            }
        }
        return false;
    }
    function createDataValuesMap(data, attributes, constraintData) {
        return (attributes || []).reduce(function (map, attribute) {
            var _a;
            return (__assign(__assign({}, map), (_a = {}, _a[attribute.id] = (attribute.constraint || new UnknownConstraint()).createDataValue(data === null || data === void 0 ? void 0 : data[attribute.id], constraintData), _a)));
        }, {});
    }
    function dataValuesMeetsFiltersWithOperator(dataValues, attributesMap, filters, permissions, constraintData, operator) {
        if (operator === void 0) { operator = exports.EquationOperator.And; }
        var definedFilters = filters === null || filters === void 0 ? void 0 : filters.filter(function (fil) { return !!attributesMap[fil.attributeId]; });
        if (operator === exports.EquationOperator.Or) {
            return (!definedFilters ||
                definedFilters.length === 0 ||
                definedFilters.reduce(function (result, filter) {
                    return result || dataValuesMeetsFilters(dataValues, [filter], attributesMap, permissions, constraintData);
                }, false));
        }
        return dataValuesMeetsFilters(dataValues, definedFilters, attributesMap, permissions, constraintData);
    }
    function dataMeetsFilters(data, attributes, filters, permissions, constraintData, operator) {
        if (operator === void 0) { operator = exports.EquationOperator.And; }
        var dataValues = createDataValuesMap(data, attributes, constraintData);
        return dataValuesMeetsFiltersWithOperator(dataValues, objectsByIdMap(attributes), filters, permissions, constraintData, operator);
    }
    function dataValuesMeetsFilters(dataValues, filters, attributesMap, permissions, constraintData) {
        if (!filters || filters.length === 0) {
            return true;
        }
        return filters.every(function (filter) {
            var _a;
            if (!dataValues[filter.attributeId]) {
                return false;
            }
            var constraint = (_a = attributesMap[filter.attributeId]) === null || _a === void 0 ? void 0 : _a.constraint;
            var constraintType = (constraint === null || constraint === void 0 ? void 0 : constraint.type) || exports.ConstraintType.Unknown;
            switch (constraintType) {
                case exports.ConstraintType.Action:
                    var config = constraint.config;
                    if (filter.condition === exports.ConditionType.Enabled) {
                        return isActionButtonEnabled(dataValues, attributesMap, permissions, config, constraintData);
                    }
                    else if (filter.condition === exports.ConditionType.Disabled) {
                        return !isActionButtonEnabled(dataValues, attributesMap, permissions, config, constraintData);
                    }
                    return false;
                default:
                    return dataValues[filter.attributeId].meetCondition(filter.condition, filter.conditionValues);
            }
        });
    }
    function isActionButtonEnabled(dataValues, attributesMap, permissions, config, constraintData) {
        var _a, _b, _c;
        if (!dataValues || !attributesMap) {
            return false;
        }
        var filters = ((_b = (_a = config.equation) === null || _a === void 0 ? void 0 : _a.equations) === null || _b === void 0 ? void 0 : _b.map(function (eq) { return eq.filter; })) || [];
        return (dataValuesMeetsFiltersWithOperator(dataValues, attributesMap, filters, permissions, constraintData, (_c = config.equation) === null || _c === void 0 ? void 0 : _c.operator) && hasRoleByPermissions(config.role, permissions));
    }
    function dataMeetsFulltexts(data, fulltexts, attributes, constraintData) {
        if (!fulltexts || fulltexts.length === 0) {
            return true;
        }
        var dataValues = createDataValuesMap(data, attributes, constraintData);
        return fulltexts.some(function (fulltext) { return objectValues(dataValues).some(function (dataValue) { return dataValue.meetFullTexts([fulltext]); }); });
    }
    function paginate(documents, query) {
        if (!query || isNullOrUndefined(query.page) || isNullOrUndefined(query.pageSize) || (!query.page && !query.pageSize)) {
            return documents;
        }
        return __spreadArrays(documents).slice(query.page * query.pageSize, (query.page + 1) * query.pageSize);
    }
    function documentChildrenMap(documents) {
        return (documents || []).reduce(function (map, document) {
            var _a;
            if ((_a = document.metaData) === null || _a === void 0 ? void 0 : _a.parentId) {
                if (!map[document.metaData.parentId]) {
                    map[document.metaData.parentId] = [];
                }
                map[document.metaData.parentId].push(document);
            }
            return map;
        }, {});
    }

    exports.ActionConstraint = ActionConstraint;
    exports.ActionDataValue = ActionDataValue;
    exports.AddressConstraint = AddressConstraint;
    exports.AddressDataValue = AddressDataValue;
    exports.BooleanConstraint = BooleanConstraint;
    exports.BooleanDataValue = BooleanDataValue;
    exports.ColorConstraint = ColorConstraint;
    exports.ColorDataValue = ColorDataValue;
    exports.CoordinatesConstraint = CoordinatesConstraint;
    exports.CoordinatesDataValue = CoordinatesDataValue;
    exports.DateTimeConstraint = DateTimeConstraint;
    exports.DateTimeDataValue = DateTimeDataValue;
    exports.DurationConstraint = DurationConstraint;
    exports.DurationDataValue = DurationDataValue;
    exports.EMAIL_REGEX = EMAIL_REGEX;
    exports.FilesConstraint = FilesConstraint;
    exports.FilesDataValue = FilesDataValue;
    exports.LinkConstraint = LinkConstraint;
    exports.LinkDataValue = LinkDataValue;
    exports.NumberConstraint = NumberConstraint;
    exports.NumberDataValue = NumberDataValue;
    exports.PercentageConstraint = PercentageConstraint;
    exports.PercentageDataValue = PercentageDataValue;
    exports.SelectConstraint = SelectConstraint;
    exports.SelectDataValue = SelectDataValue;
    exports.TextConstraint = TextConstraint;
    exports.TextDataValue = TextDataValue;
    exports.UnknownConstraint = UnknownConstraint;
    exports.UnknownDataValue = UnknownDataValue;
    exports.UserConstraint = UserConstraint;
    exports.UserDataValue = UserDataValue;
    exports.addDurationToDate = addDurationToDate;
    exports.arrayIntersection = arrayIntersection;
    exports.avgAnyValues = avgAnyValues;
    exports.avgNumericValues = avgNumericValues;
    exports.compareBigNumbers = compareBigNumbers;
    exports.completeLinkValue = completeLinkValue;
    exports.completeStringWithCharacter = completeStringWithCharacter;
    exports.conditionTypeNumberOfInputs = conditionTypeNumberOfInputs;
    exports.convertBigToNumberSafely = convertBigToNumberSafely;
    exports.convertHslColorToHex = convertHslColorToHex;
    exports.convertRgbColorToHex = convertRgbColorToHex;
    exports.convertStringToNumberSafely = convertStringToNumberSafely;
    exports.convertToBig = convertToBig;
    exports.countValues = countValues;
    exports.createBigWithoutTrailingZeros = createBigWithoutTrailingZeros;
    exports.createConstraint = createConstraint;
    exports.createConstraintsInAttributes = createConstraintsInAttributes;
    exports.createConstraintsInCollection = createConstraintsInCollection;
    exports.createConstraintsInCollections = createConstraintsInCollections;
    exports.createConstraintsInLinkType = createConstraintsInLinkType;
    exports.createConstraintsInLinkTypes = createConstraintsInLinkTypes;
    exports.createDataValuesMap = createDataValuesMap;
    exports.createDurationUnitsCountsMap = createDurationUnitsCountsMap;
    exports.createRange = createRange;
    exports.currencies = currencies;
    exports.dataValuesMeetConditionByNumber = dataValuesMeetConditionByNumber;
    exports.dataValuesMeetConditionByText = dataValuesMeetConditionByText;
    exports.decimalStoreToUser = decimalStoreToUser;
    exports.decimalUserToStore = decimalUserToStore;
    exports.deepObjectCopy = deepObjectCopy;
    exports.deepObjectsEquals = deepObjectsEquals;
    exports.durationConstraintUnitMaxValue = durationConstraintUnitMaxValue;
    exports.durationCountsMapToString = durationCountsMapToString;
    exports.escapeHtml = escapeHtml;
    exports.escapeStringForRegex = escapeStringForRegex;
    exports.filterAttributesByFilters = filterAttributesByFilters;
    exports.filterDocumentsAndLinksByQuery = filterDocumentsAndLinksByQuery;
    exports.filterDocumentsAndLinksByStem = filterDocumentsAndLinksByStem;
    exports.filterDocumentsAndLinksIdsFromJson = filterDocumentsAndLinksIdsFromJson;
    exports.formatCoordinates = formatCoordinates;
    exports.formatDurationDataValue = formatDurationDataValue;
    exports.formatLinkValue = formatLinkValue;
    exports.formatUnknownDataValue = formatUnknownDataValue;
    exports.getAttributesResourceType = getAttributesResourceType;
    exports.getDefaultDurationUnitConversion = getDefaultDurationUnitConversion;
    exports.getDurationSaveValue = getDurationSaveValue;
    exports.getDurationUnitToMillisMap = getDurationUnitToMillisMap;
    exports.getNumbroLanguage = getNumbroLanguage;
    exports.getPreviousDurationUnit = getPreviousDurationUnit;
    exports.getSmallestDateUnit = getSmallestDateUnit;
    exports.groupDocumentsByCollection = groupDocumentsByCollection;
    exports.groupLinkInstancesByLinkTypes = groupLinkInstancesByLinkTypes;
    exports.hasRoleByPermissions = hasRoleByPermissions;
    exports.initialConditionType = initialConditionType;
    exports.initialConditionValues = initialConditionValues;
    exports.isActionButtonEnabled = isActionButtonEnabled;
    exports.isArray = isArray$1;
    exports.isDateValid = isDateValid;
    exports.isDurationDataValueValid = isDurationDataValueValid;
    exports.isEmailValid = isEmailValid;
    exports.isNotNullOrUndefined = isNotNullOrUndefined;
    exports.isNullOrUndefined = isNullOrUndefined;
    exports.isNullOrUndefinedOrEmpty = isNullOrUndefinedOrEmpty;
    exports.isNumeric = isNumeric;
    exports.isObject = isObject$1;
    exports.linkHasValidProtocol = linkHasValidProtocol;
    exports.maxInAnyValues = maxInAnyValues;
    exports.maxInNumericValues = maxInNumericValues;
    exports.medianInAnyValues = medianInAnyValues;
    exports.medianInNumericValues = medianInNumericValues;
    exports.mergeDocuments = mergeDocuments;
    exports.mergeLinkInstances = mergeLinkInstances;
    exports.minInAnyValues = minInAnyValues;
    exports.minInNumericValues = minInNumericValues;
    exports.objectValues = objectValues;
    exports.objectsByIdMap = objectsByIdMap;
    exports.ordinal = ordinal;
    exports.parseCoordinates = parseCoordinates;
    exports.parseLinkValue = parseLinkValue;
    exports.parseMomentDate = parseMomentDate;
    exports.prolongShortHexColor = prolongShortHexColor;
    exports.queryIsEmptyExceptPagination = queryIsEmptyExceptPagination;
    exports.queryIsNotEmptyExceptPagination = queryIsNotEmptyExceptPagination;
    exports.queryStemAttributesResourcesOrder = queryStemAttributesResourcesOrder;
    exports.removeAccentFromString = removeAccentFromString;
    exports.removeNonNumberCharacters = removeNonNumberCharacters;
    exports.removeTrailingZeroesFromString = removeTrailingZeroesFromString;
    exports.replaceNbspFromString = replaceNbspFromString;
    exports.resetUnusedDatePart = resetUnusedDatePart;
    exports.resetUnusedMomentPart = resetUnusedMomentPart;
    exports.resetWeek = resetWeek;
    exports.roundBigNumber = roundBigNumber;
    exports.setCharAt = setCharAt;
    exports.someDocumentMeetFulltexts = someDocumentMeetFulltexts;
    exports.sortedDurationUnits = sortedDurationUnits;
    exports.stripTextHtmlTags = stripTextHtmlTags;
    exports.sumAnyValues = sumAnyValues;
    exports.sumNumericValues = sumNumericValues;
    exports.toNumber = toNumber;
    exports.transformTextBasedOnCaseStyle = transformTextBasedOnCaseStyle;
    exports.transformTextToSentenceCase = transformTextToSentenceCase;
    exports.transformTextToTitleCase = transformTextToTitleCase;
    exports.unescapeHtml = unescapeHtml;
    exports.uniqueAttributes = uniqueAttributes;
    exports.uniqueValues = uniqueValues;
    exports.uniqueValuesCount = uniqueValuesCount;
    exports.validDataColors = validDataColors;
    exports.valueByConditionNumber = valueByConditionNumber;
    exports.valueByConditionText = valueByConditionText;
    exports.valueMeetFulltexts = valueMeetFulltexts;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
